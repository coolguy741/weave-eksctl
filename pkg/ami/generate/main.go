// +build ignore

package main

import (
	"fmt"
	"os"
	"sort"
	"text/template"
	"time"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/credentials/stscreds"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/ec2"
	amiapi "github.com/weaveworks/eksctl/pkg/ami"
	"github.com/weaveworks/eksctl/pkg/eks/api"
)

type imageDetail struct {
	Region  string
	ImageId string
}

type images struct {
	General   []imageDetail
	Gpu       []imageDetail
	Timestamp time.Time
}

var (
	supportedRegions = []string{api.EKS_REGION_US_WEST_2, api.EKS_REGION_EU_WEST_1, api.EKS_REGION_US_EAST_1}
	amiTemplate      = template.Must(template.New("").Parse(`
// Code generated by go generate; DO NOT EDIT.

package ami

// StaticImages is a map that holds the list of amis to be used by
// for static ami resolution
var StaticImages = map[string]map[int]map[string]string{
	ImageFamilyAmazonLinux2: {
		ImageClassGeneral: {
			{{- range .General }}
			"{{ .Region}}": "{{ .ImageId}}",
			{{- end }}
		},
		ImageClassGPU: {
			{{- range .Gpu }}
			"{{ .Region}}": "{{ .ImageId}}",
			{{- end }}
		},
	},
}`))
)

func main() {
	fmt.Println("generating list of AMIs for the static resolvers")

	amiImages := images{}
	for _, region := range supportedRegions {
		general, gpu, err := getAmis(region)
		if err != nil {
			fmt.Println(err)
			return
		}

		fmt.Printf("region %s, general class = %s, gpu class = %s\n", region, general, gpu)

		amiImages.General = append(amiImages.General, imageDetail{
			ImageId: general,
			Region:  region,
		})

		amiImages.Gpu = append(amiImages.Gpu, imageDetail{
			ImageId: gpu,
			Region:  region,
		})
	}

	// Sort on region
	sort.Slice(amiImages.General, func(i, j int) bool {
		return amiImages.General[i].Region < amiImages.General[j].Region
	})
	sort.Slice(amiImages.Gpu, func(i, j int) bool {
		return amiImages.Gpu[i].Region < amiImages.Gpu[j].Region
	})

	f, err := os.Create("./static_resolver_ami.go")
	if err != nil {
		fmt.Println(err)
		return
	}
	defer f.Close()

	err = amiTemplate.Execute(f, amiImages)
	if err != nil {
		fmt.Println(err)
		return
	}
}

func getAmis(region string) (normal string, gpu string, reterr error) {
	s := newSession(region)
	e := ec2.New(s)

	normal, err := amiapi.FindImage(e, "amazon-eks-node-*")
	if err != nil {
		return "", "", err
	}
	gpu, err = amiapi.FindImage(e, "amazon-eks-gpu-node-*")
	if err != nil {
		return "", "", err
	}

	return
}

func newSession(region string) *session.Session {
	config := aws.NewConfig()
	config = config.WithRegion(region)
	config = config.WithCredentialsChainVerboseErrors(true)

	// Create the options for the session
	opts := session.Options{
		Config:                  *config,
		SharedConfigState:       session.SharedConfigEnable,
		AssumeRoleTokenProvider: stscreds.StdinTokenProvider,
	}

	return session.Must(session.NewSessionWithOptions(opts))
}
