// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/schema.json (32.113kB)

package v1alpha5

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x5b\x6f\x23\xb9\x72\x7e\x9f\x5f\x41\xf8\x1c\x20\x09\x20\x5b\xc9\x43\x12\x60\x70\x72\x00\x8d\x3d\xeb\x51\x66\x6c\x0b\xd6\x64\x16\xd9\xcb\x43\xa9\xbb\x24\x71\xcd\x26\x7b\x49\xb6\x6d\xcd\x62\xfe\x7b\xc0\xbe\xb9\x2f\x64\xab\xbb\x45\x39\x9a\xc5\x79\xdb\xb5\x9a\x45\xb2\xea\xab\x2b\x8b\x9c\x3f\xde\x10\x72\xf6\x57\x89\xeb\xb3\xb7\xe4\xec\x2f\xd3\x10\xd7\x94\x53\x4d\x05\x57\xd3\x4b\x96\x28\x8d\xf2\x52\xf0\x35\xdd\x9c\x4d\xcc\x87\x7a\x17\xa3\xf9\x50\xac\x7e\xc3\x40\x67\x7f\xfb\xab\x0a\xb6\x18\x81\xf9\xf3\x56\xeb\xf8\xed\x74\xfa\x9b\x12\xfc\x3c\xfb\xeb\xb9\x90\x9b\x69\x28\x61\xad\xcf\xff\xf5\x3f\xa7\xd9\xdf\xfe\x92\x8d\xab\x4c\x75\xf6\x96\x98\x75\x10\x72\x56\xcc\xc9\x44\x12\xfe\x08\x3a\xd8\x96\x3f\x11\x72\x16\x4b\x11\xa3\xd4\x14\x55\xe5\xaf\x84\x9c\x05\xd9\xa0\x4f\x62\xb3\xa1\x7c\x53\xfb\x6d\xef\xe6\xca\x89\x8a\xd1\xe5\xd0\x6f\xf9\x7f\x7d\x9b\xbc\xcc\x8f\x6b\x94\x12\xc3\x3b\x19\xa2\x3c\x7b\x4b\x7e\x76\xae\x21\xff\xe1\xd7\x72\x2c\x84\x61\x3a\x33\xb0\x45\x75\x17\x6b\x60\x0a\xcb\x8f\x42\x54\x81\xa4\xb1\xf9\xce\xac\x38\x10\x5c\x03\xe5\x8a\x04\xa9\x08\x48\x0c\x12\x22\xd4\x28\x15\x91\xc8\x40\x63\x48\xb4\x20\x15\x5e\x95\x84\x9e\xcf\x29\xd7\xc8\x18\xfd\xed\x7c\xab\x23\x76\x7e\x28\xe1\x37\x15\x46\xb4\x65\xd4\x66\xbc\x53\x54\xc8\x61\xc5\xf0\xf3\x2e\x6e\xfc\x40\xc8\x19\xd5\x18\x35\xff\x58\x81\x9c\xd2\xd2\xcc\x31\xa9\xff\x1a\xe2\x1a\x12\xa6\xcd\x07\x67\x95\x5f\xbe\x55\x3f\x2b\x49\x80\x94\xb0\x1b\x2b\xe0\xea\xca\x7d\x4a\x17\x65\xb7\x14\x72\x60\x11\x96\x33\x79\xa0\x8c\x87\x92\xb7\x4a\x3a\xb3\x00\x15\xf1\x4a\xfc\x3d\xa1\x12\xc3\x3a\x8b\x22\xd4\x10\x82\x86\x36\x7f\x5c\x70\x80\x98\x7e\x41\xa9\xb2\x25\xff\x61\x93\x99\x45\xec\x35\xa1\xd7\x7e\xc0\x67\x88\x62\x96\x4e\xf2\x73\x1d\x27\xf8\xa0\x02\xcd\x2e\xa8\x98\x3e\xfe\x1b\xb0\x78\x0b\xff\x5e\x85\xcb\xaf\x6f\x2c\xc0\x39\x83\x47\xa0\x0c\x56\x94\x51\xbd\xfb\x49\xf0\x53\x40\xec\xa4\x6a\x70\x2c\x26\x92\x0c\x30\x78\x76\xb2\x6b\x90\x1b\xd0\xb8\x90\x62\x4d\x59\xef\x2d\xdb\xa7\xfc\xa1\x46\xeb\xa0\xdd\x6e\xa8\xee\xb7\xcd\x6b\xaa\xed\x14\x28\x44\x83\x18\x35\x9f\xdd\xd8\x09\x3d\x50\x1e\x1e\x19\xad\x75\xbd\xdb\x0b\xd4\x08\x38\x6c\x30\xbc\x15\x21\x5e\x4b\x91\xc4\x87\x49\xed\xa6\x41\xed\x20\xb9\x95\x26\x61\x08\xeb\x6f\xf0\xc5\x86\xd4\xc9\x71\x3f\x5b\xf4\xb3\x37\x85\x81\x44\xad\xde\xf3\x40\xee\x0a\xb3\xdb\x63\x93\xcb\xd6\x30\x3b\x75\x0d\x3a\x69\x6d\xb3\x93\x6f\xcb\x6c\x88\x95\xdc\x63\x1c\x0c\xa2\xf5\x65\x71\x39\xd6\x53\xa6\x0a\x32\xb1\x1a\x79\x1b\x32\x1a\x3a\xda\x58\xb3\x5d\xf8\x9d\xe0\xef\xb0\x66\x9d\xd6\xdd\x6e\x5c\x3b\x05\xde\x96\x57\xc3\x66\x79\x89\x14\x80\x28\x6a\x2c\x45\xee\xc9\x27\xc6\x6f\xaf\x90\x48\x8c\x19\x04\x18\x92\x27\xaa\xb7\x24\x97\x1b\x99\x2d\xe6\xbd\x63\x84\xc1\x84\x6d\xd1\xc1\x7b\x1e\xc6\x82\x72\xad\xfa\xc4\x7f\xb1\xa4\x8f\xa0\x71\x16\x04\xa8\x5a\xe0\x2e\x74\x6e\x25\x04\x43\x70\xe8\x45\x9c\xac\x18\x0d\x86\x12\x18\x04\xe0\xfa\x22\x5d\x73\x7b\x11\xed\x56\xb0\x50\x95\x41\x18\xc4\x94\x28\x94\x8f\x28\x09\xe6\x5c\x25\x90\xce\x46\x28\x5f\x0b\x19\x41\x0d\x75\xfb\xc4\x3b\x8a\xb8\x4d\xc4\xc6\x17\xf6\x10\x6e\xa1\x6d\x22\x7c\xff\x8c\x41\x62\xc8\xdd\x0b\x86\xb3\xfb\xdb\x3d\xfe\xb2\x33\x12\x69\x50\x5b\xa0\x8c\xa8\x32\xd6\x44\xbd\x13\x09\x0f\x41\xee\xc6\x50\x37\x9c\xa0\x81\x91\xb1\x48\xea\xd8\x25\x83\xdd\xc9\x0b\x97\x96\x35\xaa\x07\x7a\x97\x94\xd4\x01\x0c\xac\x50\xf0\xc4\x34\x63\x0f\xee\xe6\x57\x97\x47\xd2\xbb\xc6\x96\xfb\x6f\x65\x3f\x6a\x1a\xf4\x06\x60\xcb\xb6\xfd\x0e\x1c\x79\xb4\x0a\xc0\x18\x99\xcf\x6e\x08\x68\x2d\xe9\x2a\xd1\xa8\x88\x58\x13\x28\x14\x7a\xa0\x19\xd8\x47\xcd\xa1\xf7\x0d\x44\xf7\xb0\x02\xc0\xb9\xd0\x50\xaf\xeb\x74\xf3\xe2\x78\xf9\x53\xa5\x4e\x65\x23\xf0\xc7\x37\x3b\xce\x41\x6b\x08\xb6\x0b\xc1\x68\xd0\xd2\x13\xbb\x09\x98\x73\x46\x39\x5e\x89\x20\x89\x90\x3b\x32\x90\x2a\xd5\xd9\xfd\xed\x69\xa5\x93\x0c\x56\xc8\xbe\x5b\x81\x71\x88\x70\x6c\x4e\xe6\x24\xa8\x62\x08\xfc\x52\x8d\x07\x9b\xe1\x61\xf4\x47\xe4\x0c\x2d\x15\xef\x4a\x22\x34\x6c\xbe\x2f\x88\x0c\x72\x3f\x29\x88\xac\x18\x68\xeb\xc9\xc4\x6e\xef\xba\xb4\xdd\x65\x5f\xf6\xe0\xa3\x33\xc5\x48\x05\xe2\xd3\xe5\x70\x42\x21\xca\x7d\x1a\x64\x80\x20\x45\xa6\x46\x80\x87\x79\xa6\x90\xc8\x31\x91\xe8\x50\xea\xbd\x5c\xd2\xb2\x89\x79\xa7\x63\x92\x03\x43\xa9\x41\xe0\x29\x88\x7b\x14\x46\x26\x6e\xe3\xa5\x5b\x5c\x1b\xc8\xf8\x2e\x4a\x36\x26\xa7\x05\x98\xbd\xe5\xde\xa6\xbe\x48\xdc\x54\xaa\x19\xfb\x8b\xbf\xde\x8d\x76\xbe\x00\x9f\x24\xbf\x3b\x8b\x57\x2d\x9f\x1c\x56\x59\xf7\x64\x45\x73\xa1\x58\xd6\x75\x14\x3b\xf6\xb4\x05\x4d\x68\x88\x5c\xd3\x35\x45\x35\x22\x5c\x76\x53\xb0\xa9\xca\xed\xec\x73\x1f\xdb\x63\xb2\x8d\x27\xe8\x9f\x74\x0d\x62\x79\x41\xdc\xa3\xed\xb9\x9d\x7d\x26\x39\xd9\xba\x51\x26\x22\xae\xbb\xba\x7e\x16\x68\x3f\x3d\x1b\x73\xfb\xdb\x76\x90\x7e\xf5\x3e\x30\x93\xac\x69\x00\x1a\x67\x89\xde\x0a\x49\xf5\xee\xca\x52\xc7\xee\x17\xb3\x1f\x12\x98\x17\xb5\x1a\xdf\x81\x62\xf0\x70\xeb\xc5\xfe\x0e\x42\x6a\xb9\x99\x3e\xac\x9e\xd4\xc5\x6b\x5d\xbe\x37\xc8\x13\x89\x10\x9e\x0b\xce\x76\x5e\xf2\xed\x1e\xe4\xac\x80\x4f\x56\x1c\x07\x55\x52\xc7\x39\x27\xc7\xb1\x08\xea\x27\x21\x1f\x8e\xe6\x90\xb2\xf2\xe9\xc9\xaf\x78\x10\xa2\x0b\x31\xb4\xb7\xe9\xd1\x1a\xe7\x93\xa4\x21\x72\x46\x9d\xa8\x1c\x29\xc3\xcc\x70\x07\x21\x1b\x1c\xbf\x2c\x2e\x7b\x19\xdf\x44\x8b\x19\x63\xc2\xa8\xf0\x7c\xf1\xf8\x1f\xa3\xea\xfa\x01\x0d\x65\xbf\xcc\x75\x43\xf5\x36\x59\x5d\x04\x22\x9a\x3e\x21\x3c\xa2\x41\x80\x9a\x66\x27\xfc\xd3\xf8\x61\x33\x4d\x34\x65\x6a\x4a\x63\x8e\xfa\x62\xbe\xb8\x45\x47\x3d\x26\x70\x9f\x5f\x74\xcc\xde\x3a\xf5\xb0\x5b\xed\x67\x2d\xe1\x72\x7e\x75\x7f\x58\x65\xf9\x90\xad\x76\xfb\x9a\x86\x26\xd4\xb0\xb2\x16\x92\xbc\x80\x95\x98\x6d\x10\x50\x4a\x04\x34\x4b\x73\x27\x04\x2f\x36\x17\x44\x0b\x92\x28\xcc\x0e\x89\x14\xc6\x20\x0d\xb2\xd2\x8f\x0d\x81\x02\x6a\x39\xbe\x88\xa1\xc9\x77\x04\xc2\xf3\xad\x68\xc3\xb7\x0f\x84\x5f\x71\x59\x56\x99\xd2\xd1\xc7\xfe\x56\x72\x1c\x7a\xb6\x34\x54\x22\xcd\x0e\xb3\x9a\x9d\x4a\x0d\x81\xdc\xeb\x14\x16\x15\x06\x89\x71\xe9\xd9\x79\xbb\xd7\x20\x66\x0b\x32\x3b\xf8\x5d\x8e\x9f\xa3\x85\xb0\x58\xe2\x79\xca\x7d\x0c\x49\x36\x03\xe1\x22\x44\xb2\xbc\x1e\x0c\xd6\xbe\xa4\xf6\xef\xb4\x15\x16\xec\x87\xcb\xd2\xa6\x61\x8d\x45\x16\x4a\x00\x12\x09\x52\xbd\x45\x59\x78\x85\x8a\xa6\x98\x9d\xb4\x15\xca\x6c\x64\x93\x9e\xb7\x13\xbd\x45\x85\x29\x8d\x07\xdc\x61\x48\x56\x3b\x32\xfb\x29\x1d\x16\x08\xfe\x88\x9c\x22\xaf\xd5\xd0\xf6\x33\xef\x35\xd7\x35\xd2\xef\xd3\x5a\x8b\x43\xea\xbc\x9c\xa0\xb7\x48\xd2\xee\x2a\x7a\x80\x7b\xd2\xe1\x76\x1b\xc6\xa5\xcb\xd5\x75\x9a\x0f\x8f\x91\xcb\x86\x89\x15\xb0\xdc\xae\xa6\x61\x07\x30\x46\x82\x2d\x65\x45\x00\x32\xad\x5b\xe4\x81\x01\xcd\x70\xfa\xb5\x38\xa7\xd1\xa1\xd6\xaf\xe4\xd5\x62\x8f\xbf\x02\x57\x6d\x87\x62\x6d\x20\x4c\xf2\x35\x92\x38\x5b\xe4\xc5\x20\x4d\xea\x45\x63\xff\xb9\xc5\xe0\x13\xfd\xae\x7d\xcd\x67\x37\x44\x0a\x86\xff\xa4\xc8\xec\xfe\xb6\xf0\xd7\x5a\x10\x99\x70\x12\x8b\x50\x11\xc1\xb5\x28\xd6\x3c\x6c\xbf\x07\xd1\xde\x6f\x87\x91\x61\xa0\x85\xf4\xd9\x16\xb9\xcc\x69\xfa\x08\xdc\x32\x67\x93\x4a\x5c\x26\x0c\x95\xd9\x78\xb6\x66\x62\x22\x47\x26\x20\xed\xf9\x55\xc1\x16\xc3\x84\xe1\x01\x7c\x3e\x6c\xa6\x21\x4e\xee\xb5\x82\x97\x2e\xbe\x3e\x6d\x69\xb0\x2d\x95\x48\x6d\x45\xc2\xc2\x02\x58\xa1\x20\x3c\xcb\x42\x49\xda\x35\x15\x21\xd7\x24\x57\xbb\x8c\x23\x18\x96\x3c\xb9\x20\xf3\x35\xe1\x82\xa7\x9a\xf8\x48\x43\x0c\x27\xa9\xc1\x2a\x1c\x9e\x71\x4e\x66\x60\xd1\xb3\xf3\x44\x19\x23\x2b\x34\x73\x85\xc3\x04\x74\x22\x4b\xb6\x4a\xfa\xbb\x2b\xaa\x0f\x8a\x0c\x9a\x05\x70\x9b\xf1\xb4\xda\x94\xee\x30\xc1\x5f\x89\x3c\xd3\x5d\x95\x8b\x5b\x6b\xca\x37\x2a\x15\x57\x4d\x63\x4b\x35\xb6\x1b\x89\x7e\x06\x62\xe4\x24\x1d\x3e\xba\x34\x97\xbd\x7c\x75\x76\x7c\xdb\xdb\x61\x9f\x74\x13\x44\x8d\xbd\x1f\x93\x15\x4a\x8e\x1a\x15\x49\x17\x4d\x4a\x18\x55\x7c\x5e\xc3\x20\x0f\x33\x20\x1e\x66\xe8\xd9\xb8\x31\xa2\xcf\xc2\xb5\xd2\x92\x1c\x59\x4b\x11\x91\xcc\x08\x7a\xe4\xc4\x38\xfa\x9e\x4e\xd5\x5c\xbd\x08\x5e\x8d\xc2\x01\x71\x43\x5f\x93\x30\x36\x60\x28\x0c\xc2\x35\xed\xd5\x87\xb6\x12\x42\x2b\x2d\x21\x6e\x47\xf7\xc4\x1d\x9c\xb5\x2e\xab\x54\xd1\x6a\x26\x82\xba\xf1\xe9\x20\x75\x57\x7c\x6d\xa5\x25\x31\x16\xfd\xe8\xdc\x9b\x2f\x47\xe2\x26\x9d\xc5\xb6\x83\x49\x07\xa3\xbc\x00\x2a\x4f\xc2\xd3\x74\xcc\x76\xe0\x57\xbd\x84\x96\xde\xad\xa3\x7c\x43\xae\xa9\xbe\x8b\x4d\x8c\xfe\x72\x4e\x92\x26\x75\x8c\xf2\x07\xf3\x3b\xd5\xe6\x73\x30\xdf\x11\xb3\x35\x45\xb5\x90\xbb\xfe\x10\x7c\xd5\x45\xd5\x40\xdb\x68\x10\xac\xe0\xd7\xe5\x5e\x5e\x04\xec\xf0\x0b\xae\x16\x9e\x1d\x01\xb9\xa2\x5a\x82\xdc\x91\xff\x5e\xde\xdd\x4e\xff\x77\x76\xf3\x89\x84\xf9\xd4\x6a\x42\x54\x12\x6c\x09\x28\x92\x56\x1e\x2c\xd7\x03\x85\x4c\x3b\x45\x63\xc1\x68\x40\x71\xe8\x19\xc3\x31\x17\x60\xf1\x28\x05\x83\x5b\xd7\x96\x3c\x27\xf3\x10\xd1\x1f\x20\xa2\xcc\x6f\xc7\xde\x69\xdf\x31\x0c\x51\x19\xb6\x5d\x42\x0c\x01\xd5\xce\x9d\x1b\x50\x6c\xd0\x61\xe7\x7a\xdf\xbb\x2b\x25\xe7\xbc\x79\x47\xb9\xd2\xc0\x83\xf4\x12\xae\x57\x29\x9c\x74\xdc\xb7\x37\x86\x8a\xe0\x79\x49\xbf\x3a\x39\xd2\x29\x9d\x88\xf2\xd1\x63\xbd\xf7\x6f\xe5\x95\xba\xfc\x50\xd7\x72\x95\xbf\x79\x90\xe8\x22\x9f\x3a\x26\x47\x95\x41\xf5\xbc\x2f\x5b\xc2\x71\xb9\xfc\xf0\x27\x49\x63\x2b\x6b\x7f\x14\x2c\x89\x70\x98\xe8\x07\x07\xac\xb5\x62\x75\x69\x3e\x5d\x0a\xdd\x61\x77\x2c\x80\xb5\xe0\xdf\xbe\xbd\x4e\x63\xdb\x00\x46\xdb\x24\x74\xa2\xb3\x89\x85\x86\xd5\xf3\x1a\x97\x03\x27\xef\x3f\x2e\xcf\xf3\xdb\x8e\x2f\xc7\x1c\xe4\xf3\xdd\xd5\x1d\xf9\x02\x8c\x86\xe5\xa1\x08\x8f\x20\x8e\x31\x24\x6b\x8a\x99\x43\x0e\x89\xde\x4a\xf1\x64\x88\xa0\x94\xa2\x7f\x2b\xcb\x71\x66\xaf\xfb\x6d\xd4\x92\x06\xea\x52\x30\x93\x0c\xd4\xfb\x15\x1d\x8e\x7b\x23\x81\x27\x0c\xa4\x81\x46\x6f\xff\x5d\x1d\xe4\xd3\x68\x45\xd9\xfa\xff\xff\xfd\xf6\x20\xf5\xac\x72\xc3\xb2\x19\x2f\xd0\x4d\xab\x3d\xab\x5d\x56\x02\x0a\x20\x8d\xa5\x8b\x8b\xa6\x0a\x91\xfc\x9c\xde\xb2\x2d\x6f\x1e\x9a\x00\x51\xfd\xfa\xcf\x5b\xad\x63\xf5\x76\x3a\x35\xff\x77\x01\x4f\xea\x02\x22\xf8\x2a\x78\xda\x03\x31\xfb\x71\x99\xbe\x5f\xf0\x43\x31\x66\x6a\xa2\x75\xa5\xa7\xff\xa3\x50\x5e\x27\x34\xc4\x29\x3c\xa9\xf3\x17\x08\x9c\x83\x3a\xcf\xf7\x14\x94\x00\xbb\x30\x48\xff\x97\xde\x3a\xb0\x6f\x1b\x7f\x03\xb2\x95\xb8\xfe\xaf\x5f\xce\x5e\x69\xe9\xbf\x9c\xfd\xdd\xc2\xb9\xbf\x4d\xe1\xef\x75\xcd\x2a\x9a\xa3\x7a\xe4\xca\xaf\xdf\x7c\xe3\xa3\x99\x62\x10\xe2\x2d\x07\xb6\x5e\x50\x9e\x25\x3d\xf3\xab\xd4\xd0\x5d\xce\xaf\xee\x07\xa6\x4b\xd5\x91\x75\xf1\x1d\x31\x93\xf1\x9b\xc3\x1c\x27\x33\x52\x9b\x2e\xd7\x40\x3a\x8c\xac\xe3\x5d\x8b\x16\xb5\x43\x52\xa3\xd3\x4e\xdc\x56\x42\x6b\x86\x52\x04\x0f\xd8\xb3\xc9\xa8\x44\xdb\xbb\xea\x50\x2b\xf1\x80\x81\x52\x34\xf8\x24\x20\x7c\x07\xcc\xc4\x6f\xf2\x16\xa2\x13\xe3\x40\x5e\xa8\xb9\xba\x5d\x7a\x45\xa5\x8f\x8c\x18\x57\xea\x2e\xd6\x34\xa2\x5f\xd1\x69\x04\x3b\x5b\x25\x8f\x90\x52\xfb\xe9\x05\xb7\x10\x5e\x48\x5c\xd3\xe7\xa3\x90\xf6\x5e\x06\x28\x08\xab\x2b\xaa\xb2\x9e\xed\xde\x8f\xba\xbc\x70\xda\x4a\xc3\x3a\xdd\x43\xb2\x42\x86\xfa\x7d\xda\xff\xd3\x7c\x62\xab\x63\xae\x3e\x77\x8d\xbf\xfb\x8a\xc6\x42\x84\x6a\x81\xd2\xf0\x75\x5c\x61\xe3\xcf\x52\x14\x11\x8f\x28\x25\x0d\xf1\x5d\x51\xa5\xbf\x14\x51\x04\x7b\x9f\xa0\xb2\xd2\x8a\x65\x8b\xcc\x69\x59\xed\x57\xa9\x00\x55\xfb\xe9\x7a\xf6\x54\xbe\x14\x83\xae\x1d\xcd\xc1\xff\xa8\x2b\xe5\x6b\xb7\x75\xd2\x7f\x3f\xab\x97\x1b\xd4\xa9\x74\x4e\xee\x81\x86\xac\xa4\x95\xbf\x3d\x35\x32\x70\xc8\x68\xcc\xef\x16\xce\xa0\xa8\xd3\xb6\x65\xc3\x3f\x46\xea\x23\xee\xe6\x57\x63\x0c\x50\x46\xa1\x47\xb0\xd1\x31\x7a\xb4\x69\xce\x86\xf7\x88\x1a\x5e\x46\xbf\x69\x50\x19\x5a\xf2\x1c\x5d\x01\xb5\x87\x22\xee\xf8\xca\x15\xd2\xf5\xad\x7e\x36\xeb\x97\x9d\xc5\xce\x86\x05\xf5\x59\xb8\xb5\x66\x7d\xae\xd8\x79\x6f\xc1\xb7\x22\x71\x3b\x08\x3b\xf4\xcb\x8d\x7b\xbb\x42\xb9\xc3\x97\xce\xaa\x72\x6e\x30\xfb\xa4\x57\x1d\x86\xca\x5d\xc7\x6e\x3c\xa9\x57\x4b\x0c\xf7\x45\x06\x7d\xa2\x10\x7b\xca\xd5\x1d\xe5\xe6\x3f\xfa\x7a\x23\xa9\x7e\x92\x5f\xb9\x6e\xa9\xb7\xa0\xd3\xfe\x7f\x15\x63\x40\xd7\x34\xc8\xce\xe9\xcb\xea\xf5\xd0\x83\xed\x83\xe6\x4a\xa7\x6a\xd5\x76\xde\xd9\x13\xf5\x3d\xef\x27\xcf\xc2\x88\xf2\xcb\xe2\x81\xdf\x51\xae\xa0\xe8\xc9\x3b\x30\xe5\x18\x64\x20\xad\x8b\xb7\xad\xc9\x23\x40\xd2\xd6\xd4\x9a\xd0\xd6\x42\x92\x2a\xdb\xc9\x0a\x14\x86\xe4\xe5\x01\xc9\xfe\xed\x24\x07\x4c\x61\x87\x43\xcf\x87\xf6\x4e\xfa\x25\xa9\x17\xcf\x94\x76\x13\x0d\xbe\x2b\xd0\x33\x49\x1f\x75\x0f\x61\x00\xed\xa3\x55\x44\xc6\xbd\xc7\x37\x6c\xae\x27\xaa\xb7\xb3\x30\x14\x7c\x51\xb4\xd0\x0c\xae\x17\xd5\x87\x8f\xd4\xf8\xae\x47\x90\x2c\x38\xe9\x10\x73\x97\x94\x06\x30\xb9\x93\x47\x9e\xfd\x92\xed\xb5\xbd\x97\xa2\xfe\x70\xdf\xd3\x4d\xcf\x69\x50\x5c\x38\x70\x5b\x17\xb6\x9a\xf3\x8d\x1c\xfb\x40\x2b\xc4\xf1\x0d\xb6\xb3\xe1\x7e\x63\x13\x2d\x96\x01\xb0\x91\x4e\x2d\x40\xa9\xb3\x3e\xb0\x91\xe3\x9d\x6f\xaa\xf7\x1a\x8e\xab\x71\x1c\xc3\xf5\xc8\x71\xcf\x1a\x25\x07\xd6\x51\xe4\xee\x1c\xbf\x56\xce\xc2\x6c\x77\xfd\x39\x82\x0d\xbe\x4b\x28\x0b\x47\xf2\xf9\xf9\xde\xfd\x14\xce\x81\x6f\x88\xd6\xd6\x66\x47\x96\x83\x83\x0e\x1c\x59\x90\xdd\x10\x79\x83\xa3\x0d\xc1\x4e\xac\x8a\xd5\x64\x86\x1d\x84\xc7\x30\x48\xc6\x1a\x8c\x6e\xed\xb4\x13\x71\x98\x9e\x3d\xd5\x74\xc7\x59\x66\x35\x23\xb6\x98\x64\x97\xd1\xaa\x0f\x3b\xa5\x78\xc8\x64\x83\x92\xba\x6f\x38\xf0\x24\x5a\xb9\x4a\x16\x82\x5f\xa1\x49\xb3\xde\x81\xc2\x83\xce\x9c\x0a\x42\x0b\x94\x01\x72\x0d\x1b\x9c\xad\xc4\x23\x1e\x4c\x57\xc5\x42\xe7\x77\x90\xa9\xe0\x4b\x2d\x41\xe3\x66\xdc\x83\xcc\xb1\xd0\x05\x64\x16\x42\xb4\x0f\x2f\x3c\x35\xa6\xd5\x81\x62\x93\xd3\x3e\xfe\x0f\x64\x6b\xe7\x1e\xf7\xb3\xd2\xa3\x0d\xb0\x27\x2a\x66\x5e\x52\xd6\x9b\xbc\xe4\x3e\x0d\x92\x76\xfb\xb0\xbc\xee\x17\x8d\xa4\x21\xe4\xfc\xea\xb4\x94\xda\x04\x8f\x9f\x44\x00\x6c\x94\xff\x33\xa3\x97\xe9\x05\xff\x23\x79\xc1\x17\xa6\xd9\x67\xb5\xee\xc4\xb3\xb7\x59\x5e\x7b\x8d\x7e\x3b\xc9\x39\x10\xb6\xfc\xd0\x2f\xde\x65\xe2\x69\x94\x1c\xb3\x17\x06\x3e\xe2\x28\x83\x57\x0e\x1e\x5b\x0e\x2f\x09\x2c\x40\x3b\x03\xd6\x4e\x93\x2b\x12\x19\xd4\xdf\x97\x98\x9f\xc2\x81\xe0\x30\xa8\xa7\xd2\x73\xb2\xc5\x2a\x2d\xa7\x14\xf6\x33\xc7\xb3\x92\xa4\x4d\x85\x6a\x5b\xfc\x43\x0c\x75\x53\x9a\x56\x10\x0f\xd1\x99\x21\xd4\x6b\x2a\x74\xd7\xbe\xe8\xe6\xee\x1d\x14\x51\x44\x75\x31\xe2\x06\x38\x5d\xa3\x6a\x9f\x01\xf6\x52\xa8\xb4\x3e\xee\xb5\x12\x72\x9c\x87\xbc\x25\x42\x78\xc7\xdd\x1d\x6f\x07\x1c\x4f\x1b\x7b\xfc\x01\x59\xab\xc3\xc7\x93\x67\x70\x49\xab\x25\x04\x2b\x0f\x6d\xeb\xb4\xb1\xc5\x8b\x96\x0c\xb9\xac\x67\x90\x5e\xdc\x6d\x2c\xaf\x99\x3f\x20\xc6\xb5\xb7\x09\xb2\x5e\x74\x6c\xdc\xd4\x23\x94\x13\xb5\xe3\xc1\x71\xae\x11\xfa\x59\x59\x4d\x3b\x2d\xcf\xd5\xb8\x94\x53\x24\x3a\x4e\x74\x0f\x07\x31\x14\xff\x8f\xd4\xcf\xdb\xc2\x2d\x8b\xfb\xca\x6d\xc1\xf9\xa4\xb6\xbd\x4d\xac\x6c\xf4\x0d\xed\x10\x35\x50\x96\x5f\x2f\xfd\x3d\xa1\xc1\x83\xd2\x20\x75\xf1\x54\x4f\x79\x13\x15\xcd\x17\x4d\xc8\x40\x58\x62\xcc\xc3\x95\xd8\x63\x2d\xa5\x06\xde\xfb\xfa\xbd\x67\xf7\xf5\x6d\x09\xdc\x5d\x87\x1b\x05\x30\x8c\x80\xfa\xf5\x2e\x6b\x96\x3c\x7b\x57\xae\x18\xf4\xf6\x04\xa2\xb0\xea\x8a\xb2\x6e\x80\xe5\xf2\x43\xbf\x68\x73\xd8\x7e\x13\xe9\x57\x28\x89\x72\x97\x25\x8f\x64\x45\xcc\x16\x26\x2d\xec\xb6\x64\x6a\x43\x4e\x73\xe1\x2d\xbc\x76\xca\xe1\xd5\x1d\x6d\xf3\x9a\x7b\xe6\xd2\x4c\xd2\x9f\x5d\x93\x3f\x8e\x13\xdd\x3f\x6b\xcd\xc6\xb4\xff\x89\xc5\xbd\x65\xc7\x07\xdc\x59\xff\xf9\x06\x97\x79\xca\xbf\x3f\x4a\x23\x91\x6b\x2d\x87\x3e\xf6\xd3\x2e\xd4\x7c\xbc\x59\x12\x2c\xb9\x54\xbc\xf0\x34\xfc\x7e\xe0\x30\xea\x35\x59\x8d\xb8\x50\x54\x11\xa6\x43\xaf\x5b\x0f\x78\x49\x88\x15\x29\x29\x18\x48\x6d\x50\x67\xaf\xc2\x2a\x94\x14\x18\xfd\x9a\xae\xbb\x3f\x7c\x07\x90\x7c\x53\x40\xe0\xdb\x9b\x6f\x6f\xfe\x2f\x00\x00\xff\xff\xc1\x2d\x72\x4e\x71\x7d\x00\x00")

func schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaJson,
		"schema.json",
	)
}

func schemaJson() (*asset, error) {
	bytes, err := schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x68, 0x82, 0xb0, 0xeb, 0x5b, 0xf5, 0x94, 0x1, 0xde, 0x2f, 0xd1, 0x62, 0x18, 0xb0, 0x25, 0x26, 0x1d, 0xe6, 0xf2, 0x6a, 0x15, 0x20, 0xd0, 0x2a, 0x42, 0x47, 0x9f, 0x11, 0x1f, 0x8a, 0x87, 0x42}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.json": schemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.json": &bintree{schemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
