// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/schema.json (31.891kB)

package v1alpha5

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x5b\x6f\x23\x37\xb2\x7e\x9f\x5f\x41\x38\x01\xce\x39\x80\x6c\x9d\xf3\x70\x76\x81\x41\x36\x80\xc6\x9e\x78\xb4\x33\xb6\x05\x6b\x76\x82\xcd\xe5\x81\xea\x2e\xa9\x19\xb3\xc9\x0e\xc9\xb6\xad\x09\xe6\xbf\x2f\xd8\x37\xf5\x85\x6c\x35\x5b\x94\x57\x13\xec\x5b\x62\x35\x8b\x64\xd5\xc7\xaf\x8a\xc5\x22\xe7\x8f\x57\x08\x9d\x7d\x2b\x60\x7d\xf6\x1a\x9d\x7d\x33\x0d\x61\x4d\x18\x51\x84\x33\x39\xbd\xa4\xa9\x54\x20\x2e\x39\x5b\x93\xcd\xd9\x44\x7f\xa8\xb6\x09\xe8\x0f\xf9\xea\x37\x08\x54\xfe\xb7\x6f\x65\x10\x41\x8c\xf5\x9f\x23\xa5\x92\xd7\xd3\xe9\x6f\x92\xb3\xf3\xfc\xaf\xe7\x5c\x6c\xa6\xa1\xc0\x6b\x75\xfe\xbf\x7f\x9d\xe6\x7f\xfb\x26\x6f\x57\xeb\xea\xec\x35\xd2\xe3\x40\xe8\xac\xec\x93\xf2\x34\xfc\x11\xab\x20\xaa\x7e\x42\xe8\x2c\x11\x3c\x01\xa1\x08\xc8\xda\x5f\x11\x3a\x0b\xf2\x46\x1f\xf8\x66\x43\xd8\xa6\xf1\xdb\xde\xc9\x55\x1d\x95\xad\xab\xa6\x5f\x8a\xff\xfa\x32\xd9\xf5\x0f\x6b\x10\x02\xc2\x3b\x11\x82\x38\x7b\x8d\x7e\xb6\x8e\xa1\xf8\xe1\xd7\xaa\x2d\x0e\xc3\xac\x67\x4c\x17\xf5\x59\xac\x31\x95\x50\x7d\x14\x82\x0c\x04\x49\xf4\x77\x7a\xc4\x01\x67\x0a\x13\x26\x51\x90\x99\x00\x25\x58\xe0\x18\x14\x08\x89\x04\x50\xac\x20\x44\x8a\xa3\x9a\xae\x2a\x41\xcf\xe7\x84\x29\xa0\x94\xfc\x76\x1e\xa9\x98\x9e\x1f\x2a\xf8\x55\x4d\x11\x5d\x1b\x75\x15\x6f\x35\x15\x30\xbc\xa2\xf0\x71\x9b\xb4\x7e\x40\xe8\x8c\x28\x88\xdb\x7f\xac\x41\x4e\x2a\xa1\xfb\x98\x34\x7f\x0d\x61\x8d\x53\xaa\xf4\x07\x67\xb5\x5f\xbe\xd4\x3f\xab\x44\x60\x21\xf0\x76\xac\x81\xeb\x23\xf7\x69\x5d\x10\xfd\x56\x28\x80\x85\x68\xa1\x64\x47\x1b\xbb\x8a\x37\x5a\x3a\x67\x80\x9a\x79\x05\xfc\x9e\x12\x01\x61\x53\x45\x31\x28\x1c\x62\x85\xbb\xfa\xb1\xc1\x01\x27\xe4\x13\x08\x99\x0f\xf9\x0f\x93\xcd\x0c\x66\x6f\x18\xbd\xf1\x03\x3c\xe3\x38\xa1\x59\x27\x3f\x37\x71\x02\x0f\x32\x50\xf4\x82\xf0\xe9\xe3\xff\x61\x9a\x44\xf8\xff\xeb\x70\xf9\xf5\x95\x01\x38\x67\xf8\x11\x13\x8a\x57\x84\x12\xb5\xfd\x89\xb3\x53\x40\xec\xa4\x4e\x38\x06\x8a\x44\x0e\x84\x67\x16\xbb\xc6\x62\x83\x15\x2c\x04\x5f\x13\x3a\x78\xca\xe6\x2e\x7f\x68\xc8\x3a\x68\xb6\x1b\xa2\x86\x4d\xf3\x9a\x28\xb3\x04\x82\x63\x27\x45\xcd\x67\x37\x66\x41\x0f\x84\x85\x47\x46\x6b\x73\xdd\xed\x05\x6a\x8c\x19\xde\x40\x78\xcb\x43\xb8\x16\x3c\x4d\x0e\xb3\xda\x4d\x4b\xda\x41\x76\xab\x28\xc1\x45\xf5\x37\xb0\xe3\x90\xa6\x38\xe6\x67\x8a\x7e\xe6\x26\x21\x10\xa0\xe4\x5b\x16\x88\x6d\x49\xbb\x03\x26\xb9\xec\x34\x33\x4b\x57\x58\xa5\x9d\x69\xf6\xea\x6d\x99\x37\x31\x8a\x7b\x4c\x02\x27\x59\x9f\x16\x97\x63\x3d\x65\xb6\x40\x26\x46\x92\x37\x21\xa3\xb5\x46\x5b\x63\x36\x1b\xbf\x17\xfc\x3d\x6c\xd6\xcb\xee\x66\x72\xed\x35\x78\xd7\x5e\x2d\xce\xf2\x12\x29\x60\x24\x89\x66\x8a\xc2\x93\x4f\xb4\xdf\x5e\x01\x12\x90\x50\x1c\x40\x88\x9e\x88\x8a\x50\x61\x37\x34\x5b\xcc\x07\xc7\x08\xce\x82\x4d\xd1\xc1\x5b\x16\x26\x9c\x30\x25\x87\xc4\x7f\x89\x20\x8f\x58\xc1\x2c\x08\x40\x76\xc0\x5d\xae\xb9\x15\xe7\x14\xb0\x65\x5d\x24\xe9\x8a\x92\xc0\x55\x80\x13\x80\x9b\x83\xb4\xf5\xed\xc5\xb4\x11\xa7\xa1\xac\x82\x30\x9c\x10\x24\x41\x3c\x82\x40\x50\x68\x15\xe1\xac\x37\x44\xd8\x9a\x8b\x18\x37\x50\xb7\xcf\xbc\xa3\x84\x9b\x4c\xac\x7d\xe1\x00\xe3\x96\xab\x8d\x87\x6f\x9f\x21\x48\xb5\xb8\x7b\x4e\x61\x76\x7f\xbb\xc7\x5f\xf6\x46\x22\x2d\x69\x0b\x10\x31\x91\x9a\x4d\xe4\x1b\x9e\xb2\x10\x8b\xed\x18\xe9\x5a\x13\x24\xd0\x36\xe6\x69\x13\xbb\xc8\xd9\x9d\xec\xb4\xb4\x6c\x48\x3d\xd0\xbb\x64\xa2\x0e\x50\x60\x4d\x82\x27\xa5\x69\x3e\xb8\x9b\x5f\x5d\x1e\x69\xdd\xb5\xa6\x3c\x7c\x2a\xfb\x51\xd3\x92\xe7\x80\x2d\xd3\xf4\x7b\x70\xe4\x91\x15\x30\xa5\x68\x3e\xbb\x41\x58\x29\x41\x56\xa9\x02\x89\xf8\x1a\xe1\x72\x41\x3b\xd2\xc0\x3e\x69\x96\x75\xdf\x42\xf4\x00\x16\xc0\x8c\x71\x85\x9b\x79\x9d\x7e\x5d\x1c\x6f\xff\x54\xcb\x53\x99\x04\xfc\xf1\xc5\x8c\x73\xac\x14\x0e\xa2\x05\xa7\x24\xe8\xac\x13\x33\x05\xcc\x19\x25\x0c\xae\x78\x90\xc6\xc0\x2c\x3b\x90\xba\xd4\xd9\xfd\xed\x69\x6d\x27\x29\x5e\x01\xfd\x6a\x0d\xc6\x70\x0c\x63\xf7\x64\x56\x81\x32\xc1\x81\x5f\xa9\x89\x33\x0d\xbb\xc9\x1f\xb1\x67\xe8\x2c\xf1\xbe\x4d\x84\xc2\x9b\xaf\x0b\x22\x4e\xee\x27\x03\x91\x11\x03\xdd\x75\x32\x31\xf3\x5d\xdf\x6a\xb7\xf1\xcb\x1e\x7c\xf4\x6e\x31\x32\x83\xf8\x74\x39\x0c\x11\x1c\x17\x3e\x0d\xe7\x80\x40\xe5\x4e\x0d\x61\x16\x16\x3b\x85\x54\x8c\x89\x44\x5d\xa5\x0f\x72\x49\xcb\x36\xe6\xad\x8e\x49\x38\x86\x52\x4e\xe0\x29\x85\x7b\x34\x46\x6e\x6e\xed\xa5\x3b\x5a\x73\x54\x7c\x9f\x24\x93\x92\xb3\x04\xcc\xde\x74\x6f\x7b\xbd\x08\xd8\xd4\xb2\x19\xfb\x93\xbf\xde\x49\xbb\x18\x80\x4f\x91\x5f\x1d\xe3\xd5\xd3\x27\x87\x65\xd6\x3d\xb1\x68\x61\x14\xc3\xb8\x8e\xc2\x63\x4f\x11\x56\x88\x84\xc0\x14\x59\x13\x90\x23\xc2\x65\xbb\x04\xd3\x52\xb9\x9d\x7d\x1c\xc2\x3d\x7a\xb7\xf1\x84\x87\x6f\xba\x9c\x54\x5e\x0a\xf7\xc8\x3d\xb7\xb3\x8f\xa8\x10\xdb\x24\x65\xc4\x93\xa6\xab\x1b\xc6\x40\xfb\xe5\x99\x94\x3b\x9c\xdb\xb1\xf0\xbb\xee\x03\xdd\xc9\x9a\x04\x58\xc1\x2c\x55\x11\x17\x44\x6d\xaf\x0c\x79\xec\x61\x31\xfb\x21\x81\x79\x99\xab\xf1\x1d\x28\x06\x0f\xb7\x5e\xf8\xd7\x09\xa9\xd5\x64\x86\xa8\x7a\xd2\x34\xaf\x71\xf8\xde\x20\x8f\x04\xe0\xf0\x9c\x33\xba\xf5\xb2\xdf\x1e\x20\xce\x08\xf8\x74\xc5\xc0\x29\x93\x3a\xce\x39\x59\x8e\x45\x40\x3d\x71\xf1\x70\x34\x87\x94\xa7\x4f\x4f\x7e\xc4\x4e\x88\x2e\xcd\xd0\x9d\xa6\x47\x36\x2e\x3a\xc9\x42\xe4\x5c\x3a\x92\x05\x52\xdc\x68\xb8\x47\x90\x09\x8e\x9f\x16\x97\x83\xc8\x37\x55\x7c\x46\x29\xd7\x4b\x78\xbe\x78\xfc\xcb\xa8\xbc\x7e\x40\x42\x31\x6c\xe7\xba\x21\x2a\x4a\x57\x17\x01\x8f\xa7\x4f\x80\x1f\x41\x23\x40\x4e\xf3\x13\xfe\x69\xf2\xb0\x99\xa6\x8a\x50\x39\x25\x09\x03\x75\x31\x5f\xdc\x82\x25\x1f\x13\xd8\xcf\x2f\x7a\x7a\xef\x9c\x7a\x98\x59\xfb\x59\x09\x7c\x39\xbf\xba\x3f\x2c\xb3\x7c\xc8\x54\xfb\x7d\x4d\x6b\x25\x34\xb0\xb2\xe6\x02\xed\xc0\x8a\xf4\x34\x10\x96\x92\x07\x24\xdf\xe6\x4e\x10\x5c\x6c\x2e\x90\xe2\x28\x95\x90\x1f\x12\x49\x48\xb0\xd0\xc8\xca\x3e\xd6\x02\x4a\xa8\x15\xf8\x42\x5a\x26\xdb\x22\x1c\x9e\x47\xbc\x0b\xdf\x21\x10\x7e\xc1\x61\x19\x6d\x4a\x46\x1f\xfb\x1b\xc5\x31\x3c\xb0\xa4\xa1\x16\x69\xf6\xd0\x6a\x7e\x2a\xe5\x02\xb9\x97\x49\x2c\x4a\x08\x52\xed\xd2\xf3\xf3\x76\xaf\x41\x4c\x84\x45\x7e\xf0\xbb\x1c\xdf\x47\x07\x61\x89\x80\xf3\x4c\xfb\x10\xa2\xbc\x07\xc4\x78\x08\x68\x79\xed\x0c\xd6\xa1\xa2\xf6\xcf\xb4\x13\x16\xec\x87\xcb\xd2\xb4\xc2\x5a\x83\x2c\x17\x01\x16\x80\x80\xa8\x08\x44\xe9\x15\x6a\x2b\x45\xcf\xa4\xbb\xa0\xf4\x44\x36\xd9\x79\x3b\x52\x11\x48\xc8\x64\x3c\xc0\x16\x42\xb4\xda\xa2\xd9\x4f\x59\xb3\x80\xb3\x47\x60\x04\x58\x23\x87\xb6\x5f\x79\x2f\x39\xae\x91\x7e\x9f\x34\x4a\x1c\x32\xe7\x65\x05\xbd\xc1\x92\x66\x57\x31\x00\xdc\x93\x1e\xb7\xdb\x22\x97\x3e\x57\xd7\x4b\x1f\x1e\x23\x97\x0d\xe5\x2b\x4c\x0b\x5e\xcd\xc2\x0e\x4c\x29\x0a\x22\x42\xcb\x00\x64\xda\x64\x64\xc7\x80\xc6\x5d\x7e\x23\xce\x69\x55\xa8\x0d\x4b\x79\x75\xd4\xe3\x2f\xc1\xd5\x98\x21\x5f\x6b\x08\xa3\x62\x8c\x28\xc9\x07\x79\xe1\xb4\x92\x06\xc9\xd8\x7f\x6e\xe1\x7c\xa2\xdf\x37\xaf\xf9\xec\x06\x09\x4e\xe1\xbf\x24\x9a\xdd\xdf\x96\xfe\x5a\x71\x24\x52\x86\x12\x1e\x4a\xc4\x99\xe2\xe5\x98\xdd\xe6\x7b\x90\xec\xfd\x3c\x0c\x14\x02\xc5\x85\xcf\xb2\xc8\x65\x21\xd3\x47\xe0\x96\x3b\x9b\xcc\xe2\x22\xa5\x20\xf5\xc4\xf3\x31\x23\x1d\x39\x52\x8e\xb3\x9a\x5f\x19\x44\x10\xa6\x14\x0e\xd0\xf3\x61\x3d\xb9\x38\xb9\x97\x0a\x5e\xfa\xf4\xfa\x14\x91\x20\xaa\x16\x91\x8c\x78\x4a\xc3\x12\x58\x21\x47\x2c\xdf\x85\xa2\xac\x6a\x2a\x06\xa6\x50\xb1\xec\x72\x8d\x40\x58\xe9\xe4\x02\xcd\xd7\x88\x71\x96\xad\xc4\x47\x12\x42\x38\xc9\x08\xab\x74\x78\xda\x39\xe9\x86\x65\xcd\xce\x13\xa1\x14\xad\x40\xf7\x15\xba\x19\xe8\x44\x86\x6c\xb4\xf4\x57\x97\x54\x77\x8a\x0c\xda\x09\x70\x13\x79\x1a\x39\xa5\x3f\x4c\xf0\x97\x22\xcf\xd7\xae\x2c\xcc\xad\x14\x61\x1b\x99\x99\xab\xb1\x62\xab\x65\x6c\x26\x89\x61\x04\x31\xb2\x93\x1e\x1f\x5d\xd1\xe5\x20\x5f\x9d\x1f\xdf\x0e\x76\xd8\x27\x5d\x04\xd1\x50\xef\xfb\x74\x05\x82\x81\x02\x89\xb2\x41\xa3\x0a\x46\x35\x9f\xd7\x22\x64\x37\x02\xf1\xd0\xc3\xc0\xc2\x8d\x11\x75\x16\xb6\x91\x56\xe2\xd0\x5a\xf0\x18\xe5\x24\xe8\x51\x13\xe3\xe4\x7b\x3a\x55\xb3\xd5\x22\x78\x25\x85\x03\xe2\x86\xa1\x94\x30\x36\x60\x28\x09\xe1\x9a\x0c\xaa\x43\x5b\x71\xae\xa4\x12\x38\xe9\x46\xf7\xc8\x1e\x9c\x75\x2e\xab\xd4\xd1\xaa\x3b\xc2\x4d\xf2\xe9\x11\x75\x57\x7e\x6d\x94\x25\x20\xe1\xc3\xe4\xdc\xeb\x2f\x47\xe2\x26\xeb\xc5\x34\x83\x49\x8f\xa2\xbc\x00\xaa\xd8\x84\x67\xdb\x31\xd3\x81\x5f\xfd\x12\x5a\x76\xb7\x8e\xb0\x0d\xba\x26\xea\x2e\xd1\x31\xfa\xee\x9c\x24\xdb\xd4\x51\xc2\x1e\xf4\xef\x44\xe9\xcf\xb1\xfe\x0e\xe9\xa9\x49\xa2\xb8\xd8\x0e\x87\xe0\x8b\x0e\xaa\x01\xda\x56\x81\x60\x0d\xbf\x36\xf7\xb2\x33\xb0\xc5\x2f\xd8\x4a\x78\xb6\x08\x8b\x15\x51\x02\x8b\x2d\xfa\xfb\xf2\xee\x76\xfa\xcf\xd9\xcd\x07\x14\x16\x5d\xcb\x09\x92\x69\x10\x21\x2c\x51\x96\x79\x30\x5c\x0f\xe4\x22\xab\x14\x4d\x38\x25\x01\x01\xd7\x33\x86\x63\x0e\xc0\xe0\x51\x4a\x05\x77\xae\x2d\x79\xde\xcc\xe3\x98\xfc\x80\x63\x42\xfd\x56\xec\x9d\xf6\x1d\xc3\x10\xa4\x56\xdb\x25\x4e\x70\x40\x94\x75\xe6\x1a\x14\x1b\xb0\xf0\xdc\xe0\x7b\x77\x95\xe5\xac\x37\xef\x08\x93\x0a\xb3\x20\xbb\x84\xeb\xd5\x0a\x27\x1d\xf7\xed\x8d\xa1\x62\xfc\xbc\x24\x9f\xad\x1a\xe9\xb5\x4e\x4c\xd8\xe8\xb6\xde\xeb\xb7\x8a\x4c\x5d\x71\xa8\x6b\xb8\xca\xdf\x3e\x48\xb4\x89\xcf\x1c\x93\x25\xcb\x20\x07\xde\x97\xad\xe0\xb8\x5c\xbe\xfb\x93\x6c\x63\x6b\x63\x7f\xe4\x34\x8d\xc1\xcd\xf4\xce\x01\x6b\x23\x59\x5d\xd1\xa7\x6d\x41\xf7\xf0\x8e\x01\xb0\x06\xfc\x9b\xa7\xd7\x4b\xb6\x2d\x60\x74\x29\xa1\x17\x9d\x6d\x2c\xb4\x58\xcf\x6b\x5c\x8e\x19\x7a\xfb\x7e\x79\x5e\xdc\x76\xdc\x1d\x73\xa0\x8f\x77\x57\x77\xe8\x13\xa6\x24\xac\x0e\x45\x58\x8c\x93\x04\x42\xb4\x26\x90\x3b\xe4\x10\xa9\x48\xf0\x27\x2d\x04\x84\xe0\xc3\x4b\x59\x8e\xd3\x7b\xd3\x6f\x83\x12\x24\x90\x97\x9c\xea\xcd\x40\xb3\x5e\xd1\xe2\xb8\x37\x02\xb3\x94\x62\xa1\xa1\x31\xd8\x7f\xd7\x1b\xf9\x24\xad\x38\x1f\xff\xbf\xdf\x6f\x3b\x2d\xcf\xba\x36\x0c\x93\xf1\x02\xdd\x2c\xdb\xb3\xda\xe6\x29\xa0\x00\x67\xb1\x74\x79\xd1\x54\x02\xa0\x9f\xb3\x5b\xb6\xd5\xcd\x43\x1d\x20\xca\x5f\xff\x3b\x52\x2a\x91\xaf\xa7\x53\xfd\x7f\x17\xf8\x49\x5e\xe0\x18\x7f\xe6\x2c\xab\x81\x98\xfd\xb8\xcc\xde\x2f\xf8\xa1\x6c\x33\xd5\xd1\xba\x54\xd3\x7f\x48\x10\xd7\x29\x09\x61\x8a\x9f\xe4\xf9\x0e\x02\xe7\x58\x9e\x17\x73\x0a\x2a\x80\x5d\x68\xa4\xff\xcf\xe0\x35\xb0\x6f\x1a\xdf\x61\x14\x09\x58\xff\xed\x97\xb3\x17\x1a\xfa\x2f\x67\xdf\x1b\x34\xf7\xdd\x14\x7f\xdf\x5c\x59\x65\x71\xd4\x80\xbd\xf2\xcb\x17\xdf\xf8\x28\xa6\x70\x42\xbc\xe1\xc0\xd6\x0b\xca\xf3\x4d\xcf\xfc\x2a\x23\xba\xcb\xf9\xd5\xbd\xe3\x76\xa9\xde\xb2\x69\xbe\x23\xee\x64\xfc\xee\x61\x8e\xb3\x33\x92\x9b\x3e\xd7\x80\x7a\x48\xd6\xf2\xae\x45\x47\xda\x21\x5b\xa3\xd3\xde\xb8\xad\xb8\x52\x14\x04\x0f\x1e\x60\x60\x91\x51\x85\xb6\x37\xf5\xa6\x46\xe1\x01\xc5\x52\x92\xe0\x03\xc7\xe1\x1b\x4c\x75\xfc\x26\x6e\x71\x7c\x62\x1a\x28\x12\x35\x57\xb7\x4b\xaf\xa8\xf4\xb1\x23\x86\x95\xbc\x4b\x14\x89\xc9\x67\xb0\x92\x60\x6f\xa9\xe4\x11\xb6\xd4\x7e\x6a\xc1\x0d\x82\x17\x02\xd6\xe4\xf9\x28\xa2\xbd\xa7\x01\x4a\xc1\xf2\x8a\xc8\xbc\x66\x7b\xf0\xa3\x2e\x3b\x4d\x1b\x65\x18\xbb\x7b\x48\x57\x40\x41\xbd\xcd\xea\x7f\xda\x4f\x6c\xf5\xf4\x35\xe4\xae\xf1\x57\x9f\xd1\x58\xf0\x50\x2e\x40\x68\xbd\x8e\x4b\x6c\xfc\x59\x92\x22\xfc\x11\x84\x20\x21\xbc\x29\xb3\xf4\x97\x3c\x8e\xf1\xde\x27\xa8\x8c\xb2\x12\xd1\x11\x73\x5a\xac\xfd\x22\x19\xa0\x7a\x3d\xdd\xc0\x9a\xca\x5d\x32\xe8\xda\x52\x1c\xfc\x9f\xbc\x52\x31\x76\x53\x25\xfd\xd7\x33\x7a\xb1\x01\x95\x59\xe7\xe4\x1e\x68\xc8\x53\x5a\xc5\xdb\x53\x23\x03\x87\x5c\xc6\xfc\x6e\x61\x0d\x8a\x7a\xb9\x2d\x6f\xfe\x3e\x96\xef\x61\x3b\xbf\x1a\x43\x40\xb9\x84\x01\xc1\x46\x4f\xeb\xd1\xd4\x9c\x37\x1f\x10\x35\xec\x5a\xbf\x6a\x49\x71\x4d\x79\x8e\xce\x80\x9a\x43\x11\x7b\x7c\x65\x0b\xe9\x86\x66\x3f\xdb\xf9\xcb\xde\x64\x67\x8b\x41\x7d\x26\x6e\x8d\xbb\x3e\x5b\xec\xbc\x37\xe1\x5b\xb3\xb8\x19\x84\x3d\xeb\xcb\x8e\x7b\xf3\x82\xb2\x87\x2f\xbd\x59\xe5\x82\x30\x87\x6c\xaf\x7a\x88\xca\x9e\xc7\x6e\x3d\xa9\xd7\xd8\x18\xee\x8b\x0c\x86\x44\x21\xe6\x2d\x57\x7f\x94\x5b\xfc\xe8\xeb\x8d\xa4\xe6\x49\x7e\xed\xba\xa5\x8a\xb0\xca\xea\xff\x65\x02\x01\x59\x93\x20\x3f\xa7\xaf\xb2\xd7\xae\x07\xdb\x07\xf5\x95\x75\xd5\xc9\xed\xbc\x31\x6f\xd4\xf7\xbc\x9f\x3c\x0b\x63\xc2\x2e\xcb\x07\x7e\x47\xb9\x82\xb2\x26\xef\xc0\x2d\x87\x13\x41\x1a\x07\x6f\x1a\x93\x47\x80\x64\xa5\xa9\x0d\xa3\xad\xb9\x40\x75\xb5\xa3\x15\x96\x10\xa2\xdd\x03\x92\xc3\xcb\x49\x0e\xe8\xc2\x0c\x87\x81\x0f\xed\x9d\xf4\x4b\x52\x3b\xcf\x94\x55\x13\x39\xdf\x15\x18\xb8\x49\x1f\x75\x0f\xc1\x41\xf6\xd1\x32\x22\xe3\xde\xe3\x73\xeb\xeb\x89\xa8\x68\x16\x86\x9c\x2d\xca\x12\x1a\xe7\x7c\x51\xb3\xf9\xc8\x15\xdf\xf7\x08\x92\x01\x27\x3d\x66\xee\xb3\x92\x83\x92\x7b\x75\xe4\xd9\x2f\x99\x5e\xdb\xdb\x25\xf5\xdd\x7d\x4f\xbf\x3c\x2b\xa1\xd8\x70\x60\x67\x17\xba\x9a\xb3\x8d\x18\xfb\x40\x2b\x4e\x92\x1b\xe8\xee\x86\x87\xb5\x4d\x15\x5f\x06\x98\x8e\x74\x6a\x01\x08\x95\xd7\x81\x8d\x6c\x6f\x7d\x53\x7d\x50\x73\x58\x8d\xd3\x18\xac\x47\xb6\x7b\x56\x20\x18\xa6\x3d\x49\xee\xde\xf6\x6b\x69\x4d\xcc\xf6\xe7\x9f\x63\xbc\x81\x37\x29\xa1\xe1\x48\x3d\x3f\xdf\xdb\x9f\xc2\x39\xf0\x0d\xd1\xc6\xd8\xcc\xc8\xb2\x68\xd0\x82\x23\x03\xb2\x5b\x26\x6f\x69\xb4\x65\xd8\x89\x71\x61\xb5\x95\x61\x06\xe1\x31\x08\x49\xb3\xc1\xe8\xd2\x4e\xb3\x10\x0b\xf5\xec\xc9\xa6\x5b\xce\x32\xeb\x3b\x62\x03\x25\xdb\x48\xab\xd9\xec\x94\xe2\x21\xbd\x1b\x14\xc4\x7e\xc3\x81\xa5\xf1\xca\x96\xb2\xe0\xec\x0a\xf4\x36\xeb\x0d\x96\x70\xd0\x99\x53\x29\x68\x01\x22\x00\xa6\xf0\x06\x66\x2b\xfe\x08\x07\xcb\x95\x09\x57\xc5\x1d\x64\xc2\xd9\x52\x09\xac\x60\x33\xee\x41\xe6\x84\xab\x12\x32\x0b\xce\xbb\x87\x17\x9e\x0a\xd3\x9a\x40\x31\xd9\x69\x9f\xfe\x1d\xd5\xda\x3b\xc7\xfd\xaa\xf4\xc8\x01\xe6\x8d\x8a\xee\x17\x55\xf9\x26\x2f\x7b\x9f\x96\x48\x33\x3f\x2c\xaf\x87\x45\x23\x59\x08\x39\xbf\x3a\xad\x45\xad\x83\xc7\x0f\x3c\xc0\x74\x94\xff\xd3\xad\x97\xd9\x05\xff\x23\x79\xc1\x9d\xd2\xcc\xbd\x1a\x67\xe2\xd9\xdb\x2c\xaf\xbd\x46\xbf\xbd\xe2\x2c\x08\x5b\xbe\x1b\x16\xef\x52\xfe\x34\xca\x8e\xf9\x0b\x03\xef\x61\x14\xe1\x55\x8d\xc7\xa6\xc3\x2b\x01\x0b\xac\xac\x01\x6b\x2f\xe5\xf2\x54\x04\xcd\xf7\x25\xe6\xa7\x70\x20\xe8\x06\xf5\xcc\x7a\x56\xb5\x18\xad\x65\xb5\xc2\x7e\xe5\x78\x5e\x24\x59\x51\xa1\x8c\xca\x7f\x88\xa1\x49\xa5\x59\x06\xf1\x90\x35\xe3\x22\xbd\xb1\x84\xee\xba\x17\xdd\xfa\x2f\xcd\x7a\xcd\x5e\x1c\xe7\xf1\x6d\x4d\x74\xef\x80\x76\x4a\x67\x3c\x51\x6e\xae\x06\xe3\x2c\x4c\x83\xf0\x82\x23\x97\xeb\x6c\x1a\x0b\xe5\xed\xbf\xea\x22\xf6\x03\x40\xd2\xb8\xbd\x9f\x57\x6b\x43\xeb\x2e\x1b\x22\x0c\xc9\x2d\x0b\x8e\x73\xd1\xce\xcf\xc8\x1a\xf8\x35\x3c\xe8\x62\x83\x2f\x4f\x55\x92\xaa\x01\x14\xea\x86\x36\x01\x8f\xc4\xcf\xeb\xbb\x1d\x4e\x7a\xe1\xc2\xd9\xa2\x53\xd3\xdc\x26\x46\x35\xfa\x86\x76\x08\x0a\x13\x5a\x5c\xc0\xfc\x3d\x25\xc1\x83\x54\x58\xa8\xf2\x31\x9b\xea\xae\x26\xe8\x2f\xda\x90\xc1\x61\x85\x31\x0f\x97\x46\x8f\x35\x94\x06\x78\xef\x9b\x37\x83\xed\x17\x9c\x05\x66\xf6\x4c\xd5\x28\x80\x41\x8c\x89\x5f\x2e\x5f\xd3\xf4\xd9\xfb\xe2\x4a\xb0\x8a\x4e\x20\x4e\xa9\x8f\x28\x3f\x2f\x5f\x2e\xdf\x0d\x8b\xc7\xdc\xe6\x9b\x0a\xbf\x46\x49\xa5\x3d\x71\x77\x24\x16\xd1\x53\x98\x74\xb0\xdb\xb1\xa9\x09\x39\xed\x81\x77\xf0\xda\x6b\x87\x17\x77\xb4\xed\x8b\xe0\xb9\x4b\xd3\xdb\xe2\xfc\x22\xf9\x71\x9c\xe8\xfe\x5e\x1b\x1c\xd3\xfd\x47\x08\xf7\x26\xe6\x1e\x60\x6b\xfc\x07\x0e\x6c\xf4\x54\x7c\x7f\x94\x52\x1b\xdb\x58\x0e\x7d\x0e\xa7\x9b\xca\x78\x7f\xb3\x44\x50\x69\xa9\x7c\x03\xc9\xfd\x06\x9d\x9b\xf4\x86\xad\x46\x5c\xb9\xa9\x19\xd3\xb2\xae\x3b\x4f\x5c\x09\x9c\x48\x54\x49\xd0\x90\xda\x80\xca\xdf\x4d\x95\x20\x08\xa6\xe4\x73\x36\xee\xe1\xf0\x75\x10\xf9\xaa\x84\xc0\x97\x57\x5f\x5e\xfd\x2b\x00\x00\xff\xff\x7a\xe5\xf6\xb0\x93\x7c\x00\x00")

func schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaJson,
		"schema.json",
	)
}

func schemaJson() (*asset, error) {
	bytes, err := schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdc, 0xb5, 0x87, 0x5c, 0x22, 0x36, 0x8b, 0xa1, 0x6a, 0x32, 0x66, 0x46, 0x10, 0xfd, 0xa3, 0xb3, 0x39, 0x38, 0xa6, 0x2b, 0x4a, 0x4d, 0x86, 0xd3, 0xcd, 0x3d, 0xfc, 0xd5, 0xf3, 0xf0, 0xe7, 0x1d}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.json": schemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.json": &bintree{schemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
