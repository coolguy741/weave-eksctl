// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/schema.json (31.834kB)

package v1alpha5

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x4f\x6f\x1b\x39\xb2\xbf\xe7\x53\x10\x9e\x01\xde\x45\xb6\xde\x3b\xbc\x5d\x20\x37\xc5\xce\x38\xda\xc4\xb6\x60\x65\x33\xd8\x19\xcc\x81\xea\x2e\x49\x1c\xb3\xc9\x1e\x92\x6d\x5b\x19\xe4\xbb\x2f\xd8\xff\xdc\x7f\xc8\x16\xd9\xa2\xbc\xca\x60\x6f\x81\xd5\x2c\x92\x55\x3f\xfe\xaa\x58\x2c\x32\x7f\xbe\x41\xe8\xec\x47\x01\xeb\xb3\xb7\xe8\xec\x87\x69\x0c\x6b\xc2\x88\x22\x9c\xc9\xe9\x25\xcd\xa4\x02\x71\xc9\xd9\x9a\x6c\xce\x26\xfa\x43\xb5\x4b\x41\x7f\xc8\x57\xbf\x43\xa4\x8a\xbf\xfd\x28\xa3\x2d\x24\x58\xff\x79\xab\x54\xfa\x76\x3a\xfd\x5d\x72\x76\x5e\xfc\xf5\x9c\x8b\xcd\x34\x16\x78\xad\xce\xff\xf7\xef\xd3\xe2\x6f\x3f\x14\xed\x1a\x5d\x9d\xbd\x45\x7a\x1c\x08\x9d\x55\x7d\x52\x9e\xc5\x3f\x63\x15\x6d\xeb\x9f\x10\x3a\x4b\x05\x4f\x41\x28\x02\xb2\xf1\x57\x84\xce\xa2\xa2\xd1\x27\xbe\xd9\x10\xb6\x69\xfd\xb6\x77\x72\x75\x47\x55\xeb\xba\xe9\xb7\xf2\x5f\xdf\x26\x2f\xfd\xc3\x1a\x84\x80\xf8\x4e\xc4\x20\xce\xde\xa2\x5f\xad\x63\x28\x7f\xf8\xad\x6e\x8b\xe3\x38\xef\x19\xd3\x45\x73\x16\x6b\x4c\x25\xd4\x1f\xc5\x20\x23\x41\x52\xfd\x9d\x1e\x71\xc4\x99\xc2\x84\x49\x14\xe5\x26\x40\x29\x16\x38\x01\x05\x42\x22\x01\x14\x2b\x88\x91\xe2\xa8\xa1\xab\x5a\xd0\xf3\x39\x61\x0a\x28\x25\xbf\x9f\x6f\x55\x42\xcf\x0f\x15\xfc\xa6\xa1\x88\xbe\x8d\xfa\x8a\xb7\x9a\x0a\x18\x5e\x51\xf8\xbc\x4b\x3b\x3f\x20\x74\x46\x14\x24\xdd\x3f\x36\x20\x27\x95\xd0\x7d\x4c\xda\xbf\xc6\xb0\xc6\x19\x55\xfa\x83\xb3\xc6\x2f\xdf\x9a\x9f\xd5\x22\xb0\x10\x78\x37\xd6\xc0\xcd\x91\x87\xb4\x2e\x88\x61\x2b\x94\xc0\x42\xb4\x54\xb2\xa7\x8d\x7d\xc5\x1b\x2d\x5d\x30\x40\xc3\xbc\x02\xfe\xc8\x88\x80\xb8\xad\xa2\x04\x14\x8e\xb1\xc2\x7d\xfd\xd8\xe0\x80\x53\xf2\x05\x84\x2c\x86\xfc\xa7\xc9\x66\x06\xb3\xb7\x8c\xde\xfa\x01\x9e\x71\x92\xd2\xbc\x93\x5f\xdb\x38\x81\x07\x19\x29\x7a\x41\xf8\xf4\xf1\xff\x30\x4d\xb7\xf8\xff\x9b\x70\xf9\xed\x8d\x01\x38\x67\xf8\x11\x13\x8a\x57\x84\x12\xb5\xfb\x85\xb3\x53\x40\xec\xa4\x49\x38\x06\x8a\x44\x1e\x84\x67\x16\xbb\xc6\x62\x83\x15\x2c\x04\x5f\x13\xea\x3c\x65\x73\x97\x3f\xb5\x64\x1d\x34\xdb\x0d\x51\x6e\xd3\xbc\x26\xca\x2c\x81\xe0\xc4\x4b\x51\xf3\xd9\x8d\x59\xd0\x03\x61\xf1\x91\xd1\xda\x5e\x77\x7b\x81\x9a\x60\x86\x37\x10\xdf\xf2\x18\xae\x05\xcf\xd2\xc3\xac\x76\xd3\x91\x76\x90\xdd\x6a\x4a\xf0\x51\xfd\x0d\xbc\x70\x48\x5b\x1c\x0b\x33\xc5\x30\x73\x93\x10\x09\x50\xf2\x3d\x8b\xc4\xae\xa2\x5d\x87\x49\x2e\x7b\xcd\xcc\xd2\x15\x56\x59\x6f\x9a\x83\x7a\x5b\x16\x4d\x8c\xe2\x1e\xd3\xc8\x4b\xd6\x97\xc5\xe5\x58\x4f\x99\x2f\x90\x89\x91\xe4\x4d\xc8\xe8\xac\xd1\xce\x98\xcd\xc6\x1f\x04\xff\x00\x9b\x0d\xb2\xbb\x99\x5c\x07\x0d\xde\xb7\x57\x87\xb3\x82\x44\x0a\x18\x49\xa2\x99\xa2\xf4\xe4\x13\xed\xb7\x57\x80\x04\xa4\x14\x47\x10\xa3\x27\xa2\xb6\xa8\xb4\x1b\x9a\x2d\xe6\xce\x31\x82\xb7\x60\x53\x74\xf0\x9e\xc5\x29\x27\x4c\x49\x97\xf8\x2f\x15\xe4\x11\x2b\x98\x45\x11\xc8\x1e\xb8\xab\x35\xb7\xe2\x9c\x02\xb6\xac\x8b\x34\x5b\x51\x12\xf9\x0a\xf0\x02\x70\x7b\x90\xb6\xbe\x83\x98\x76\xcb\x69\x2c\xeb\x20\x0c\xa7\x04\x49\x10\x8f\x20\x10\x94\x5a\x45\x38\xef\x0d\x11\xb6\xe6\x22\xc1\x2d\xd4\xed\x33\xef\x28\xe1\x26\x13\x6b\x5f\xe8\x60\xdc\x6a\xb5\xf1\xf8\xfd\x33\x44\x99\x16\x77\xcf\x29\xcc\xee\x6f\xf7\xf8\xcb\xc1\x48\xa4\x23\x6d\x01\x22\x21\x52\xb3\x89\x7c\xc7\x33\x16\x63\xb1\x1b\x23\x5d\x6b\x82\x44\xda\xc6\x3c\x6b\x63\x17\x79\xbb\x93\x17\x2d\x2d\x5b\x52\x0f\xf4\x2e\xb9\xa8\x03\x14\xd8\x90\x10\x48\x69\x9a\x0f\xee\xe6\x57\x97\x47\x5a\x77\x9d\x29\xbb\x4f\x65\x3f\x6a\x3a\xf2\x3c\xb0\x65\x9a\xfe\x00\x8e\x02\xb2\x02\xa6\x14\xcd\x67\x37\x08\x2b\x25\xc8\x2a\x53\x20\x11\x5f\x23\x5c\x2d\x68\x4f\x1a\xd8\x27\xcd\xb2\xee\x3b\x88\x76\x60\x01\xcc\x18\x57\xb8\x9d\xd7\x19\xd6\xc5\xf1\xf6\x4f\x8d\x3c\x95\x49\xc0\x9f\xdf\xcc\x38\xc7\x4a\xe1\x68\xbb\xe0\x94\x44\xbd\x75\x62\xa6\x80\x39\xa3\x84\xc1\x15\x8f\xb2\x04\x98\x65\x07\xd2\x94\x3a\xbb\xbf\x3d\xad\xed\x24\xc5\x2b\xa0\xdf\xad\xc1\x18\x4e\x60\xec\x9e\xcc\x2a\x50\xa6\x38\x0a\x2b\x35\xf5\xa6\x61\x3f\xf9\x23\xf6\x0c\xbd\x25\x3e\xb4\x89\x50\x78\xf3\x7d\x41\xc4\xcb\xfd\xe4\x20\x32\x62\xa0\xbf\x4e\x26\x66\xbe\x1b\x5a\xed\x36\x7e\xd9\x83\x8f\xc1\x2d\x46\x6e\x90\x90\x2e\x87\x21\x82\x93\xd2\xa7\xe1\x02\x10\xa8\xda\xa9\x21\xcc\xe2\x72\xa7\x90\x89\x31\x91\xa8\xaf\x74\x27\x97\xb4\xec\x62\xde\xea\x98\x84\x67\x28\xe5\x05\x9e\x4a\x78\x40\x63\x14\xe6\xd6\x5e\xba\xa7\x35\x4f\xc5\x0f\x49\x32\x29\x39\x4f\xc0\xec\x4d\xf7\x76\xd7\x8b\x80\x4d\x23\x9b\xb1\x3f\xf9\x1b\x9c\xb4\xcb\x01\x84\x14\xf9\xdd\x31\x5e\x33\x7d\x72\x58\x66\x3d\x10\x8b\x96\x46\x31\x8c\xeb\x28\x3c\xf6\xb4\xc5\x0a\x91\x18\x98\x22\x6b\x02\x72\x44\xb8\x6c\x97\x60\x5a\x2a\xb7\xb3\xcf\x2e\xdc\xa3\x77\x1b\x4f\xd8\x7d\xd3\xe5\xa5\xf2\x4a\x78\x40\xee\xb9\x9d\x7d\x46\xa5\xd8\x36\x29\x23\x9e\xb6\x5d\x9d\x1b\x03\xed\x97\x67\x52\xae\x3b\xb7\x63\x11\x76\xdd\x47\xba\x93\x35\x89\xb0\x82\x59\xa6\xb6\x5c\x10\xb5\xbb\x32\xe4\xb1\xdd\x62\xf6\x43\x02\xf3\x2a\x57\x13\x3a\x50\x8c\x1e\x6e\x83\xf0\xaf\x17\x52\xeb\xc9\xb8\xa8\x7a\xd2\x36\xaf\x71\xf8\xc1\x20\x8f\x04\xe0\xf8\x9c\x33\xba\x0b\xb2\xdf\x76\x10\x67\x04\x7c\xb6\x62\xe0\x95\x49\x1d\xe7\x9c\x2c\xc7\x22\xa0\x9e\xb8\x78\x38\x9a\x43\x2a\xd2\xa7\x27\x3f\x62\x2f\x44\x57\x66\xe8\x4f\x33\x20\x1b\x97\x9d\xe4\x21\x72\x21\x1d\xc9\x12\x29\x7e\x34\x3c\x20\xc8\x04\xc7\x2f\x8b\x4b\x27\xf2\xcd\x14\x9f\x51\xca\xf5\x12\x9e\x2f\x1e\xff\x36\x2a\xaf\x1f\x91\x58\xb8\xed\x5c\x37\x44\x6d\xb3\xd5\x45\xc4\x93\xe9\x13\xe0\x47\xd0\x08\x90\xd3\xe2\x84\x7f\x9a\x3e\x6c\xa6\x99\x22\x54\x4e\x49\xca\x40\x5d\xcc\x17\xb7\x60\xc9\xc7\x44\xf6\xf3\x8b\x81\xde\x7b\xa7\x1e\x66\xd6\x7e\x56\x02\x5f\xce\xaf\xee\x0f\xcb\x2c\x1f\x32\xd5\x61\x5f\xd3\x59\x09\x2d\xac\xac\xb9\x40\x2f\x60\x45\x7a\x1a\x08\x4b\xc9\x23\x52\x6c\x73\x27\x08\x2e\x36\x17\x48\x71\x94\x49\x28\x0e\x89\x24\xa4\x58\x68\x64\xe5\x1f\x6b\x01\x15\xd4\x4a\x7c\x21\x2d\x93\xed\x10\x8e\xcf\xb7\xbc\x0f\x5f\x17\x08\xbf\xe2\xb0\x8c\x36\x25\xa3\x8f\xfd\x8d\xe2\x18\x76\x2c\x69\x68\x44\x9a\x03\xb4\x5a\x9c\x4a\xf9\x40\xee\x75\x12\x8b\x12\xa2\x4c\xbb\xf4\xe2\xbc\x3d\x68\x10\xb3\xc5\xa2\x38\xf8\x5d\x8e\xef\xa3\x87\xb0\x54\xc0\x79\xae\x7d\x88\x51\xd1\x03\x62\x3c\x06\xb4\xbc\xf6\x06\xab\xab\xa8\xfd\x33\xed\x85\x05\xfb\xe1\xb2\x34\xad\xb0\xce\x20\xab\x45\x80\x05\x20\x20\x6a\x0b\xa2\xf2\x0a\x8d\x95\xa2\x67\xd2\x5f\x50\x7a\x22\x9b\xfc\xbc\x1d\xa9\x2d\x48\xc8\x65\x3c\xc0\x0e\x62\xb4\xda\xa1\xd9\x2f\x79\xb3\x88\xb3\x47\x60\x04\x58\x2b\x87\xb6\x5f\x79\xaf\x39\xae\x91\x7e\x9f\xb4\x4a\x1c\x72\xe7\x65\x05\xbd\xc1\x92\x66\x57\xe1\x00\xee\xc9\x80\xdb\xed\x90\xcb\x90\xab\x1b\xa4\x8f\x80\x91\xcb\x86\xf2\x15\xa6\x25\xaf\xe6\x61\x07\xa6\x14\x45\x5b\x42\xab\x00\x64\xda\x66\x64\xcf\x80\xc6\x5f\x7e\x2b\xce\xe9\x54\xa8\xb9\xa5\xbc\x7a\xea\x09\x97\xe0\x6a\xcd\x90\xaf\x35\x84\x51\x39\x46\x94\x16\x83\xbc\xf0\x5a\x49\x4e\x32\xf6\x9f\x5b\x78\x9f\xe8\x0f\xcd\x6b\x3e\xbb\x41\x82\x53\xf8\x1f\x89\x66\xf7\xb7\x95\xbf\x56\x1c\x89\x8c\xa1\x94\xc7\x12\x71\xa6\x78\x35\x66\xbf\xf9\x1e\x24\x7b\x3f\x0f\x03\x85\x48\x71\x11\xb2\x2c\x72\x59\xca\x0c\x11\xb8\x15\xce\x26\xb7\xb8\xc8\x28\x48\x3d\xf1\x62\xcc\x48\x47\x8e\x94\xe3\xbc\xe6\x57\x46\x5b\x88\x33\x0a\x07\xe8\xf9\xb0\x9e\x7c\x9c\xdc\x6b\x05\x2f\x43\x7a\x7d\xda\x92\x68\x5b\x2f\x22\xb9\xe5\x19\x8d\x2b\x60\xc5\x1c\xb1\x62\x17\x8a\xf2\xaa\xa9\x04\x98\x42\xe5\xb2\x2b\x34\x02\x71\xad\x93\x0b\x34\x5f\x23\xc6\x59\xbe\x12\x1f\x49\x0c\xf1\x24\x27\xac\xca\xe1\x69\xe7\xa4\x1b\x56\x35\x3b\x4f\x84\x52\xb4\x02\xdd\x57\xec\x67\xa0\x13\x19\xb2\xd1\xd2\xdf\x5d\x52\xdd\x2b\x32\xe8\x26\xc0\x4d\xe4\x69\xe4\x94\xe1\x30\x21\x5c\x8a\xbc\x58\xbb\xb2\x34\xb7\x52\x84\x6d\x64\x6e\xae\xd6\x8a\xad\x97\xb1\x99\x24\xdc\x08\x62\x64\x27\x03\x3e\xba\xa6\x4b\x27\x5f\x5d\x1c\xdf\x3a\x3b\xec\x93\x2e\x82\x68\xa9\xf7\x63\xb6\x02\xc1\x40\x81\x44\xf9\xa0\x51\x0d\xa3\x86\xcf\xeb\x10\xb2\x1f\x81\x04\xe8\xc1\xb1\x70\x63\x44\x9d\x85\x6d\xa4\xb5\x38\xb4\x16\x3c\x41\x05\x09\x06\xd4\xc4\x38\xf9\x81\x4e\xd5\x6c\xb5\x08\x41\x49\xe1\x80\xb8\xc1\x95\x12\xc6\x06\x0c\x15\x21\x5c\x13\xa7\x3a\xb4\x15\xe7\x4a\x2a\x81\xd3\x7e\x74\x8f\xec\xc1\x59\xef\xb2\x4a\x13\xad\xba\x23\xdc\x26\x9f\x01\x51\x77\xd5\xd7\x46\x59\x02\x52\xee\x26\xe7\x5e\x7f\x39\x12\x37\x79\x2f\xa6\x19\x4c\x06\x14\x15\x04\x50\xe5\x26\x3c\xdf\x8e\x99\x0e\xfc\x9a\x97\xd0\xf2\xbb\x75\x84\x6d\xd0\x35\x51\x77\xa9\x8e\xd1\x5f\xce\x49\xf2\x4d\x1d\x25\xec\x41\xff\x4e\x94\xfe\x1c\xeb\xef\x90\x9e\x9a\x24\x8a\x8b\x9d\x3b\x04\x5f\x75\x50\x2d\xd0\x76\x0a\x04\x1b\xf8\xb5\xb9\x97\x17\x03\x5b\xfc\x82\xad\x84\x67\x87\xb0\x58\x11\x25\xb0\xd8\xa1\x7f\x2c\xef\x6e\xa7\xff\x9a\xdd\x7c\x42\x71\xd9\xb5\x9c\x20\x99\x45\x5b\x84\x25\xca\x33\x0f\x86\xeb\x81\x5c\xe4\x95\xa2\x29\xa7\x24\x22\xe0\x7b\xc6\x70\xcc\x01\x18\x3c\x4a\xa5\xe0\xde\xb5\xa5\xc0\x9b\x79\x9c\x90\x9f\x70\x42\x68\xd8\x8a\xbd\xd3\xbe\x63\x18\x83\xd4\x6a\xbb\xc4\x29\x8e\x88\xb2\xce\x5c\x83\x62\x03\x16\x9e\x73\xbe\x77\x57\x5b\xce\x7a\xf3\x8e\x30\xa9\x30\x8b\xf2\x4b\xb8\x41\xad\x70\xd2\x71\xdf\xde\x18\x2a\xc1\xcf\x4b\xf2\xd5\xaa\x91\x41\xeb\x24\x84\x8d\x6e\x1b\xbc\x7e\xab\xcc\xd4\x95\x87\xba\x86\xab\xfc\xdd\x83\x44\x9b\xf8\xdc\x31\x59\xb2\x0c\xd2\xf1\xbe\x6c\x0d\xc7\xe5\xf2\xc3\x5f\x64\x1b\xdb\x18\xfb\x23\xa7\x59\x02\x7e\xa6\xf7\x0e\x58\x5b\xc9\xea\x9a\x3e\x6d\x0b\x7a\x80\x77\x0c\x80\x35\xe0\xdf\x3c\xbd\x41\xb2\xed\x00\xa3\x4f\x09\x83\xe8\xec\x62\xa1\xc3\x7a\x41\xe3\x72\xcc\xd0\xfb\x8f\xcb\xf3\xf2\xb6\xe3\xcb\x31\x07\xfa\x7c\x77\x75\x87\xbe\x60\x4a\xe2\xfa\x50\x84\x25\x38\x4d\x21\x46\x6b\x02\x85\x43\x8e\x91\xda\x0a\xfe\xa4\x85\x80\x10\xdc\xbd\x94\xe5\x38\xbd\xb7\xfd\x36\x28\x41\x22\x79\xc9\xa9\xde\x0c\xb4\xeb\x15\x2d\x8e\x7b\x23\x30\xcb\x28\x16\x1a\x1a\xce\xfe\xbb\xd9\x28\x24\x69\x25\xc5\xf8\xff\xf3\x7e\xdb\x6b\x79\x36\xb5\x61\x98\x4c\x10\xe8\xe6\xd9\x9e\xd5\xae\x48\x01\x45\x38\x8f\xa5\xcb\x58\x6f\xab\x54\x2a\xdf\x4e\xa7\x31\x8f\xe4\x05\x7e\x92\x17\x38\xc1\x5f\x39\xcb\x0b\x1d\x66\x3f\x2f\xf3\x47\x0a\x7e\xaa\xae\x24\x4e\x75\x48\x2e\xd5\xf4\x9f\x12\xc4\x75\x46\x62\x98\xe2\x27\x79\xfe\x62\xe7\x73\x2c\xcf\xcb\x81\x47\x35\x8a\x2e\x34\x9c\x9d\x71\x7e\x02\x43\x6d\x2d\x8a\xaa\xae\xc9\x61\x9b\xfb\xfa\x75\x33\x21\xea\x20\xbc\xc0\x6a\x38\x6b\x0d\x02\xd0\x62\xbf\x32\xbf\xca\x39\xea\x72\x7e\x75\xef\xb9\xd3\x69\xb6\x6c\x9b\xef\x88\x9b\x90\xb0\xdb\x8f\xe3\x6c\x6a\xe4\x66\x88\xd5\xd1\x00\x3f\x5a\x9e\xa4\xe8\x49\x3b\x64\x57\x73\xda\x7b\xae\x15\x57\x8a\x82\xe0\xd1\x03\x38\xd6\x07\xd5\x68\x7b\xd7\x6c\x6a\x14\x1e\x51\x2c\x25\x89\x3e\x71\x1c\xbf\xc3\x54\x87\x5e\xe2\x16\x27\x27\xa6\x81\x32\xc7\x72\x75\xbb\x0c\x8a\xca\x10\x9b\x59\x58\xc9\xbb\x54\x91\x84\x7c\x05\x2b\x09\x0e\x56\x39\x1e\x61\x37\x1c\xa6\x8c\xdb\x20\x78\x21\x60\x4d\x9e\x8f\x22\x3a\xf8\x0e\xbe\x12\x2c\xaf\x88\x2c\xca\xad\x9d\xdf\x63\x79\xd1\xb4\x51\x86\xb1\xbb\x87\x6c\x05\x14\xd4\xfb\xbc\x74\xa7\xfb\x3a\xd6\x40\x5f\x2e\xd7\x84\xbf\xfb\x64\xc4\x82\xc7\x72\x01\x42\xeb\x75\x5c\x4e\xe2\xaf\x92\xcf\xe0\x8f\x20\x04\x89\xe1\x5d\x95\x60\xbf\xe4\x49\x82\xf7\xbe\x1e\x65\x94\x95\x8a\x9e\x98\xd3\x62\xed\x57\x49\xde\x34\x4b\xe1\x1c\xcb\x21\x5f\xf2\x38\xd7\x96\xba\xde\xff\xa6\x84\xca\xb1\x9b\x8a\xe0\xbf\x9f\xd1\x8b\x0d\xa8\xdc\x3a\x27\xf7\xb6\x42\x91\x8d\x2a\x9f\x8d\x1a\x19\x38\x14\x32\xe6\x77\x0b\x6b\x50\x34\xc8\x6d\x45\xf3\x8f\x89\xfc\x08\xbb\xf9\xd5\x18\x02\x2a\x24\x38\x04\x1b\x03\xad\x47\x53\x73\xd1\xdc\x21\x6a\x78\x69\xfd\xa6\x23\xc5\x37\x5b\x39\x3a\x79\x69\x0e\x45\xec\xf1\x95\x2d\xa4\x73\x4d\x5c\x76\x53\x8f\x83\x79\xca\x0e\x83\x86\xcc\xb9\x1a\x77\x7d\xb6\xd8\x79\x6f\xae\xb6\x61\x71\x33\x08\x07\xd6\x97\x1d\xf7\xe6\x05\x65\x0f\x5f\x06\x13\xc2\x25\x61\xba\x6c\xaf\x06\x88\xca\x9e\x82\xee\xbc\x86\xd7\xda\x18\xee\x8b\x0c\x5c\xa2\x10\xf3\x96\x6b\x38\xca\x2d\x7f\x0c\xf5\xbc\x51\xfb\x10\xbe\x71\x53\x52\x6d\xb1\xca\x4b\xf7\x65\x0a\x11\x59\x93\xa8\x38\x62\xaf\x13\xcf\xbe\x67\xd2\x07\xf5\x95\x77\xd5\xcb\xed\xbc\x33\x6f\xd4\xf7\x3c\x7d\x3c\x8b\x13\xc2\x2e\xab\xb7\x79\x47\xb9\x82\xaa\x9c\xee\xc0\x2d\x87\x17\x41\x1a\x07\x6f\x1a\x53\x40\x80\xe4\x55\xa5\x2d\xa3\xad\xb9\x40\x4d\xb5\xa3\x15\x96\x10\xa3\x97\xb7\x1f\xdd\x2b\x41\x0e\xe8\xc2\x0c\x07\xc7\x37\xf2\x4e\xfa\x11\xa8\x17\xcf\x94\x17\x02\x79\x97\xf9\x3b\x6e\xd2\x47\x5d\x21\xf0\x90\x7d\xb4\x8c\xc8\xb8\xa7\xf4\xfc\xfa\x7a\x22\x6a\x3b\x8b\x63\xce\x16\x55\xf5\x8b\x77\xbe\xa8\xdd\x7c\xe4\x8a\x1f\x7a\xbf\xc8\x80\x93\x01\x33\x0f\x59\xc9\x43\xc9\x83\x3a\x0a\xec\x97\x4c\x0f\xe5\xbd\x24\xf5\xfd\x7d\xcf\xb0\x3c\x2b\xa1\xd8\x70\x60\x67\x17\xba\x9a\xb3\x8d\x18\xfb\xb6\x2a\x4e\xd3\x1b\xe8\xef\x86\xdd\xda\x66\x8a\x2f\x23\x4c\x47\x3a\xb5\x08\x84\x2a\x4a\xb8\x46\xb6\xb7\x3e\x87\xee\xd4\x1c\x56\xe3\x34\x06\xeb\x91\xed\x9e\x15\x08\x86\xe9\x40\x92\x7b\xb0\xfd\x5a\x5a\x13\xb3\xc3\xf9\xe7\x04\x6f\xe0\x5d\x46\x68\x3c\x52\xcf\xcf\xf7\xf6\x57\x6c\x0e\x7c\xfe\xb3\x35\x36\x33\xb2\x2c\x1a\xb4\xe0\xc8\x80\xec\x8e\xc9\x3b\x1a\xed\x18\x76\x62\x5c\x58\x5d\x65\x98\x41\x78\x0c\x42\xd2\x6c\x30\xba\x2a\xd3\x2c\xc4\x42\x3d\x7b\xb2\xe9\x96\xb3\xcc\xe6\x8e\xd8\x40\xc9\x36\xd2\x6a\x37\x3b\xa5\x78\x48\xef\x06\x05\xb1\x5f\x4e\x60\x59\xb2\xb2\xa5\x2c\x38\xbb\x02\xbd\xcd\x7a\x87\x25\x1c\x74\xe6\x54\x09\x5a\x80\x88\x80\x29\xbc\x81\xd9\x8a\x3f\xc2\xc1\x72\x65\xca\x55\x79\x7d\x98\x70\xb6\x54\x02\x2b\xd8\x8c\x7b\x4b\x39\xe5\xaa\x82\xcc\x82\xf3\xfe\xe1\x45\xa0\x9a\xb2\x36\x50\x4c\x76\xda\xa7\x7f\x4f\xb5\x0e\xce\x71\xbf\x2a\x03\x72\x80\x79\xa3\xa2\xfb\x45\x75\xbe\x29\xc8\xde\xa7\x23\xd2\xcc\x0f\xcb\x6b\xb7\x68\x24\x0f\x21\xe7\x57\xa7\xb5\xa8\x75\xf0\xf8\x89\x47\x98\x8e\xf2\x7f\xba\xf5\x32\xbf\x9b\x7f\x24\x2f\xf8\xa2\x34\x73\xaf\xc6\x99\x04\xf6\x36\xcb\xeb\xa0\xd1\xef\xa0\x38\x0b\xc2\x96\x1f\xdc\xe2\x5d\xca\x9f\x46\xd9\xb1\x78\x1c\xe0\x23\x8c\x22\xbc\xba\xf1\xd8\x74\x78\x2d\x60\x81\x95\x35\x60\x1d\xa4\x5c\x9e\x89\xa8\xfd\x34\xc4\xfc\x14\x0e\x04\xfd\xa0\x9e\x5b\xcf\xaa\x16\xa3\xb5\xac\x56\xd8\xaf\x9c\xc0\x8b\x24\xaf\x15\x94\xdb\xea\xff\x50\x68\x53\x69\x9e\x41\x3c\x64\xcd\xf8\x48\x6f\x2d\xa1\xbb\xfe\x1d\xb5\xe1\xfb\xae\x41\xb3\x17\xc7\x79\x37\x5b\x13\xdd\x07\xa0\xbd\xd2\x99\x40\x94\x5b\xa8\xc1\x38\x0b\xd3\x20\x82\xe0\xc8\xe7\x26\x9a\xc6\x42\x75\x71\xaf\xbe\x43\xfd\x00\x90\xb6\x2e\xde\x17\x85\xd6\xd0\xb9\x86\x86\x08\x43\x72\xc7\xa2\xe3\xdc\x91\x0b\x33\xb2\x16\x7e\x0d\x6f\xb1\xd8\xe0\xcb\x33\x95\x66\xca\x81\x42\xfd\xd0\x26\xe0\x91\x84\x79\x38\xb7\xc7\x49\xaf\x5c\x38\x5b\x76\x6a\x9a\xdb\xc4\xa8\xc6\xd0\xd0\x8e\x41\x61\x42\xcb\xbb\x93\x7f\x64\x24\x7a\x90\x0a\x0b\x55\xbd\x43\x53\x5f\xb3\x04\xfd\x45\x17\x32\x38\xae\x31\x16\xe0\xbe\xe7\xb1\x86\xd2\x02\xef\x7d\xfb\x52\xaf\xfd\x6e\xb2\xc0\xcc\x9e\xa9\x1a\x05\x30\x48\x30\x09\xcb\xe5\x6b\x9a\x3d\x07\x5f\x5c\x29\x56\xdb\x13\x88\x53\x9a\x23\x2a\xce\xcb\x97\xcb\x0f\x6e\xf1\x98\xdf\x7c\x33\x11\xd6\x28\x99\xb4\x27\xee\x8e\xc4\x22\x7a\x0a\x93\x1e\x76\x7b\x36\x35\x21\xa7\x3b\xf0\x1e\x5e\x07\xed\xf0\xea\x8e\xb6\x7b\x87\xbb\x70\x69\x7a\x5b\x5c\xdc\x01\x3f\x8e\x13\xdd\xdf\x6b\x8b\x63\xfa\xff\x7f\xe0\xde\xc4\xdc\x03\xec\x8c\xff\x37\x81\x8d\x9e\xca\xef\x8f\x52\x6a\x63\x1b\xcb\xa1\x2f\xd9\xf4\x53\x19\x1f\x6f\x96\x08\x6a\x2d\x55\xcf\x17\xf9\x5f\x7e\xf3\x93\xde\xb2\xd5\x88\x2b\x37\x0d\x63\x5a\xd6\x75\xef\x3d\x35\xdd\x0e\x3d\x09\x9c\x4a\x54\xcb\xd1\xc0\xda\x80\x2a\x1e\x3e\x95\x20\x08\xa6\xe4\x6b\x3e\x7a\x77\x10\x7b\x0b\x7e\x53\xc1\xe1\xdb\x9b\x6f\x6f\xfe\x1d\x00\x00\xff\xff\x24\x0d\xc9\x78\x5a\x7c\x00\x00")

func schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaJson,
		"schema.json",
	)
}

func schemaJson() (*asset, error) {
	bytes, err := schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9d, 0x38, 0xe4, 0x14, 0x7f, 0x38, 0x78, 0xd2, 0x83, 0x8a, 0x12, 0xa3, 0xc8, 0x72, 0xdd, 0x72, 0x17, 0xe3, 0xdc, 0xdf, 0xb, 0xe5, 0x20, 0x47, 0x22, 0xe4, 0xd7, 0x2d, 0xe1, 0x67, 0xff, 0x72}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.json": schemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.json": &bintree{schemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
