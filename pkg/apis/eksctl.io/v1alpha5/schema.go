// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/schema.json (32.113kB)

package v1alpha5

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\xdd\x73\x1b\x39\x72\x7f\xf7\x5f\x81\xd2\x5d\x55\x92\x2a\x4a\x4c\x1e\x92\x54\xb9\x2e\x57\x45\x4b\x5e\x99\xb1\x25\xb1\x44\xc7\x57\xb9\xbd\x7d\x68\xce\x34\x49\xac\x30\xc0\x1c\x80\x91\x44\xaf\xfd\xbf\xa7\x30\x5f\x9a\x0f\x60\x38\x33\x04\x15\x7a\xeb\xde\x76\xc5\x41\x03\xe8\xfe\xf5\x27\x1a\xf0\x6f\x6f\x08\x39\xfb\xa3\xc4\xf5\xd9\x5b\x72\xf6\x87\x69\x88\x6b\xca\xa9\xa6\x82\xab\xe9\x25\x4b\x94\x46\x79\x29\xf8\x9a\x6e\xce\x26\xe6\x43\xbd\x8b\xd1\x7c\x28\x56\xbf\x62\xa0\xb3\xbf\xfd\x51\x05\x5b\x8c\xc0\xfc\x79\xab\x75\xfc\x76\x3a\xfd\x55\x09\x7e\x9e\xfd\xf5\x5c\xc8\xcd\x34\x94\xb0\xd6\xe7\xff\xfa\x9f\xd3\xec\x6f\x7f\xc8\xc6\x55\xa6\x3a\x7b\x4b\xcc\x3a\x08\x39\x2b\xe6\x64\x22\x09\xff\x02\x3a\xd8\x96\x3f\x11\x72\x16\x4b\x11\xa3\xd4\x14\x55\xe5\xaf\x84\x9c\x05\xd9\xa0\x4f\x62\xb3\xa1\x7c\x53\xfb\x6d\xef\xe6\xca\x89\x8a\xd1\xe5\xd0\xef\xf9\x7f\x7d\x9f\xbc\xcc\x8f\x6b\x94\x12\xc3\x3b\x19\xa2\x3c\x7b\x4b\x7e\x76\xae\x21\xff\xe1\x97\x72\x2c\x84\x61\x3a\x33\xb0\x45\x75\x17\x6b\x60\x0a\xcb\x8f\x42\x54\x81\xa4\xb1\xf9\xce\xac\x38\x10\x5c\x03\xe5\x8a\x04\xa9\x08\x48\x0c\x12\x22\xd4\x28\x15\x91\xc8\x40\x63\x48\xb4\x20\x15\x5e\x95\x84\x9e\xcf\x29\xd7\xc8\x18\xfd\xf5\x7c\xab\x23\x76\x7e\x28\xe1\x37\x15\x46\xb4\x65\xd4\x66\xbc\x53\x54\xc8\x61\xc5\xf0\xf3\x2e\x6e\xfc\x40\xc8\x19\xd5\x18\x35\xff\x58\x81\x9c\xd2\xd2\xcc\x31\xa9\xff\x1a\xe2\x1a\x12\xa6\xcd\x07\x67\x95\x5f\xbe\x57\x3f\x2b\x49\x80\x94\xb0\x1b\x2b\xe0\xea\xca\x7d\x4a\x17\x65\xb7\x14\x72\x60\x11\x96\x33\x79\xa0\x8c\x87\x92\xb7\x4a\x3a\xb3\x00\x15\xf1\x4a\xfc\x7b\x42\x25\x86\x75\x16\x45\xa8\x21\x04\x0d\x6d\xfe\xb8\xe0\x00\x31\xfd\x82\x52\x65\x4b\xfe\xcd\x26\x33\x8b\xd8\x6b\x42\xaf\xfd\x80\xcf\x10\xc5\x2c\x9d\xe4\xe7\x3a\x4e\xf0\x41\x05\x9a\x5d\x50\x31\x7d\xfc\x37\x60\xf1\x16\xfe\xbd\x0a\x97\x5f\xde\x58\x80\x73\x06\x8f\x40\x19\xac\x28\xa3\x7a\xf7\x57\xc1\x4f\x01\xb1\x93\xaa\xc1\xb1\x98\x48\x32\xc0\xe0\xd9\xc9\xae\x41\x6e\x40\xe3\x42\x8a\x35\x65\xbd\xb7\x6c\x9f\xf2\xa7\x1a\xad\x83\x76\xbb\xa1\xba\xdf\x36\xaf\xa9\xb6\x53\xa0\x10\x0d\x62\xd4\x7c\x76\x63\x27\xf4\x40\x79\x78\x64\xb4\xd6\xf5\x6e\x2f\x50\x23\xe0\xb0\xc1\xf0\x56\x84\x78\x2d\x45\x12\x1f\x26\xb5\x9b\x06\xb5\x83\xe4\x56\x9a\x84\x21\xac\xbf\xc1\x17\x1b\x52\x27\xc7\xfd\x6c\xd1\xcf\xde\x14\x06\x12\xb5\x7a\xcf\x03\xb9\x2b\xcc\x6e\x8f\x4d\x2e\x5b\xc3\xec\xd4\x35\xe8\xa4\xb5\xcd\x4e\xbe\x2d\xb3\x21\x56\x72\x8f\x71\x30\x88\xd6\x97\xc5\xe5\x58\x4f\x99\x2a\xc8\xc4\x6a\xe4\x6d\xc8\x68\xe8\x68\x63\xcd\x76\xe1\x77\x82\xbf\xc3\x9a\x75\x5a\x77\xbb\x71\xed\x14\x78\x5b\x5e\x0d\x9b\xe5\x25\x52\x00\xa2\xa8\xb1\x14\xb9\x27\x9f\x18\xbf\xbd\x42\x22\x31\x66\x10\x60\x48\x9e\xa8\xde\x92\x5c\x6e\x64\xb6\x98\xf7\x8e\x11\x06\x13\xb6\x45\x07\xef\x79\x18\x0b\xca\xb5\xea\x13\xff\xc5\x92\x3e\x82\xc6\x59\x10\xa0\x6a\x81\xbb\xd0\xb9\x95\x10\x0c\xc1\xa1\x17\x71\xb2\x62\x34\x18\x4a\x60\x10\x80\xeb\x8b\x74\xcd\xed\x45\xb4\x5b\xc1\x42\x55\x06\x61\x10\x53\xa2\x50\x3e\xa2\x24\x98\x73\x95\x40\x3a\x1b\xa1\x7c\x2d\x64\x04\x35\xd4\xed\x13\xef\x28\xe2\x36\x11\x1b\x5f\xd8\x43\xb8\x85\xb6\x89\xf0\xfd\x33\x06\x89\x21\x77\x2f\x18\xce\xee\x6f\xf7\xf8\xcb\xce\x48\xa4\x41\x6d\x81\x32\xa2\xca\x58\x13\xf5\x4e\x24\x3c\x04\xb9\x1b\x43\xdd\x70\x82\x06\x46\xc6\x22\xa9\x63\x97\x0c\x76\x27\x2f\x5c\x5a\xd6\xa8\x1e\xe8\x5d\x52\x52\x07\x30\xb0\x42\xc1\x13\xd3\x8c\x3d\xb8\x9b\x5f\x5d\x1e\x49\xef\x1a\x5b\xee\xbf\x95\xfd\xa8\x69\xd0\x1b\x80\x2d\xdb\xf6\x3b\x70\xe4\xd1\x2a\x00\x63\x64\x3e\xbb\x21\xa0\xb5\xa4\xab\x44\xa3\x22\x62\x4d\xa0\x50\xe8\x81\x66\x60\x1f\x35\x87\xde\x37\x10\xdd\xc3\x0a\x00\xe7\x42\x43\xbd\xae\xd3\xcd\x8b\xe3\xe5\x4f\x95\x3a\x95\x8d\xc0\x6f\xdf\xed\x38\x07\xad\x21\xd8\x2e\x04\xa3\x41\x4b\x4f\xec\x26\x60\xce\x19\xe5\x78\x25\x82\x24\x42\xee\xc8\x40\xaa\x54\x67\xf7\xb7\xa7\x95\x4e\x32\x58\x21\xfb\x61\x05\xc6\x21\xc2\xb1\x39\x99\x93\xa0\x8a\x21\xf0\x4b\x35\x1e\x6c\x86\x87\xd1\x1f\x91\x33\xb4\x54\xbc\x2b\x89\xd0\xb0\xf9\xb1\x20\x32\xc8\xfd\xa4\x20\xb2\x62\xa0\xad\x27\x13\xbb\xbd\xeb\xd2\x76\x97\x7d\xd9\x83\x8f\xce\x14\x23\x15\x88\x4f\x97\xc3\x09\x85\x28\xf7\x69\x90\x01\x82\x14\x99\x1a\x01\x1e\xe6\x99\x42\x22\xc7\x44\xa2\x43\xa9\xf7\x72\x49\xcb\x26\xe6\x9d\x8e\x49\x0e\x0c\xa5\x06\x81\xa7\x20\xee\x51\x18\x99\xb8\x8d\x97\x6e\x71\x6d\x20\xe3\xbb\x28\xd9\x98\x9c\x16\x60\xf6\x96\x7b\x9b\xfa\x22\x71\x53\xa9\x66\xec\x2f\xfe\x7a\x37\xda\xf9\x02\x7c\x92\xfc\xe1\x2c\x5e\xb5\x7c\x72\x58\x65\xdd\x93\x15\xcd\x85\x62\x59\xd7\x51\xec\xd8\xd3\x16\x34\xa1\x21\x72\x4d\xd7\x14\xd5\x88\x70\xd9\x4d\xc1\xa6\x2a\xb7\xb3\xcf\x7d\x6c\x8f\xc9\x36\x9e\xa0\x7f\xd2\x35\x88\xe5\x05\x71\x8f\xb6\xe7\x76\xf6\x99\xe4\x64\xeb\x46\x99\x88\xb8\xee\xea\xfa\x59\xa0\xfd\xf4\x6c\xcc\xed\x6f\xdb\x41\xfa\xd5\xfb\xc0\x4c\xb2\xa6\x01\x68\x9c\x25\x7a\x2b\x24\xd5\xbb\x2b\x4b\x1d\xbb\x5f\xcc\x7e\x48\x60\x5e\xd4\x6a\x7c\x07\x8a\xc1\xc3\xad\x17\xfb\x3b\x08\xa9\xe5\x66\xfa\xb0\x7a\x52\x17\xaf\x75\xf9\xde\x20\x4f\x24\x42\x78\x2e\x38\xdb\x79\xc9\xb7\x7b\x90\xb3\x02\x3e\x59\x71\x1c\x54\x49\x1d\xe7\x9c\x1c\xc7\x22\xa8\x9f\x84\x7c\x38\x9a\x43\xca\xca\xa7\x27\xbf\xe2\x41\x88\x2e\xc4\xd0\xde\xa6\x47\x6b\x9c\x4f\x92\x86\xc8\x19\x75\xa2\x72\xa4\x0c\x33\xc3\x1d\x84\x6c\x70\xfc\xb2\xb8\xec\x65\x7c\x13\x2d\x66\x8c\x09\xa3\xc2\xf3\xc5\xe3\x7f\x8c\xaa\xeb\x07\x34\x94\xfd\x32\xd7\x0d\xd5\xdb\x64\x75\x11\x88\xe8\xdb\x13\xc2\x23\x1a\x04\xa8\x6f\xd9\x09\xff\xb7\xf8\x61\xf3\x2d\xd1\x94\xa9\x6f\x34\xe6\xa8\x2f\xe6\x8b\x5b\x74\xd4\x63\x02\xf7\xf9\x45\xc7\xec\xad\x53\x0f\xbb\xd5\x7e\xd6\x12\x2e\xe7\x57\xf7\x87\x55\x96\x0f\xd9\x6a\xb7\xaf\x69\x68\x42\x0d\x2b\x6b\x21\xc9\x0b\x58\x89\xd9\x06\x01\xa5\x44\x40\xb3\x34\x77\x42\xf0\x62\x73\x41\xb4\x20\x89\xc2\xec\x90\x48\x61\x0c\xd2\x20\x2b\xfd\xd8\x10\x28\xa0\x96\xe3\x8b\x18\x9a\x7c\x47\x20\x3c\xdf\x8a\x36\x7c\xfb\x40\xf8\x15\x97\x65\x95\x29\x1d\x7d\xec\x6f\x25\xc7\xa1\x67\x4b\x43\x25\xd2\xec\x30\xab\xd9\xa9\xd4\x10\xc8\xbd\x4e\x61\x51\x61\x90\x18\x97\x9e\x9d\xb7\x7b\x0d\x62\xb6\x20\xb3\x83\xdf\xe5\xf8\x39\x5a\x08\x8b\x25\x9e\xa7\xdc\xc7\x90\x64\x33\x10\x2e\x42\x24\xcb\xeb\xc1\x60\xed\x4b\x6a\xff\x4e\x5b\x61\xc1\x7e\xb8\x2c\x6d\x1a\xd6\x58\x64\xa1\x04\x20\x91\x20\xd5\x5b\x94\x85\x57\xa8\x68\x8a\xd9\x49\x5b\xa1\xcc\x46\x36\xe9\x79\x3b\xd1\x5b\x54\x98\xd2\x78\xc0\x1d\x86\x64\xb5\x23\xb3\xbf\xa6\xc3\x02\xc1\x1f\x91\x53\xe4\xb5\x1a\xda\x7e\xe6\xbd\xe6\xba\x46\xfa\x7d\x5a\x6b\x71\x48\x9d\x97\x13\xf4\x16\x49\xda\x5d\x45\x0f\x70\x4f\x3a\xdc\x6e\xc3\xb8\x74\xb9\xba\x4e\xf3\xe1\x31\x72\xd9\x30\xb1\x02\x96\xdb\xd5\x34\xec\x00\xc6\x48\xb0\xa5\xac\x08\x40\xa6\x75\x8b\x3c\x30\xa0\x19\x4e\xbf\x16\xe7\x34\x3a\xd4\xfa\x95\xbc\x5a\xec\xf1\x57\xe0\xaa\xed\x50\xac\x0d\x84\x49\xbe\x46\x12\x67\x8b\xbc\x18\xa4\x49\xbd\x68\xec\x3f\xb7\x18\x7c\xa2\xdf\xb5\xaf\xf9\xec\x86\x48\xc1\xf0\x9f\x14\x99\xdd\xdf\x16\xfe\x5a\x0b\x22\x13\x4e\x62\x11\x2a\x22\xb8\x16\xc5\x9a\x87\xed\xf7\x20\xda\xfb\xed\x30\x32\x0c\xb4\x90\x3e\xdb\x22\x97\x39\x4d\x1f\x81\x5b\xe6\x6c\x52\x89\xcb\x84\xa1\x32\x1b\xcf\xd6\x4c\x4c\xe4\xc8\x04\xa4\x3d\xbf\x2a\xd8\x62\x98\x30\x3c\x80\xcf\x87\xcd\x34\xc4\xc9\xbd\x56\xf0\xd2\xc5\xd7\xa7\x2d\x0d\xb6\xa5\x12\xa9\xad\x48\x58\x58\x00\x2b\x14\x84\x67\x59\x28\x49\xbb\xa6\x22\xe4\x9a\xe4\x6a\x97\x71\x04\xc3\x92\x27\x17\x64\xbe\x26\x5c\xf0\x54\x13\x1f\x69\x88\xe1\x24\x35\x58\x85\xc3\x33\xce\xc9\x0c\x2c\x7a\x76\x9e\x28\x63\x64\x85\x66\xae\x70\x98\x80\x4e\x64\xc9\x56\x49\xff\x70\x45\xf5\x41\x91\x41\xb3\x00\x6e\x33\x9e\x56\x9b\xd2\x1d\x26\xf8\x2b\x91\x67\xba\xab\x72\x71\x6b\x4d\xf9\x46\xa5\xe2\xaa\x69\x6c\xa9\xc6\x76\x23\xd1\xcf\x40\x8c\x9c\xa4\xc3\x47\x97\xe6\xb2\x97\xaf\xce\x8e\x6f\x7b\x3b\xec\x93\x6e\x82\xa8\xb1\xf7\x63\xb2\x42\xc9\x51\xa3\x22\xe9\xa2\x49\x09\xa3\x8a\xcf\x6b\x18\xe4\x61\x06\xc4\xc3\x0c\x3d\x1b\x37\x46\xf4\x59\xb8\x56\x5a\x92\x23\x6b\x29\x22\x92\x19\x41\x8f\x9c\x18\x47\xdf\xd3\xa9\x9a\xab\x17\xc1\xab\x51\x38\x20\x6e\xe8\x6b\x12\xc6\x06\x0c\x85\x41\xb8\xa6\xbd\xfa\xd0\x56\x42\x68\xa5\x25\xc4\xed\xe8\x9e\xb8\x83\xb3\xd6\x65\x95\x2a\x5a\xcd\x44\x50\x37\x3e\x1d\xa4\xee\x8a\xaf\xad\xb4\x24\xc6\xa2\x1f\x9d\x7b\xf3\xe5\x48\xdc\xa4\xb3\xd8\x76\x30\xe9\x60\x94\x17\x40\xe5\x49\x78\x9a\x8e\xd9\x0e\xfc\xaa\x97\xd0\xd2\xbb\x75\x94\x6f\xc8\x35\xd5\x77\xb1\x89\xd1\x5f\xce\x49\xd2\xa4\x8e\x51\xfe\x60\x7e\xa7\xda\x7c\x0e\xe6\x3b\x62\xb6\xa6\xa8\x16\x72\xd7\x1f\x82\xaf\xba\xa8\x1a\x68\x1b\x0d\x82\x15\xfc\xba\xdc\xcb\x8b\x80\x1d\x7e\xc1\xd5\xc2\xb3\x23\x20\x57\x54\x4b\x90\x3b\xf2\xdf\xcb\xbb\xdb\xe9\xff\xce\x6e\x3e\x91\x30\x9f\x5a\x4d\x88\x4a\x82\x2d\x01\x45\xd2\xca\x83\xe5\x7a\xa0\x90\x69\xa7\x68\x2c\x18\x0d\x28\x0e\x3d\x63\x38\xe6\x02\x2c\x1e\xa5\x60\x70\xeb\xda\x92\xe7\x64\x1e\x22\xfa\x13\x44\x94\xf9\xed\xd8\x3b\xed\x3b\x86\x21\x2a\xc3\xb6\x4b\x88\x21\xa0\xda\xb9\x73\x03\x8a\x0d\x3a\xec\x5c\xef\x7b\x77\xa5\xe4\x9c\x37\xef\x28\x57\x1a\x78\x90\x5e\xc2\xf5\x2a\x85\x93\x8e\xfb\xf6\xc6\x50\x11\x3c\x2f\xe9\x57\x27\x47\x3a\xa5\x13\x51\x3e\x7a\xac\xf7\xfe\xad\xbc\x52\x97\x1f\xea\x5a\xae\xf2\x37\x0f\x12\x5d\xe4\x53\xc7\xe4\xa8\x32\xa8\x9e\xf7\x65\x4b\x38\x2e\x97\x1f\x7e\x27\x69\x6c\x65\xed\x8f\x82\x25\x11\x0e\x13\xfd\xe0\x80\xb5\x56\xac\x2e\xcd\xa7\x4b\xa1\x3b\xec\x8e\x05\xb0\x16\xfc\xdb\xb7\xd7\x69\x6c\x1b\xc0\x68\x9b\x84\x4e\x74\x36\xb1\xd0\xb0\x7a\x5e\xe3\x72\xe0\xe4\xfd\xc7\xe5\x79\x7e\xdb\xf1\xe5\x98\x83\x7c\xbe\xbb\xba\x23\x5f\x80\xd1\xb0\x3c\x14\xe1\x11\xc4\x31\x86\x64\x4d\x31\x73\xc8\x21\xd1\x5b\x29\x9e\x0c\x11\x94\x52\xf4\x6f\x65\x39\xce\xec\x75\xbf\x8d\x5a\xd2\x40\x5d\x0a\x66\x92\x81\x7a\xbf\xa2\xc3\x71\x6f\x24\xf0\x84\x81\x34\xd0\xe8\xed\xbf\xab\x83\x7c\x1a\xad\x28\x5b\xff\xff\xbf\xdf\x1e\xa4\x9e\x55\x6e\x58\x36\xe3\x05\xba\x69\xb5\x67\xb5\xcb\x4a\x40\x01\xa4\xb1\x74\x71\xd1\x54\x21\x92\x9f\xd3\x5b\xb6\xe5\xcd\x43\x13\x20\xaa\x5f\xfe\x79\xab\x75\xac\xde\x4e\xa7\xe6\xff\x2e\xe0\x49\x5d\x40\x04\x5f\x05\xbf\x08\x44\x34\x9d\xfd\x65\x99\xbe\x5f\xf0\x53\x31\x66\x6a\xa2\x75\xa5\xa7\xff\xa3\x50\x5e\x27\x34\xc4\x29\x3c\xa9\xf3\x17\x08\x9c\x83\x3a\xcf\xf7\x14\x94\x00\xbb\x30\x48\xff\x97\xde\x3a\xb0\x6f\x1b\x7f\x02\xb2\x95\xb8\xfe\xaf\xbf\x9d\xbd\xd2\xd2\xff\x76\xf6\x67\x0b\xe7\xfe\x34\x85\x3f\xd7\x35\xab\x68\x8e\xea\x91\x2b\xbf\x7e\xf3\x8d\x8f\x66\x8a\x41\x88\xb7\x1c\xd8\x7a\x41\x79\x96\xf4\xcc\xaf\x52\x43\x77\x39\xbf\xba\x1f\x98\x2e\x55\x47\xd6\xc5\x77\xc4\x4c\xc6\x6f\x0e\x73\x9c\xcc\x48\x6d\xba\x5c\x03\xe9\x30\xb2\x8e\x77\x2d\x5a\xd4\x0e\x49\x8d\x4e\x3b\x71\x5b\x09\xad\x19\x4a\x11\x3c\x60\xcf\x26\xa3\x12\x6d\xef\xaa\x43\xad\xc4\x03\x06\x4a\xd1\xe0\x93\x80\xf0\x1d\x30\x13\xbf\xc9\x5b\x88\x4e\x8c\x03\x79\xa1\xe6\xea\x76\xe9\x15\x95\x3e\x32\x62\x5c\xa9\xbb\x58\xd3\x88\x7e\x45\xa7\x11\xec\x6c\x95\x3c\x42\x4a\xed\xa7\x17\xdc\x42\x78\x21\x71\x4d\x9f\x8f\x42\xda\x7b\x19\xa0\x20\xac\xae\xa8\xca\x7a\xb6\x7b\x3f\xea\xf2\xc2\x69\x2b\x0d\xeb\x74\x0f\xc9\x0a\x19\xea\xf7\x69\xff\x4f\xf3\x89\xad\x8e\xb9\xfa\xdc\x35\xfe\xe1\x2b\x1a\x0b\x11\xaa\x05\x4a\xc3\xd7\x71\x85\x8d\xdf\x4b\x51\x44\x3c\xa2\x94\x34\xc4\x77\x45\x95\xfe\x52\x44\x11\xec\x7d\x82\xca\x4a\x2b\x96\x2d\x32\xa7\x65\xb5\x5f\xa5\x02\x54\xed\xa7\xeb\xd9\x53\xf9\x52\x0c\xba\x76\x34\x07\xff\xa3\xae\x94\xaf\xdd\xd6\x49\xff\xe3\xac\x5e\x6e\x50\xa7\xd2\x39\xb9\x07\x1a\xb2\x92\x56\xfe\xf6\xd4\xc8\xc0\x21\xa3\x31\xbf\x5b\x38\x83\xa2\x4e\xdb\x96\x0d\xff\x18\xa9\x8f\xb8\x9b\x5f\x8d\x31\x40\x19\x85\x1e\xc1\x46\xc7\xe8\xd1\xa6\x39\x1b\xde\x23\x6a\x78\x19\xfd\xa6\x41\x65\x68\xc9\x73\x74\x05\xd4\x1e\x8a\xb8\xe3\x2b\x57\x48\xd7\xb7\xfa\xd9\xac\x5f\x76\x16\x3b\x1b\x16\xd4\x67\xe1\xd6\x9a\xf5\xb9\x62\xe7\xbd\x05\xdf\x8a\xc4\xed\x20\xec\xd0\x2f\x37\xee\xed\x0a\xe5\x0e\x5f\x3a\xab\xca\xb9\xc1\xec\x93\x5e\x75\x18\x2a\x77\x1d\xbb\xf1\xa4\x5e\x2d\x31\xdc\x17\x19\xf4\x89\x42\xec\x29\x57\x77\x94\x9b\xff\xe8\xeb\x8d\xa4\xfa\x49\x7e\xe5\xba\xa5\xde\x82\x4e\xfb\xff\x55\x8c\x01\x5d\xd3\x20\x3b\xa7\x2f\xab\xd7\x43\x0f\xb6\x0f\x9a\x2b\x9d\xaa\x55\xdb\x79\x67\x4f\xd4\xf7\xbc\x9f\x3c\x0b\x23\xca\x2f\x8b\x07\x7e\x47\xb9\x82\xa2\x27\xef\xc0\x94\x63\x90\x81\xb4\x2e\xde\xb6\x26\x8f\x00\x49\x5b\x53\x6b\x42\x5b\x0b\x49\xaa\x6c\x27\x2b\x50\x18\x92\x97\x07\x24\xfb\xb7\x93\x1c\x30\x85\x1d\x0e\x3d\x1f\xda\x3b\xe9\x97\xa4\x5e\x3c\x53\xda\x4d\x34\xf8\xae\x40\xcf\x24\x7d\xd4\x3d\x84\x01\xb4\x8f\x56\x11\x19\xf7\x1e\xdf\xb0\xb9\x9e\xa8\xde\xce\xc2\x50\xf0\x45\xd1\x42\x33\xb8\x5e\x54\x1f\x3e\x52\xe3\xbb\x1e\x41\xb2\xe0\xa4\x43\xcc\x5d\x52\x1a\xc0\xe4\x4e\x1e\x79\xf6\x4b\xb6\xd7\xf6\x5e\x8a\xfa\xc3\x7d\x4f\x37\x3d\xa7\x41\x71\xe1\xc0\x6d\x5d\xd8\x6a\xce\x37\x72\xec\x03\xad\x10\xc7\x37\xd8\xce\x86\xfb\x8d\x4d\xb4\x58\x06\xc0\x46\x3a\xb5\x00\xa5\xce\xfa\xc0\x46\x8e\x77\xbe\xa9\xde\x6b\x38\xae\xc6\x71\x0c\xd7\x23\xc7\x3d\x6b\x94\x1c\x58\x47\x91\xbb\x73\xfc\x5a\x39\x0b\xb3\xdd\xf5\xe7\x08\x36\xf8\x2e\xa1\x2c\x1c\xc9\xe7\xe7\x7b\xf7\x53\x38\x07\xbe\x21\x5a\x5b\x9b\x1d\x59\x0e\x0e\x3a\x70\x64\x41\x76\x43\xe4\x0d\x8e\x36\x04\x3b\xb1\x2a\x56\x93\x19\x76\x10\x1e\xc3\x20\x19\x6b\x30\xba\xb5\xd3\x4e\xc4\x61\x7a\xf6\x54\xd3\x1d\x67\x99\xd5\x8c\xd8\x62\x92\x5d\x46\xab\x3e\xec\x94\xe2\x21\x93\x0d\x4a\xea\xbe\xe1\xc0\x93\x68\xe5\x2a\x59\x08\x7e\x85\x26\xcd\x7a\x07\x0a\x0f\x3a\x73\x2a\x08\x2d\x50\x06\xc8\x35\x6c\x70\xb6\x12\x8f\x78\x30\x5d\x15\x0b\x9d\xdf\x41\xa6\x82\x2f\xb5\x04\x8d\x9b\x71\x0f\x32\xc7\x42\x17\x90\x59\x08\xd1\x3e\xbc\xf0\xd4\x98\x56\x07\x8a\x4d\x4e\xfb\xf8\x3f\x90\xad\x9d\x7b\xdc\xcf\x4a\x8f\x36\xc0\x9e\xa8\x98\x79\x49\x59\x6f\xf2\x92\xfb\x34\x48\xda\xed\xc3\xf2\xba\x5f\x34\x92\x86\x90\xf3\xab\xd3\x52\x6a\x13\x3c\x7e\x12\x01\xb0\x51\xfe\xcf\x8c\x5e\xa6\x17\xfc\x8f\xe4\x05\x5f\x98\x66\x9f\xd5\xba\x13\xcf\xde\x66\x79\xed\x35\xfa\xed\x24\xe7\x40\xd8\xf2\x43\xbf\x78\x97\x89\xa7\x51\x72\xcc\x5e\x18\xf8\x88\xa3\x0c\x5e\x39\x78\x6c\x39\xbc\x24\xb0\x00\xed\x0c\x58\x3b\x4d\xae\x48\x64\x50\x7f\x5f\x62\x7e\x0a\x07\x82\xc3\xa0\x9e\x4a\xcf\xc9\x16\xab\xb4\x9c\x52\xd8\xcf\x1c\xcf\x4a\x92\x36\x15\xaa\x6d\xf1\x0f\x31\xd4\x4d\x69\x5a\x41\x3c\x44\x67\x86\x50\xaf\xa9\xd0\x5d\xfb\xa2\x9b\xbb\x77\x50\x44\x11\xd5\xc5\x88\x1b\xe0\x74\x8d\xaa\x7d\x06\xd8\x4b\xa1\xd2\xfa\xb8\xd7\x4a\xc8\x71\x1e\xf2\x96\x08\xe1\x1d\x77\x77\xbc\x1d\x70\x3c\x6d\xec\xf1\x07\x64\xad\x0e\x1f\x4f\x9e\xc1\x25\xad\x96\x10\xac\x3c\xb4\xad\xd3\xc6\x16\x2f\x5a\x32\xe4\xb2\x9e\x41\x7a\x71\xb7\xb1\xbc\x66\xfe\x80\x18\xd7\xde\x26\xc8\x7a\xd1\xb1\x71\x53\x8f\x50\x4e\xd4\x8e\x07\xc7\xb9\x46\xe8\x67\x65\x35\xed\xb4\x3c\x57\xe3\x52\x4e\x91\xe8\x38\xd1\x3d\x1c\xc4\x50\xfc\x3f\x52\x3f\x6f\x0b\xb7\x2c\xee\x2b\xb7\x05\xe7\x93\xda\xf6\x36\xb1\xb2\xd1\x37\xb4\x43\xd4\x40\x59\x7e\xbd\xf4\xef\x09\x0d\x1e\x94\x06\xa9\x8b\xa7\x7a\xca\x9b\xa8\x68\xbe\x68\x42\x06\xc2\x12\x63\x1e\xae\xc4\x1e\x6b\x29\x35\xf0\xde\xd7\xef\x3d\xbb\xaf\x6f\x4b\xe0\xee\x3a\xdc\x28\x80\x61\x04\xd4\xaf\x77\x59\xb3\xe4\xd9\xbb\x72\xc5\xa0\xb7\x27\x10\x85\x55\x57\x94\x75\x03\x2c\x97\x1f\xfa\x45\x9b\xc3\xf6\x9b\x48\xbf\x42\x49\x94\xbb\x2c\x79\x24\x2b\x62\xb6\x30\x69\x61\xb7\x25\x53\x1b\x72\x9a\x0b\x6f\xe1\xb5\x53\x0e\xaf\xee\x68\x9b\xd7\xdc\x33\x97\x66\x92\xfe\xec\x9a\xfc\x71\x9c\xe8\xfe\x59\x6b\x36\xa6\xfd\x4f\x2c\xee\x2d\x3b\x3e\xe0\xce\xfa\xcf\x37\xb8\xcc\x53\xfe\xfd\x51\x1a\x89\x5c\x6b\x39\xf4\xb1\x9f\x76\xa1\xe6\xe3\xcd\x92\x60\xc9\xa5\xe2\x85\xa7\xe1\xf7\x03\x87\x51\xaf\xc9\x6a\xc4\x85\xa2\x8a\x30\x1d\x7a\xdd\x7a\xc0\x4b\x42\xac\x48\x49\xc1\x40\x6a\x83\x3a\x7b\x15\x56\xa1\xa4\xc0\xe8\xd7\x74\xdd\xfd\xe1\x3b\x80\xe4\x9b\x02\x02\xdf\xdf\x7c\x7f\xf3\x7f\x01\x00\x00\xff\xff\x3e\x72\x72\x95\x71\x7d\x00\x00")

func schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaJson,
		"schema.json",
	)
}

func schemaJson() (*asset, error) {
	bytes, err := schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4c, 0xf6, 0x6a, 0x43, 0x15, 0xe2, 0x74, 0xb4, 0xf0, 0x1f, 0x2e, 0x88, 0xf, 0x68, 0xf1, 0xe0, 0xfe, 0x7f, 0xc8, 0x52, 0x34, 0x89, 0xe8, 0x6, 0xcb, 0xdb, 0x74, 0x34, 0xe9, 0x4a, 0x3c, 0x86}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.json": schemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.json": &bintree{schemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
