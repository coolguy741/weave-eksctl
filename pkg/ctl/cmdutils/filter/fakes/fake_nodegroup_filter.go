// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/aws/aws-sdk-go/service/eks/eksiface"
	"github.com/weaveworks/eksctl/pkg/apis/eksctl.io/v1alpha5"
	"github.com/weaveworks/eksctl/pkg/ctl/cmdutils/filter"
)

type FakeNodegroupFilter struct {
	NewStub        func() *filter.NodeGroupFilter
	newMutex       sync.RWMutex
	newArgsForCall []struct {
	}
	newReturns struct {
		result1 *filter.NodeGroupFilter
	}
	newReturnsOnCall map[int]struct {
		result1 *filter.NodeGroupFilter
	}
	SetOnlyLocalStub        func(eksiface.EKSAPI, filter.StackLister, *v1alpha5.ClusterConfig) error
	setOnlyLocalMutex       sync.RWMutex
	setOnlyLocalArgsForCall []struct {
		arg1 eksiface.EKSAPI
		arg2 filter.StackLister
		arg3 *v1alpha5.ClusterConfig
	}
	setOnlyLocalReturns struct {
		result1 error
	}
	setOnlyLocalReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNodegroupFilter) New() *filter.NodeGroupFilter {
	fake.newMutex.Lock()
	ret, specificReturn := fake.newReturnsOnCall[len(fake.newArgsForCall)]
	fake.newArgsForCall = append(fake.newArgsForCall, struct {
	}{})
	stub := fake.NewStub
	fakeReturns := fake.newReturns
	fake.recordInvocation("New", []interface{}{})
	fake.newMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeNodegroupFilter) NewCallCount() int {
	fake.newMutex.RLock()
	defer fake.newMutex.RUnlock()
	return len(fake.newArgsForCall)
}

func (fake *FakeNodegroupFilter) NewCalls(stub func() *filter.NodeGroupFilter) {
	fake.newMutex.Lock()
	defer fake.newMutex.Unlock()
	fake.NewStub = stub
}

func (fake *FakeNodegroupFilter) NewReturns(result1 *filter.NodeGroupFilter) {
	fake.newMutex.Lock()
	defer fake.newMutex.Unlock()
	fake.NewStub = nil
	fake.newReturns = struct {
		result1 *filter.NodeGroupFilter
	}{result1}
}

func (fake *FakeNodegroupFilter) NewReturnsOnCall(i int, result1 *filter.NodeGroupFilter) {
	fake.newMutex.Lock()
	defer fake.newMutex.Unlock()
	fake.NewStub = nil
	if fake.newReturnsOnCall == nil {
		fake.newReturnsOnCall = make(map[int]struct {
			result1 *filter.NodeGroupFilter
		})
	}
	fake.newReturnsOnCall[i] = struct {
		result1 *filter.NodeGroupFilter
	}{result1}
}

func (fake *FakeNodegroupFilter) SetOnlyLocal(arg1 eksiface.EKSAPI, arg2 filter.StackLister, arg3 *v1alpha5.ClusterConfig) error {
	fake.setOnlyLocalMutex.Lock()
	ret, specificReturn := fake.setOnlyLocalReturnsOnCall[len(fake.setOnlyLocalArgsForCall)]
	fake.setOnlyLocalArgsForCall = append(fake.setOnlyLocalArgsForCall, struct {
		arg1 eksiface.EKSAPI
		arg2 filter.StackLister
		arg3 *v1alpha5.ClusterConfig
	}{arg1, arg2, arg3})
	stub := fake.SetOnlyLocalStub
	fakeReturns := fake.setOnlyLocalReturns
	fake.recordInvocation("SetOnlyLocal", []interface{}{arg1, arg2, arg3})
	fake.setOnlyLocalMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeNodegroupFilter) SetOnlyLocalCallCount() int {
	fake.setOnlyLocalMutex.RLock()
	defer fake.setOnlyLocalMutex.RUnlock()
	return len(fake.setOnlyLocalArgsForCall)
}

func (fake *FakeNodegroupFilter) SetOnlyLocalCalls(stub func(eksiface.EKSAPI, filter.StackLister, *v1alpha5.ClusterConfig) error) {
	fake.setOnlyLocalMutex.Lock()
	defer fake.setOnlyLocalMutex.Unlock()
	fake.SetOnlyLocalStub = stub
}

func (fake *FakeNodegroupFilter) SetOnlyLocalArgsForCall(i int) (eksiface.EKSAPI, filter.StackLister, *v1alpha5.ClusterConfig) {
	fake.setOnlyLocalMutex.RLock()
	defer fake.setOnlyLocalMutex.RUnlock()
	argsForCall := fake.setOnlyLocalArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeNodegroupFilter) SetOnlyLocalReturns(result1 error) {
	fake.setOnlyLocalMutex.Lock()
	defer fake.setOnlyLocalMutex.Unlock()
	fake.SetOnlyLocalStub = nil
	fake.setOnlyLocalReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNodegroupFilter) SetOnlyLocalReturnsOnCall(i int, result1 error) {
	fake.setOnlyLocalMutex.Lock()
	defer fake.setOnlyLocalMutex.Unlock()
	fake.SetOnlyLocalStub = nil
	if fake.setOnlyLocalReturnsOnCall == nil {
		fake.setOnlyLocalReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setOnlyLocalReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeNodegroupFilter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.newMutex.RLock()
	defer fake.newMutex.RUnlock()
	fake.setOnlyLocalMutex.RLock()
	defer fake.setOnlyLocalMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeNodegroupFilter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ filter.NodegroupFilter = new(FakeNodegroupFilter)
