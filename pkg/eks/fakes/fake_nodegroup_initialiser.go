// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/aws/amazon-ec2-instance-selector/v2/pkg/selector"
	"github.com/weaveworks/eksctl/pkg/apis/eksctl.io/v1alpha5"
	"github.com/weaveworks/eksctl/pkg/eks"
)

type FakeNodeGroupInitialiser struct {
	ExpandInstanceSelectorOptionsStub        func([]v1alpha5.NodePool, []string) error
	expandInstanceSelectorOptionsMutex       sync.RWMutex
	expandInstanceSelectorOptionsArgsForCall []struct {
		arg1 []v1alpha5.NodePool
		arg2 []string
	}
	expandInstanceSelectorOptionsReturns struct {
		result1 error
	}
	expandInstanceSelectorOptionsReturnsOnCall map[int]struct {
		result1 error
	}
	NewAWSSelectorSessionStub        func(v1alpha5.ClusterProvider) *selector.Selector
	newAWSSelectorSessionMutex       sync.RWMutex
	newAWSSelectorSessionArgsForCall []struct {
		arg1 v1alpha5.ClusterProvider
	}
	newAWSSelectorSessionReturns struct {
		result1 *selector.Selector
	}
	newAWSSelectorSessionReturnsOnCall map[int]struct {
		result1 *selector.Selector
	}
	NormalizeStub        func([]v1alpha5.NodePool, *v1alpha5.ClusterMeta) error
	normalizeMutex       sync.RWMutex
	normalizeArgsForCall []struct {
		arg1 []v1alpha5.NodePool
		arg2 *v1alpha5.ClusterMeta
	}
	normalizeReturns struct {
		result1 error
	}
	normalizeReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNodeGroupInitialiser) ExpandInstanceSelectorOptions(arg1 []v1alpha5.NodePool, arg2 []string) error {
	var arg1Copy []v1alpha5.NodePool
	if arg1 != nil {
		arg1Copy = make([]v1alpha5.NodePool, len(arg1))
		copy(arg1Copy, arg1)
	}
	var arg2Copy []string
	if arg2 != nil {
		arg2Copy = make([]string, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.expandInstanceSelectorOptionsMutex.Lock()
	ret, specificReturn := fake.expandInstanceSelectorOptionsReturnsOnCall[len(fake.expandInstanceSelectorOptionsArgsForCall)]
	fake.expandInstanceSelectorOptionsArgsForCall = append(fake.expandInstanceSelectorOptionsArgsForCall, struct {
		arg1 []v1alpha5.NodePool
		arg2 []string
	}{arg1Copy, arg2Copy})
	stub := fake.ExpandInstanceSelectorOptionsStub
	fakeReturns := fake.expandInstanceSelectorOptionsReturns
	fake.recordInvocation("ExpandInstanceSelectorOptions", []interface{}{arg1Copy, arg2Copy})
	fake.expandInstanceSelectorOptionsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeNodeGroupInitialiser) ExpandInstanceSelectorOptionsCallCount() int {
	fake.expandInstanceSelectorOptionsMutex.RLock()
	defer fake.expandInstanceSelectorOptionsMutex.RUnlock()
	return len(fake.expandInstanceSelectorOptionsArgsForCall)
}

func (fake *FakeNodeGroupInitialiser) ExpandInstanceSelectorOptionsCalls(stub func([]v1alpha5.NodePool, []string) error) {
	fake.expandInstanceSelectorOptionsMutex.Lock()
	defer fake.expandInstanceSelectorOptionsMutex.Unlock()
	fake.ExpandInstanceSelectorOptionsStub = stub
}

func (fake *FakeNodeGroupInitialiser) ExpandInstanceSelectorOptionsArgsForCall(i int) ([]v1alpha5.NodePool, []string) {
	fake.expandInstanceSelectorOptionsMutex.RLock()
	defer fake.expandInstanceSelectorOptionsMutex.RUnlock()
	argsForCall := fake.expandInstanceSelectorOptionsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeNodeGroupInitialiser) ExpandInstanceSelectorOptionsReturns(result1 error) {
	fake.expandInstanceSelectorOptionsMutex.Lock()
	defer fake.expandInstanceSelectorOptionsMutex.Unlock()
	fake.ExpandInstanceSelectorOptionsStub = nil
	fake.expandInstanceSelectorOptionsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNodeGroupInitialiser) ExpandInstanceSelectorOptionsReturnsOnCall(i int, result1 error) {
	fake.expandInstanceSelectorOptionsMutex.Lock()
	defer fake.expandInstanceSelectorOptionsMutex.Unlock()
	fake.ExpandInstanceSelectorOptionsStub = nil
	if fake.expandInstanceSelectorOptionsReturnsOnCall == nil {
		fake.expandInstanceSelectorOptionsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.expandInstanceSelectorOptionsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeNodeGroupInitialiser) NewAWSSelectorSession(arg1 v1alpha5.ClusterProvider) *selector.Selector {
	fake.newAWSSelectorSessionMutex.Lock()
	ret, specificReturn := fake.newAWSSelectorSessionReturnsOnCall[len(fake.newAWSSelectorSessionArgsForCall)]
	fake.newAWSSelectorSessionArgsForCall = append(fake.newAWSSelectorSessionArgsForCall, struct {
		arg1 v1alpha5.ClusterProvider
	}{arg1})
	stub := fake.NewAWSSelectorSessionStub
	fakeReturns := fake.newAWSSelectorSessionReturns
	fake.recordInvocation("NewAWSSelectorSession", []interface{}{arg1})
	fake.newAWSSelectorSessionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeNodeGroupInitialiser) NewAWSSelectorSessionCallCount() int {
	fake.newAWSSelectorSessionMutex.RLock()
	defer fake.newAWSSelectorSessionMutex.RUnlock()
	return len(fake.newAWSSelectorSessionArgsForCall)
}

func (fake *FakeNodeGroupInitialiser) NewAWSSelectorSessionCalls(stub func(v1alpha5.ClusterProvider) *selector.Selector) {
	fake.newAWSSelectorSessionMutex.Lock()
	defer fake.newAWSSelectorSessionMutex.Unlock()
	fake.NewAWSSelectorSessionStub = stub
}

func (fake *FakeNodeGroupInitialiser) NewAWSSelectorSessionArgsForCall(i int) v1alpha5.ClusterProvider {
	fake.newAWSSelectorSessionMutex.RLock()
	defer fake.newAWSSelectorSessionMutex.RUnlock()
	argsForCall := fake.newAWSSelectorSessionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNodeGroupInitialiser) NewAWSSelectorSessionReturns(result1 *selector.Selector) {
	fake.newAWSSelectorSessionMutex.Lock()
	defer fake.newAWSSelectorSessionMutex.Unlock()
	fake.NewAWSSelectorSessionStub = nil
	fake.newAWSSelectorSessionReturns = struct {
		result1 *selector.Selector
	}{result1}
}

func (fake *FakeNodeGroupInitialiser) NewAWSSelectorSessionReturnsOnCall(i int, result1 *selector.Selector) {
	fake.newAWSSelectorSessionMutex.Lock()
	defer fake.newAWSSelectorSessionMutex.Unlock()
	fake.NewAWSSelectorSessionStub = nil
	if fake.newAWSSelectorSessionReturnsOnCall == nil {
		fake.newAWSSelectorSessionReturnsOnCall = make(map[int]struct {
			result1 *selector.Selector
		})
	}
	fake.newAWSSelectorSessionReturnsOnCall[i] = struct {
		result1 *selector.Selector
	}{result1}
}

func (fake *FakeNodeGroupInitialiser) Normalize(arg1 []v1alpha5.NodePool, arg2 *v1alpha5.ClusterMeta) error {
	var arg1Copy []v1alpha5.NodePool
	if arg1 != nil {
		arg1Copy = make([]v1alpha5.NodePool, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.normalizeMutex.Lock()
	ret, specificReturn := fake.normalizeReturnsOnCall[len(fake.normalizeArgsForCall)]
	fake.normalizeArgsForCall = append(fake.normalizeArgsForCall, struct {
		arg1 []v1alpha5.NodePool
		arg2 *v1alpha5.ClusterMeta
	}{arg1Copy, arg2})
	stub := fake.NormalizeStub
	fakeReturns := fake.normalizeReturns
	fake.recordInvocation("Normalize", []interface{}{arg1Copy, arg2})
	fake.normalizeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeNodeGroupInitialiser) NormalizeCallCount() int {
	fake.normalizeMutex.RLock()
	defer fake.normalizeMutex.RUnlock()
	return len(fake.normalizeArgsForCall)
}

func (fake *FakeNodeGroupInitialiser) NormalizeCalls(stub func([]v1alpha5.NodePool, *v1alpha5.ClusterMeta) error) {
	fake.normalizeMutex.Lock()
	defer fake.normalizeMutex.Unlock()
	fake.NormalizeStub = stub
}

func (fake *FakeNodeGroupInitialiser) NormalizeArgsForCall(i int) ([]v1alpha5.NodePool, *v1alpha5.ClusterMeta) {
	fake.normalizeMutex.RLock()
	defer fake.normalizeMutex.RUnlock()
	argsForCall := fake.normalizeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeNodeGroupInitialiser) NormalizeReturns(result1 error) {
	fake.normalizeMutex.Lock()
	defer fake.normalizeMutex.Unlock()
	fake.NormalizeStub = nil
	fake.normalizeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNodeGroupInitialiser) NormalizeReturnsOnCall(i int, result1 error) {
	fake.normalizeMutex.Lock()
	defer fake.normalizeMutex.Unlock()
	fake.NormalizeStub = nil
	if fake.normalizeReturnsOnCall == nil {
		fake.normalizeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.normalizeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeNodeGroupInitialiser) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.expandInstanceSelectorOptionsMutex.RLock()
	defer fake.expandInstanceSelectorOptionsMutex.RUnlock()
	fake.newAWSSelectorSessionMutex.RLock()
	defer fake.newAWSSelectorSessionMutex.RUnlock()
	fake.normalizeMutex.RLock()
	defer fake.normalizeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeNodeGroupInitialiser) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ eks.NodeGroupInitialiser = new(FakeNodeGroupInitialiser)
