// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/1.10.3/2018-06-05/amazon-eks-nodegroup.yaml
// assets/1.10.3/2018-06-05/amazon-eks-service-role.yaml
// assets/1.10.3/2018-06-05/amazon-eks-vpc-sample.yaml

package eks

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _amazonEksNodegroupYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x3a\x6b\x93\xda\xc6\x96\xdf\xf9\x15\x27\xec\x54\xb1\xbb\x85\x24\x60\xc0\x0f\x65\x9d\x2d\xc2\x60\x87\x3b\x2f\x0a\xb0\x73\x73\x1d\xd7\x54\x23\x1d\x98\xce\x48\xdd\x4a\x77\xcb\x33\x13\xc7\xf7\xb7\xdf\xea\x96\x04\x7a\x20\x34\x76\x5c\x95\xf9\x30\xa0\xee\xf3\x3e\xa7\xcf\xa3\x85\x65\x59\xad\xf1\xcf\xcb\x15\x86\x51\x40\x14\xbe\xe6\x22\x24\xea\x1d\x0a\x49\x39\x73\xa1\x33\xe8\xf5\x7b\x56\xef\xa5\xd5\x7b\xd9\x69\x9d\xa1\xf4\x04\x8d\x54\xb2\x33\x0e\xc9\x1f\x9c\xc1\xf4\x7c\x09\x16\x5c\x71\x1f\xe1\x8d\xe0\x71\xd4\x69\xb5\xe6\x44\x90\x10\x15\x0a\xe9\xb6\x5a\x00\xe7\xf8\x78\x45\x42\x74\x5b\x00\x00\x05\x1a\xab\x5b\x84\xe9\x64\xa0\x21\x60\x4e\xa8\x00\xc5\x81\x04\x01\xbf\x87\xe5\xf2\x27\x20\x9e\x87\x52\xea\x35\x75\x8b\x40\x99\x54\x84\x79\x28\x0d\x99\xd5\x63\x84\x2e\x8c\x7f\x5e\xba\xee\x74\x32\x70\xdd\x73\x7c\xd4\x04\xcc\x17\xcd\x4c\xf3\xd5\x32\xcd\x42\xb2\xc5\x99\xef\x1e\x44\x32\x9b\xae\x3b\xf3\xab\x92\x8d\x2f\x67\x40\x7d\xd8\x70\x61\x98\x33\xad\xde\x4e\x02\x7b\x47\x3d\x5d\x31\x84\xab\x44\xb4\x6a\x19\x12\xa8\xc7\x08\x6b\xe8\xe5\x84\x5b\x2a\x41\xd9\x36\x25\xb5\x21\x71\xa0\x5c\x50\x03\x3b\x44\x9f\xc6\xa1\x59\x1e\x6b\xfb\xa0\xff\x8e\x04\x31\xca\x84\xa9\xa5\x41\x64\x48\x82\x60\xff\x98\xc3\x30\xcf\x01\x11\x5b\xdc\x3f\x3e\x94\x9e\x07\x85\x85\xf0\xb4\x88\x1f\x9e\xda\xa5\xed\x32\x78\x09\x7f\x68\x97\x1e\xcb\xdb\x15\xf8\x61\x79\xa1\xdf\x2b\xae\x8c\xec\xd2\x63\x79\x7b\x50\x5e\x18\x96\x17\xfa\x15\x90\x41\x11\xc6\x2b\xca\xed\x95\xe4\xf6\xca\x72\x7b\x65\xb9\xbd\xa1\xfd\xa2\xb8\x50\x14\xdb\x2b\x89\xed\x95\xc5\xf6\xca\x62\x7b\x23\xfb\x65\x79\xa1\x5f\xe4\x41\x8b\xde\xa1\x25\xef\xd0\xb2\x77\xe8\x69\x89\x07\x3d\xb5\x2b\x14\xfb\xcf\x0a\x2b\xa2\x44\x54\x94\x89\x8a\x32\x51\x51\x26\x2a\x8a\xc6\x15\x25\xe3\x8a\xb2\x71\x45\xd9\xb8\xa2\x6c\x5c\x31\x2c\x8b\xf9\xd0\x3f\xb0\x72\x5a\xa4\x1b\x95\xa2\x3f\x1a\x94\xc8\x46\x83\x32\x91\xa8\xac\x6d\x54\x56\x2e\x2a\x59\x6c\xc2\x99\x54\x82\x50\xa6\x0a\x19\x21\x8c\xa5\x82\x35\x02\x81\x8f\x24\xa0\x7e\x35\x43\x64\x99\x65\x1c\x2b\xbe\xf4\x48\x40\xd9\xd6\x64\xd5\x4b\xca\x96\xf4\x0f\xcc\xe7\xb1\xab\x38\x5c\xa3\xa8\x66\x9d\x4b\xca\x68\x18\x87\x20\xe9\x1f\x08\x7c\x93\x4b\xcd\x30\x5e\xbe\xb1\x8b\xb9\xa5\x5f\xcb\x90\x3c\x3c\x99\x21\x79\x78\x3a\xc3\x53\xcd\x70\x12\xc4\x52\xa1\x38\x52\x15\xbc\x04\x02\x18\x09\x11\x22\xc1\x3f\x52\x1f\x7d\xb8\xbf\x45\x66\xf2\x67\xb6\x7d\x4f\x24\x78\x02\x89\x42\xdf\x06\x98\x6d\x80\x2a\xa0\x12\x28\xf3\xb8\x10\xe8\xa9\xae\xc9\xb4\x12\xee\x69\x10\x00\xe3\x89\xed\xd7\x01\xea\xa2\xf2\x1b\xa7\x05\x62\x76\x35\x0d\xa7\xb6\x31\xba\xd4\x08\xfb\x96\xd1\xdf\x63\x04\xea\x23\x53\x74\x43\x51\xec\x72\xfc\xde\x0c\x87\x29\xa7\x46\x98\x70\xa6\x04\x0f\xe6\x01\x61\xb8\x44\x2f\x16\x54\x3d\x1a\xac\x1a\xcb\xc8\x14\x06\xb6\xc6\xc2\x7c\x53\x30\x88\x97\x50\x83\x48\x93\xb3\x0f\x56\xbd\x22\x13\x5d\xfd\x5a\x00\xef\x22\x2f\xab\x92\x15\x8e\xef\xe6\x93\x8c\xcd\x3d\x17\x77\x28\x1a\x6a\xf1\xbb\xf9\x24\x23\xbb\x8c\xd7\x0c\x95\xac\x53\x25\xd9\xd5\x6e\x15\x19\x6d\x09\x1e\x61\xda\x4d\x99\x5b\x73\x2c\x2e\xa8\x54\xff\x97\x53\xc4\xa0\x6b\x56\x3f\xb4\x5a\x97\x24\x8a\x28\xdb\x1a\x56\x97\xe4\x61\xce\x7d\x39\x47\xa1\x7d\x90\x30\xcf\x52\x7b\xf2\xb4\x83\x71\x61\xf0\x32\xdb\x7f\x38\x0c\x30\x7a\x91\x01\x0c\x1a\x21\x86\x35\x10\x83\xd3\x61\x06\xf2\xa2\x09\x64\xd4\x20\xe8\xa8\x49\xd0\x51\xa3\xa0\xa3\x66\x41\x77\x65\xe7\x18\x48\xbf\x4e\x99\xe7\xa7\xcf\xcd\x52\x56\x9a\xea\x94\xd9\xd5\xaa\x3a\x51\xf7\xc5\xeb\x08\x44\x93\x32\xfb\xfa\x76\x0c\x24\xcb\xdf\xb5\xca\xec\xba\xa2\x0a\x44\x7f\x90\x01\x1c\xd5\x36\x6c\xd2\x36\xac\xd7\xb6\xdf\x4f\x41\x6a\xe3\xb8\x97\xed\x37\xf0\x68\x8c\xe3\xb0\x39\x8e\x73\xfd\x59\x3d\x4c\x43\x20\x87\x4d\x81\x1c\x36\x06\x72\xd8\x1c\xc8\xb9\xb6\xef\x18\xcc\xa0\x8e\x4e\xe6\xfc\x5d\xd7\x50\x27\xcb\xbe\x8d\xa8\xe5\x93\x6b\x2c\xea\x61\x1a\x03\x3e\x6a\x8e\xe6\xe8\x48\x34\x67\x30\xa2\x29\x18\x45\xa3\x24\xa2\xf9\xe8\x89\x66\x61\x45\x43\x66\x16\x4d\x11\x2d\x1a\x23\x5a\x34\x47\xb4\x68\xce\xcc\xb9\x76\xb3\x36\x4c\xb2\x41\xac\x02\xf0\x22\xdb\xae\x4b\x21\x3b\xfc\xc3\x0c\x4e\x47\xd9\x7e\x8d\x04\xc3\x61\x06\x50\x67\x8c\x14\x22\xd7\x23\xd7\xaa\x9a\xeb\x9a\x0f\xc2\xb4\x2e\x51\x11\x9f\x28\xa2\x77\x4d\x45\x9e\x04\x3c\xf6\x93\xcb\x03\x5d\xdf\xdd\x19\x53\x28\x36\xc4\x4b\xf1\x77\x57\x02\xa6\xeb\x90\x19\x51\x2b\xfd\x04\xb8\x20\x6b\xdc\x59\x4d\xff\xf9\x59\xc7\xd8\x9e\x9e\x2f\xb3\x66\xa9\xbd\x03\xc8\xdf\x31\xec\x91\xac\x7c\x6b\x79\x68\xbd\xb6\xdb\xfa\x12\x81\x7e\x4e\xba\x20\xd3\xe0\x4d\x38\xdb\xd0\x6d\x2c\x8c\xda\xcd\xe2\x15\xda\xc9\xca\x4e\x4d\xd7\xdf\x0c\x97\x34\xeb\x15\xb8\xfc\xfd\x44\x75\x33\xb9\x1a\x29\xac\x67\xb7\x27\x5f\x61\x0c\x54\xba\x81\xfb\x52\x7b\x98\xbe\xb3\xb0\x92\xb6\x8c\xad\xd6\x02\x25\x8f\x85\x87\xc9\x25\x52\x5e\x9d\xb9\xe0\x1b\x1a\x60\xe5\x52\x67\x36\xbe\xd4\x81\x57\x00\x4a\xa2\x4f\xf0\x08\x85\xa2\xb8\xe3\x3e\x27\xea\xd6\x85\xb6\x93\x49\xb8\xe0\xc1\x7e\xd3\x82\xef\x16\xb8\x29\xb0\xd4\xfb\x65\x31\xf4\xda\x61\x19\x0c\xf4\x61\xc6\x63\x29\xe3\xd0\xa0\xce\x79\x40\xbd\xc7\x33\xee\xc5\x21\x32\xb5\x37\x4b\xe1\xee\x6d\x60\xf5\x7b\x56\xff\x79\x67\xb7\xbb\x54\x44\x61\x11\xc1\x82\xe9\x66\x83\x9e\x72\x93\xbb\xa1\x9c\x35\xe7\x82\x32\x8f\x46\xa4\xe0\x3a\x80\x25\x8a\x8f\xd4\xc3\xe2\xa2\x05\xe8\x0d\x6c\x62\x2e\xf5\xc8\xbd\xb4\x3d\x1e\xe6\xf6\xc7\x9e\x39\xd6\x05\x4f\x49\x25\xdd\xbd\x3a\x35\x86\xbd\x24\x8c\x6c\xd1\x4f\x94\x1d\x0b\x26\xf3\x72\x13\xc1\x5c\x72\x2f\x5d\x4a\x42\xd7\x7c\x89\x0c\x98\x93\x5c\x2d\x4e\xcf\x97\x49\x70\x69\xa3\x27\x04\xbe\x04\xf7\x66\x72\x35\xbb\xf9\x52\xb4\xc9\x40\x67\x08\x42\x19\x8a\x05\x6e\xa9\x54\xe2\x71\x81\xc4\xbf\x66\xc1\x63\xe6\xfe\x03\x43\xda\xd1\x11\xab\x26\x10\xcc\x5e\x61\x24\x5a\x16\x27\x3b\x3d\x47\x12\x33\xb6\xea\x09\xb6\x38\xab\xa6\x34\x72\x53\x9b\xfe\x33\x51\x9b\x3f\x51\x2b\xb2\xcd\x05\xf5\x39\x3e\xba\xf0\xdd\x32\x5e\x43\xfb\x2e\x5e\xa3\x60\xa8\x50\xda\x94\x3b\x29\x51\xe7\xe4\x53\x2e\x7b\x7e\xde\x1f\x5e\x73\xd7\xe8\x42\x87\xdf\x33\xf4\x3b\x07\xed\x30\x63\x5b\x81\x52\x3e\xc1\x1c\x29\xa4\x01\x3c\xc3\x08\x99\x2f\xaf\x99\x5b\xa5\x58\x63\xb6\xe2\x2d\xad\xb9\x2b\x36\x97\xa9\x8a\x83\xc7\xc3\x30\x66\xd4\x23\x0a\xe1\x9e\xaa\x5b\x40\xe2\xdd\x02\x57\xb7\x3b\x7b\x25\x02\xf8\xee\xfe\x7c\x1f\xaa\x01\x4b\x93\x76\x8a\x42\x37\xe1\xcc\xa2\xb9\xe0\x8a\x7b\x3c\x70\xa1\x63\xf5\xb3\xf3\xfa\x5a\xf0\x70\xce\x85\x72\xa1\x97\xb9\x84\x27\xcf\xcf\x46\xa3\xd3\xd1\x41\x53\x6a\x9c\x7c\x99\xfa\x3b\x4d\x9b\xce\xfb\xe7\xf1\x1a\x03\x3d\xa9\x13\xe6\x43\xc4\x7d\x73\x29\x2f\xd0\x43\xfa\x11\x73\x66\xa7\x9c\xc1\x46\xf0\xb0\xfe\x46\xe2\x9b\xf9\xe1\x89\xe5\x3c\xef\x16\xe5\x45\x15\xaf\xf4\x7b\x83\x51\x9d\x63\xf2\xb4\xa7\xc6\xb0\x2b\xfe\x35\xe7\x7f\xfa\xad\x9d\x52\x6b\xdd\x83\x87\xa0\xe8\xc2\x9d\x07\x0f\x7a\xe2\x89\x56\x3d\x43\xa9\x28\x33\xfe\xfe\xfa\x53\xf2\xc5\xee\x68\x90\xed\xef\x3c\x26\xd9\x91\xa8\x18\x3f\xef\xaa\xf1\x7c\x66\x2a\x6f\x4d\x36\x7a\xa2\xed\xff\x6a\x72\xda\x9b\x3d\xb3\xf0\x70\x78\x5a\x71\x84\x5e\xcb\x5f\x7e\x56\xac\x9a\xeb\x40\x0b\x0f\x0d\x86\xa3\x02\xfd\x09\x89\x88\x47\xd5\x63\x4e\xe8\xe3\xfd\xec\x05\x89\x99\x77\x5b\x68\x2c\xcd\x65\xec\x1e\x3f\x0f\x91\xf5\x1d\xe9\x85\xf9\x11\x26\x85\xe6\x3a\xbb\xef\x7e\xaa\x50\xef\xe6\x93\x7f\x71\x86\xb3\xdd\xbd\x6f\xa9\x0c\x67\x6d\x6c\x6d\x21\x2e\x0c\x00\x69\x85\x4d\x8a\x73\xb1\x0c\x5b\x27\x9f\x0a\x43\xc3\x67\x4b\x3f\xe6\x3a\x6b\xc1\x23\xb2\x25\x0a\xc7\x2a\x31\x83\x0b\x1d\x25\x62\xec\x1c\xa8\xfb\x9d\xa7\xd4\xfd\x4e\x5d\xdd\x7f\x1a\xc7\xb7\x91\x4f\x54\xda\xae\xed\x9a\xde\xbd\x29\x17\x3c\xd0\x1f\x09\xd4\xde\x66\x97\x94\x65\x6d\xb5\x9c\xb1\xac\x41\x85\x4e\x7f\xcf\xf6\x92\x3c\xfc\x48\x94\x77\x9b\xb8\x49\xef\xa4\x11\x9a\xf7\xfe\xf1\x40\x3d\x10\x49\xf5\x6d\x3a\xf7\xa8\x56\x24\x5e\x07\xd4\x9b\x45\x63\xdf\x37\xe9\xa5\x68\xdc\x19\x09\xcb\x43\x49\x75\x76\xc8\x4f\x22\x00\xd9\x1b\xe9\x1c\x5c\x61\x10\x2b\xbc\x53\xae\x12\xcb\x8d\x72\xd9\x7b\xf5\x04\xa8\x38\xba\x15\xd2\xc0\xa1\xc1\xe6\x50\x9e\x78\x2b\x51\x9c\xa5\x43\x7d\x9a\x11\x98\xeb\xfe\x48\x24\x3e\x1b\xe6\x5b\x7f\xbd\xfa\x0f\x4e\x99\x0b\xef\x0b\x23\x44\xbb\xdd\x2d\x3c\x17\x77\x01\xda\xff\xf5\x9d\xb3\xa6\xcc\x59\x13\x79\x0b\xd6\x03\xfe\xca\x4a\x08\x00\xed\xc9\xf8\x66\x32\x5d\xac\x66\xaf\x67\x93\xf1\x6a\x7a\x73\x36\x5b\x4c\x27\xab\xeb\xc5\x2f\xaf\x1c\x54\x9e\xb3\x8f\x5f\x27\xba\xa3\xed\x2e\xb4\x9f\x40\xe3\xf5\xec\x62\x7a\x33\x1f\xaf\x7e\x7a\x75\x52\x47\xdd\xf1\x88\xed\x09\x55\x47\xf0\xf2\xfa\x6c\x7a\xb1\x87\x4e\x88\xfd\xdb\xb1\xc9\xbd\x74\xf0\x4e\x1e\x47\xcb\xb1\x3f\x44\x47\x13\xb0\x06\xbd\xfe\x73\xab\xdf\xb7\x7a\x7d\x9b\x71\x11\x92\xc0\xfe\x4d\x72\x56\x47\x37\xbc\xf3\xa9\x00\x2b\x82\x5a\x7d\x9a\x31\x0f\x89\x52\x87\xe5\xc5\x22\x00\x8b\x67\x48\x3b\x85\xe0\x56\xa9\x48\xba\x8e\x23\x4f\xad\x58\x5a\xf7\x28\x95\x55\x1a\x21\x9d\xe4\xc9\xc2\x3b\xe9\xf4\xed\x7e\xcf\x3e\x75\x06\xbd\xfe\x0b\xab\xf7\xcc\xea\x8d\xbe\x42\x75\x72\x2f\x75\xcf\x63\xce\x2f\x02\xf1\x7d\x2b\xe4\x3e\x06\x60\x59\x32\xc9\x19\xe9\xb3\x39\x8a\x8e\x53\x91\x78\x0f\x67\xde\x2c\x1e\x71\x9e\xe6\x84\x77\x12\x7c\x53\xee\xd7\x68\x65\x75\xdc\xb2\x04\x6e\x29\x67\xaf\xda\x5d\xf8\x04\x0b\xdc\xb8\xd0\x36\xa9\x66\x61\x96\xdb\xf0\xb9\xdb\x06\xcb\xd0\xcf\x81\xe4\x32\x6c\x0a\xf0\x7b\x8c\xe2\x11\x3a\xd9\xdb\xc7\x4f\x9e\xce\x40\x1b\xd3\x3c\x8c\x63\x75\xcb\xf5\xe9\x34\xa7\x11\x0e\xed\xd8\x3e\x51\xa4\x0b\xc8\xfc\x88\x53\xa6\xdc\xdd\xb7\xcf\x1d\xf8\x01\x1c\x15\x46\x4e\x26\xf9\x4d\xca\xe2\x46\xa0\x8c\x03\x75\xd4\xbe\x1e\x51\xcd\xc8\xf0\x27\x6c\x05\x46\x07\xe5\xd2\x12\xc3\x9f\x40\xee\xef\xa0\xf3\x29\x12\x94\x29\x38\x19\x7c\xee\xc0\x9f\x20\xd1\x87\x8e\x74\xde\x77\x7f\x6d\x7f\x70\x9c\xad\x5e\x5a\x9b\xd4\x02\x96\x0f\x3f\x40\x25\x98\x77\x4e\xab\x3d\x5e\xe3\xe5\x6a\xba\xb8\x99\x5e\x9d\xcd\xaf\x67\x57\xab\x57\x27\xff\xfd\x45\xd2\x67\x06\x7b\x9a\xb4\xff\x53\x27\xc5\xec\x6a\x35\x5d\x5c\x8d\x2f\x6e\x66\x73\x2d\x81\x39\x2a\xd2\x9c\x0c\xd7\x71\xfa\xcf\x5e\xda\x83\xd1\xd0\x4e\x3f\x9d\x80\x28\x94\xca\x09\x51\x11\x4b\x3b\xd0\x09\xb8\x47\x02\x8b\x46\x1f\x87\xb5\x0c\xb4\x24\x16\x05\xd9\x2d\xe9\xdb\x3d\x29\x2f\x6c\xc1\xf9\x48\x84\x13\xd0\xb5\x49\x94\x01\x2a\xf3\x99\x9c\x97\x46\xf2\x93\x8b\xb7\x86\xdc\xd5\xf8\x72\xda\xad\x0b\x5c\x68\xff\x45\x2e\x8b\xe9\x9b\xd9\xf5\x55\xb7\xfe\xec\x24\x1c\x74\xb2\x97\x8f\x52\x61\xe8\xa7\x9f\x19\x33\x3b\x3d\xc0\x4f\x30\xd7\x3f\x6f\xe6\xd7\x67\xcb\x84\x57\x5b\x17\xad\xd7\x94\xf9\x33\x76\x49\xa2\xb6\x0b\xef\x4b\xaf\x89\x77\x02\x95\xab\xad\x96\x29\x05\x85\x0f\xdf\x56\xc0\x66\x7f\x7e\x03\x36\xb9\x00\xed\x9e\xe4\x1f\xfe\x12\xf9\xb3\xab\xe5\x4d\x16\x31\xb3\xf9\xab\x7e\xcf\xee\xf7\x7a\xb6\xfe\x5f\x87\x41\x37\xf0\xfe\x3d\xe4\x25\x80\x57\xaf\xa0\xdf\xb3\xff\x17\x3e\x7c\x80\xef\xf5\xac\xc4\xa0\x4c\xf6\xf9\xc0\x1e\x24\x64\xbf\x87\x4d\x6d\xc1\xdf\xe9\x5a\x44\xef\x9e\x94\x9e\xb7\xf0\x4d\x2c\x9a\xcf\x52\xe3\xb7\xab\x9f\xae\x17\xb3\xd5\x2f\x26\x5f\x75\x6b\x93\x58\xc3\xb1\x81\xe6\xd3\x39\x9b\x5e\xad\x6e\x26\xe3\x66\x3e\x4f\xd2\xb1\x96\xa1\x01\xf7\x54\x00\x3e\xc1\x90\x33\x4b\x60\xc0\x89\x5f\x6b\x93\x1d\xb8\x40\xa9\x88\x50\x90\x32\xaa\x43\x70\x78\xa4\x1c\xdd\x37\xe9\x46\xd0\xdb\x30\x4b\xd2\x2d\x23\x01\x58\x08\x27\xff\x0f\x55\xf8\xdd\x37\xcb\x92\x8a\x78\x77\x50\xce\x1c\x4b\xbd\xaa\xb3\x93\x4e\x1e\x47\xb0\x45\xfa\x3a\x61\x3f\xd4\x1e\xe7\x96\x14\xf9\x0a\xbb\x7c\xa2\xfa\x35\xf7\x82\x43\xff\x7d\x68\xe5\xbf\xb7\xae\x63\x15\xc5\xc9\x8f\x5f\x0e\xbf\x36\xa8\xfc\x20\xa6\xf0\xb3\x50\x10\xd9\xad\x7a\x36\x1d\xbe\x41\x35\x56\xaa\x42\xcc\x1e\x0b\xd6\x6a\xfd\x27\x00\x00\xff\xff\x9d\x9a\x4b\x62\xc8\x2b\x00\x00")

func amazonEksNodegroupYamlBytes() ([]byte, error) {
	return bindataRead(
		_amazonEksNodegroupYaml,
		"amazon-eks-nodegroup.yaml",
	)
}

func amazonEksNodegroupYaml() (*asset, error) {
	bytes, err := amazonEksNodegroupYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "amazon-eks-nodegroup.yaml", size: 11208, mode: os.FileMode(420), modTime: time.Unix(1528160269, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x96, 0x11, 0xc1, 0x79, 0xa, 0xf, 0x2d, 0xef, 0x8a, 0xa1, 0xb5, 0x89, 0xc8, 0xa5, 0x6f, 0xb8, 0x32, 0x76, 0x3f, 0x1d, 0x40, 0x40, 0x27, 0xf5, 0xe2, 0xad, 0xaf, 0x51, 0x80, 0x70, 0xf, 0xe9}}
	return a, nil
}

var _amazonEksServiceRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\xc1\x6e\x13\x31\x10\xbd\xfb\x2b\x86\x0a\x29\x27\x87\x4d\x2f\xa8\xbe\x59\x34\x45\x28\x2a\x54\xdd\xa8\x3d\x4f\xcd\x84\x5a\xf5\xda\xab\xf1\x98\x50\x10\xff\x8e\xec\xdd\x84\xe4\x82\xc4\x9e\x56\xf3\xde\xb3\xdf\xf3\x3c\xad\xb5\xb2\x8f\xfd\x96\x86\x31\xa0\xd0\x4d\xe2\x01\xe5\x81\x38\xfb\x14\x0d\x2c\x2e\xbb\x55\xa7\xbb\x2b\xdd\x5d\x2d\xd4\x35\x65\xc7\x7e\x94\x09\xb1\x03\xfe\x4c\x11\xd6\x9b\x1e\x7a\xe2\xef\xde\x11\xdc\xa7\x40\x0b\xa5\xd4\x3d\xe5\x54\xd8\x51\x36\x4a\x01\xd8\xc7\x7e\x26\x54\xfc\x26\xf1\xa4\x5c\x6f\x7a\xa3\x00\x00\xb6\xaf\x23\x99\xca\x32\xe6\x93\xbd\x35\xa6\xb2\x1a\x70\xc7\x69\x24\x16\x5f\xcf\x81\xf6\xd9\x9c\xcb\xd0\x8e\xb9\x4b\xc1\xbb\xd7\xeb\xe4\xca\x40\x51\x0e\x38\xc0\x99\xf3\x4b\xbd\xea\xf4\xea\xfd\xe2\x88\xf6\x82\x42\xe7\x02\x0d\xeb\xdd\x8e\x9c\x18\xb0\x21\xa4\xfd\x71\x5e\xaf\xf7\xd1\xf9\x11\x83\x39\x19\xc2\x21\xec\xf9\x50\x03\xbd\xe4\x25\xb6\x60\xb8\xcf\x4b\x97\x86\x13\xdc\xba\xf6\x66\xea\x94\x9f\x25\x9b\xbf\x71\x66\xe8\x16\x23\x7e\xa3\xaf\x53\x38\xcb\x31\x9f\xfa\x44\x8e\x06\xf7\xd9\x78\x1c\x4c\xfb\x19\x1b\xed\xdd\xf1\x39\x67\x67\x93\xfa\x7f\x84\x1f\x42\xc9\x42\x3c\x0b\xd5\x97\x22\x63\x91\x69\x79\xd5\x9c\xe5\xd9\xfb\x59\x01\xb6\xcf\x04\x9c\x02\x81\x3c\xa3\xb4\x1a\xec\x7d\x08\x50\x32\x81\x24\x70\x4c\x28\x54\xb7\x0a\x7c\x68\x03\xec\x12\xc3\xa6\x3c\x11\x47\x12\xca\xe0\xa6\x6b\x73\x3b\xfb\x01\x43\x21\x03\x6f\x3e\x92\x58\x91\x7f\x94\x66\x69\x39\x36\xc5\xfa\xc7\x98\xf8\xb8\xc9\xcf\x38\x54\x79\x5f\x9e\xe0\xe2\xed\xaf\xd6\xa6\x5e\xd0\xbd\xd4\xf9\x6f\x3d\xc7\xb8\x50\xea\x4f\x00\x00\x00\xff\xff\x8e\x04\x9e\x3d\xf0\x02\x00\x00")

func amazonEksServiceRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_amazonEksServiceRoleYaml,
		"amazon-eks-service-role.yaml",
	)
}

func amazonEksServiceRoleYaml() (*asset, error) {
	bytes, err := amazonEksServiceRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "amazon-eks-service-role.yaml", size: 752, mode: os.FileMode(420), modTime: time.Unix(1528160269, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x77, 0x23, 0xcd, 0x32, 0x2d, 0x53, 0x72, 0x52, 0x24, 0x1d, 0xb3, 0xb2, 0xd1, 0xf7, 0x9f, 0x60, 0x45, 0xa2, 0x85, 0xf4, 0x23, 0x64, 0xb5, 0xd3, 0x71, 0xfe, 0xae, 0xec, 0x48, 0x7b, 0xe2, 0xdc}}
	return a, nil
}

var _amazonEksVpcSampleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\x4d\x6f\xe3\x36\x10\xbd\xeb\x57\xcc\x1a\x05\xdc\x02\xb1\x57\x92\x8b\x20\xe6\xcd\x55\x3e\x9a\x6e\xbb\x6b\x58\x86\x03\xec\x62\x0f\xb4\x34\xb6\x89\x50\xa4\x40\x52\x09\xdc\xa2\xff\xbd\x10\x25\xcb\x94\x6d\x6d\x63\xec\x47\x90\x43\x40\xce\x90\xef\xcd\xe3\xcc\x78\x34\x18\x0c\xbc\xc9\x43\x3c\xc7\x2c\xe7\xd4\xe0\xad\x54\x19\x35\x0b\x54\x9a\x49\x41\xa0\x1f\xfa\x81\x3f\xf0\xc7\x03\x7f\xdc\xf7\xae\x51\x27\x8a\xe5\xa6\xb2\x4c\x32\xfa\xb7\x14\x70\xf3\x2e\x86\x98\x66\x39\x47\x58\x4c\xa3\xbe\xe7\x4d\xa9\xa2\x19\x1a\x54\x9a\x78\x1e\xc0\x22\x4f\x7e\xe3\x32\x79\x24\x1e\x00\xc0\x7c\x9b\x23\x81\xd8\x28\x26\xd6\x76\xe3\x1a\x57\xb4\xe0\x86\x40\x30\x0e\x87\xc1\xe5\xd5\xd0\x1f\xfa\x6f\x83\xcb\xda\xe6\xe0\xcd\x37\x08\xd1\xfd\xf5\x0c\x14\x15\x6b\x84\x95\x54\x60\x36\x16\x73\x08\xf3\x0d\xd3\xa0\x37\xb2\xe0\x29\x2c\x11\x28\x3c\x51\xce\x52\xc8\x15\x7b\xa2\x06\xe1\xe7\xd9\x6d\x04\xc1\x38\xb8\xfa\xc5\xb9\x61\x58\x92\x8b\x8b\xa5\x40\xe3\x07\x67\x31\xbc\xfc\xb5\xa4\x78\x75\x4c\x31\x62\xa9\xb2\x37\x59\x76\xda\xde\x0d\x7e\x00\xcf\xcc\x6c\x98\xd8\xd1\x75\x70\xc3\xb3\x70\x83\xf0\xea\x2c\xe0\xb0\x1b\x78\x74\x1e\xf0\x38\x3c\x0b\x78\x74\x04\xfc\x17\x1a\x9a\x52\x43\x4b\xc4\xc9\x43\x4c\x48\xc4\x65\x91\x56\xb9\x56\x5e\x44\xee\x85\x41\xb5\xa2\x09\x56\x9c\x9a\x1c\xba\x53\xb2\xc8\x75\xb5\x09\x30\xa8\xff\x03\xfc\x49\x97\xc8\x49\xb3\x04\x48\x77\xa4\x7b\x0f\x52\x3d\xa2\x82\xf7\x68\x9e\xa5\x7a\x84\x48\x8a\x15\x5b\x17\xca\x02\xf5\x9a\x13\x6e\x96\xee\x6f\x19\x34\xe9\xda\xda\x6c\xa5\xc9\x29\x4b\xd8\x69\xa9\x94\xf6\xbc\x19\x6a\x59\xa8\x04\x2d\xdc\x62\x1a\xb9\xda\x5b\x45\x6e\xa2\x90\x90\x52\x2c\xcb\x4e\xc9\x1c\x95\x61\xd8\xb0\x6b\x94\x26\x00\x6f\x66\xb8\x3a\x24\x7a\x23\xe8\x92\xe3\xb5\xd0\x71\x91\xe7\x52\x19\x02\x46\x15\x78\x68\xfc\x5d\x6a\x23\x68\x86\xba\x65\x9e\xd3\xf5\x5e\x62\x78\x87\x5b\x02\xef\x69\x86\x4d\x38\x0b\xca\x0b\x24\xf0\x26\x2e\x96\xd0\xff\xe9\x1f\x4b\x37\x36\x34\x79\x2c\xbd\xfe\x1d\x54\x65\x0f\x60\xdf\x50\xa0\xb9\xa3\x06\x9f\xe9\xd6\x8d\xb0\xb7\x0f\xf1\xc0\xab\xe7\x55\x7a\xd4\xcb\x89\x31\x34\xd9\x64\x28\x4c\xc7\xf1\x53\xae\xbd\x0e\xcd\x0e\xa0\xee\x53\x52\x49\x77\xb0\x5f\x7b\x2f\xf2\xa4\xf1\xa8\xab\x65\x26\x0b\x83\xf3\x52\xbb\xd3\xcf\xb5\xb7\x77\x30\x38\xbc\xf3\x2c\xbd\xa7\xc5\x92\xb3\xa4\x4e\x24\x7d\xe0\x5f\x65\xf7\xe9\x23\x0d\x75\x52\x57\x6c\x8e\x22\xd5\x1f\x04\x39\x29\x74\x77\x64\x1d\x41\xed\xa3\x6e\x62\x3b\x10\xc2\x76\x09\xc3\x84\xad\x39\x27\x73\xfd\xa1\xfd\x7b\xeb\xd7\x5e\xff\xf7\x30\x4e\x87\x3e\xfd\x00\x95\xd5\x9a\xdc\x16\x63\x0b\x46\x66\x36\x8d\xea\x1b\xc0\x0f\x3a\xc2\x99\x3c\x51\xc6\xe9\x92\x71\x66\xb6\x1f\xa5\xc0\x7d\x3f\xb8\x15\x84\xc4\xc8\x31\x31\xfb\xbd\x01\xf4\xfd\xbe\xb3\x2a\x7d\xee\xd0\x4c\x3e\xb6\xfa\x08\xc0\x0c\x57\x35\xd1\x19\xae\x99\x14\x47\x65\xec\xb5\x3c\x4f\x75\x98\x2a\x79\xda\x7e\x67\x27\x91\x2d\xda\xde\x71\xd1\xee\x00\x7b\xee\xcf\xd1\xd7\x8b\x1c\x7e\x2b\x91\x83\xef\x27\x72\xf8\xa3\x45\x0e\x5d\x91\x47\x5f\x2f\xf2\xe8\x5b\x89\x1c\x7e\x3f\x91\x47\x3f\x5a\xe4\x91\x2b\x72\xb0\x6f\x48\x13\xad\x65\xc2\xaa\x31\xe3\x0b\xca\x9f\x3c\xd0\xa1\x73\x75\xa2\xe9\x5a\x3b\xcc\x17\xb5\x47\xa7\xda\x5e\x81\x63\x78\x26\xc7\xd1\x2b\x70\x1c\xbd\x94\x63\x24\x85\x51\x92\x4f\x39\x15\x18\x63\x52\x28\x66\xb6\x76\x5e\xec\xe0\xe7\xba\x74\x30\xb2\xb6\xf6\x84\xcb\x0b\x6d\x50\x41\x22\xb3\xac\x10\x2c\xb1\xf1\xd8\xf9\x16\x9e\xab\x41\x53\xc8\x14\x75\xd7\x0c\xf1\xa1\x30\x79\x61\xaa\x2f\xa1\x5d\xb8\x9a\x1c\x0f\xd2\x13\xce\xeb\xf1\x59\x83\x33\x38\xbb\xe9\xff\x87\x64\x02\x3e\x41\xef\xa2\x77\x01\x9f\xda\x99\x77\xd1\x7e\xe4\xf6\x72\x04\x9f\xe1\xb3\xc5\x77\x05\x38\x45\x62\xe7\x00\xeb\xd2\xa3\xf9\xc4\x4a\x1a\x09\xac\xde\x90\x97\x82\xbf\x48\x90\x2f\x50\xef\x7c\xbc\x1d\x5b\xa7\x67\x1c\x7d\x07\x2e\xa6\x11\xdc\xa7\x2d\x88\x9d\xe2\xff\x05\x00\x00\xff\xff\x5d\xd0\x43\x77\xcf\x0e\x00\x00")

func amazonEksVpcSampleYamlBytes() ([]byte, error) {
	return bindataRead(
		_amazonEksVpcSampleYaml,
		"amazon-eks-vpc-sample.yaml",
	)
}

func amazonEksVpcSampleYaml() (*asset, error) {
	bytes, err := amazonEksVpcSampleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "amazon-eks-vpc-sample.yaml", size: 3791, mode: os.FileMode(420), modTime: time.Unix(1528215262, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x37, 0xc0, 0xb4, 0xcc, 0x5c, 0x16, 0x83, 0x4b, 0xa9, 0x40, 0x3e, 0xff, 0x5e, 0x7c, 0x8f, 0xa8, 0x49, 0xd3, 0x6e, 0xd9, 0x86, 0x70, 0xc0, 0x8a, 0x91, 0x82, 0xde, 0xf7, 0x71, 0x6f, 0xa4, 0x3b}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"amazon-eks-nodegroup.yaml": amazonEksNodegroupYaml,

	"amazon-eks-service-role.yaml": amazonEksServiceRoleYaml,

	"amazon-eks-vpc-sample.yaml": amazonEksVpcSampleYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"amazon-eks-nodegroup.yaml":    &bintree{amazonEksNodegroupYaml, map[string]*bintree{}},
	"amazon-eks-service-role.yaml": &bintree{amazonEksServiceRoleYaml, map[string]*bintree{}},
	"amazon-eks-vpc-sample.yaml":   &bintree{amazonEksVpcSampleYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
