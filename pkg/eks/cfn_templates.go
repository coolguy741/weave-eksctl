// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/1.10.3/2018-06-05/amazon-eks-nodegroup.yaml
// assets/1.10.3/2018-06-05/amazon-eks-service-role.yaml
// assets/1.10.3/2018-06-05/amazon-eks-vpc-sample.yaml

package eks

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _amazonEksNodegroupYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x3a\x6b\x73\xdb\xb6\xb2\xdf\xf5\x2b\xb6\xba\x9e\xd1\xbd\x77\x44\x52\x94\xa5\x3c\xd8\x9b\xde\x51\x65\x25\xd5\x49\x6c\x6b\x2c\x25\x3d\x3d\x69\xc6\x03\x91\x2b\x19\x35\x09\xb0\x00\x18\xdb\x4d\x73\x7e\xfb\x19\x80\xa4\xc4\x87\x28\x3a\x69\x66\x9a\x0f\x91\x00\xec\x7b\x17\xbb\x8b\x95\x2d\xcb\xea\x4c\x7e\x5e\xae\x30\x8a\x43\xa2\xf0\x25\x17\x11\x51\xef\x50\x48\xca\x99\x07\xbd\xe1\xc0\x1d\x58\x83\xe7\xd6\xe0\x79\xaf\x73\x86\xd2\x17\x34\x56\xe9\xc9\x24\x22\x7f\x70\x06\xb3\xd7\x4b\xb0\xe0\x82\x07\x08\xaf\x04\x4f\xe2\x5e\xa7\xb3\x20\x82\x44\xa8\x50\x48\xaf\xd3\x01\x78\x8d\x0f\x17\x24\x42\xaf\x03\x00\x50\xa2\xb1\xba\x41\x98\x4d\x87\x1a\x02\x16\x84\x0a\x50\x1c\x48\x18\xf2\x3b\x58\x2e\x7f\x02\xe2\xfb\x28\xa5\xde\x53\x37\x08\x94\x49\x45\x98\x8f\xd2\x90\x59\x3d\xc4\xe8\xc1\xe4\xe7\xa5\xe7\xcd\xa6\x43\xcf\x7b\x8d\x0f\x9a\x80\xf9\xa2\x99\x69\xbe\x5a\xa6\x79\x44\xb6\x38\x0f\xbc\x83\x48\xe6\xd0\xf3\xe6\x41\x5d\xb2\xc9\xf9\x1c\x68\x00\x1b\x2e\x0c\x73\xa6\xd5\xdb\x49\x60\xef\xa8\x67\x3b\x86\x70\x9d\x88\x56\x2d\x47\x02\xf5\x10\x63\x03\xbd\x82\x70\x4b\x25\x28\xdb\x66\xa4\x36\x24\x09\x95\x07\x6a\x68\x47\x18\xd0\x24\x32\xdb\x13\x6d\x1f\x0c\xde\x91\x30\x41\x99\x32\xb5\x34\x88\x8c\x48\x18\xee\x97\x05\x0c\xb3\x0e\x89\xd8\xe2\x7e\x79\x5f\x59\x0f\x4b\x1b\xd1\x69\x19\x3f\x3a\xb5\x2b\xc7\x55\xf0\x0a\xfe\xc8\xae\x2c\xab\xc7\x35\xf8\x51\x75\xc3\x1d\x94\x77\xc6\x76\x65\x59\x3d\x1e\x56\x37\x46\xd5\x0d\xb7\x06\x32\x2c\xc3\xf8\x65\xb9\xfd\x8a\xdc\x7e\x55\x6e\xbf\x2a\xb7\x3f\xb2\x9f\x95\x37\xca\x62\xfb\x15\xb1\xfd\xaa\xd8\x7e\x55\x6c\x7f\x6c\x3f\xaf\x6e\xb8\x65\x1e\xb4\xec\x1d\x5a\xf1\x0e\xad\x7a\x87\x9e\x56\x78\xd0\x53\xbb\x46\xd1\x7d\x52\xda\x11\x15\xa2\xa2\x4a\x54\x54\x89\x8a\x2a\x51\x51\x36\xae\xa8\x18\x57\x54\x8d\x2b\xaa\xc6\x15\x55\xe3\x8a\x51\x55\xcc\x7b\xf7\xc0\xce\x69\x99\x6e\x5c\x89\xfe\x78\x58\x21\x1b\x0f\xab\x44\xe2\xaa\xb6\x71\x55\xb9\xb8\x62\xb1\x29\x67\x52\x09\x42\x99\x2a\x65\x84\x28\x91\x0a\xd6\x08\x04\x3e\x92\x90\x06\xf5\x0c\x91\x67\x96\x49\xa2\xf8\xd2\x27\x21\x65\x5b\x93\x55\xcf\x29\x5b\xd2\x3f\xb0\x98\xc7\x2e\x92\x68\x8d\xa2\x9e\x75\xce\x29\xa3\x51\x12\x81\xa4\x7f\x20\xf0\x4d\x21\x35\xc3\x64\xf9\xca\x2e\xe7\x16\xb7\x91\x21\xb9\x7f\x34\x43\x72\xff\x78\x86\xa7\x9a\xe1\x34\x4c\xa4\x42\x71\xa4\x2a\xf8\x29\x04\x30\x12\x21\xc4\x82\x7f\xa4\x01\x06\x70\x77\x83\xcc\xe4\xcf\xfc\xf8\x8e\x48\xf0\x05\x12\x85\x81\x0d\x30\xdf\x00\x55\x40\x25\x50\xe6\x73\x21\xd0\x57\x7d\x93\x69\x25\xdc\xd1\x30\x04\xc6\x53\xdb\xaf\x43\xd4\x45\xe5\x37\x4e\x4b\xc4\xec\x7a\x1a\xce\x6c\x63\x74\x69\x10\xf6\x2d\xa3\xbf\x27\x08\x34\x40\xa6\xe8\x86\xa2\xd8\xe5\xf8\xbd\x19\x0e\x53\xce\x8c\x30\xe5\x4c\x09\x1e\x2e\x42\xc2\x70\x89\x7e\x22\xa8\x7a\x30\x58\x0d\x96\x91\x19\x0c\x6c\x8d\x85\xf9\xa6\x64\x10\x3f\xa5\x06\xb1\x26\x67\x1f\xac\x7a\x65\x26\xba\xfa\x75\x00\xde\xc5\x7e\x5e\x25\x6b\x1c\xdf\x2d\xa6\x39\x9b\x3b\x2e\x6e\x51\xb4\xd4\xe2\x77\x8b\x69\x4e\x76\x99\xac\x19\x2a\xd9\xa4\x4a\x7a\xaa\xdd\x2a\x72\xda\x12\x7c\xc2\xb4\x9b\x72\xb7\x16\x58\xbc\xa1\x52\xfd\x5f\x41\x11\x83\xae\x59\xfd\xa0\x79\x9d\x13\x46\xb6\x18\x2c\x78\x48\xfd\x87\x89\x60\xb2\x18\xbb\x53\x1e\x45\xe4\x0c\x43\x1a\x51\x85\x81\x26\xd4\xe9\x9c\x93\x38\xa6\x6c\x6b\xe0\xce\xc9\xfd\x82\x07\x72\x81\x42\xbb\x2d\xc5\xcc\xab\x41\xba\xda\xc1\x78\x30\x7c\x9e\x9f\xdf\x1f\x06\x18\x3f\xcb\x01\x86\xad\x10\xa3\x06\x88\xe1\xe9\x28\x07\x79\xd6\x06\x32\x6e\x11\x74\xdc\x26\xe8\xb8\x55\xd0\x71\xbb\xa0\xbb\x4a\x75\x0c\xc4\x6d\x52\xe6\xe9\xe9\x53\xb3\x95\x57\xb3\x26\x65\x76\xe5\xad\x49\xd4\x7d\xbd\x3b\x02\xd1\xa6\xcc\xbe\x24\x1e\x03\xc9\x53\x7e\xa3\x32\xbb\x46\xaa\x06\xe1\x0e\x73\x80\xa3\xda\x46\x6d\xda\x46\xcd\xda\xba\x6e\x06\xd2\x18\xc7\x83\xfc\xbc\x85\x47\x6b\x1c\x47\xed\x71\x5c\x68\xe9\x9a\x61\x5a\x02\x39\x6a\x0b\xe4\xa8\x35\x90\xa3\xf6\x40\x2e\x74\x8a\xc7\x60\x86\x4d\x74\x72\xe7\xef\x1a\x8d\x26\x59\xf6\x9d\x47\x23\x9f\x42\x2f\xd2\x0c\xd3\x1a\xf0\x71\x7b\x34\xc7\x47\xa2\x39\x87\x11\x6d\xc1\x28\x5a\x25\x11\xed\x57\x4f\xb4\x0b\x2b\x5a\x32\xb3\x68\x8b\x68\xd1\x1a\xd1\xa2\x3d\xa2\x45\x7b\x66\x2e\x74\xa8\x8d\x61\x92\xbf\xdd\x6a\x00\xcf\xf2\xe3\xa6\x14\xb2\xc3\x3f\xcc\xe0\x74\x9c\x9f\x37\x48\x30\x1a\xe5\x00\x4d\xc6\xc8\x20\x0a\x6d\x75\xa3\xaa\x85\x46\xfb\x20\x4c\xe7\x1c\x15\x09\x88\x22\xfa\xd4\x14\xf1\x69\xc8\x93\x20\x9d\x37\xe8\x96\xc0\x9b\x33\x85\x62\x43\xfc\x0c\x7f\x37\x45\x30\x8d\x8a\xcc\x89\x5a\xd9\x27\xc0\x1b\xb2\xc6\x9d\xd5\xf4\xbf\x20\x6f\x32\xbb\xb3\xd7\xcb\xbc\xbf\xea\xee\x00\x8a\x63\x89\x3d\x92\x55\xec\x46\x0f\xed\x37\x36\x68\x5f\x22\xd0\xcf\x69\xe3\x64\x7a\xc2\x29\x67\x1b\xba\x4d\x84\x51\xbb\x5d\xbc\x52\x07\x5a\x3b\x69\x78\x28\xb4\xc3\xa5\xfd\x7d\x0d\xae\x38\xd2\xa8\x1f\xa6\xd3\x94\xd2\x7e\x3e\x70\xf9\x0a\x63\xa0\xd2\x3d\xdf\x97\xda\xc3\xb4\xaa\xa5\x9d\xac\xcb\xec\x74\xae\x50\xf2\x44\xf8\x98\xce\x9d\x8a\xea\x2c\x04\xdf\xd0\x10\x6b\x73\xa0\xf9\xe4\x5c\x07\x5e\x09\x28\x8d\x3e\xc1\x63\x14\x8a\xe2\x8e\xfb\x82\xa8\x1b\x0f\xba\x4e\x2e\xe1\x15\x0f\xf7\x87\x16\x7c\x77\x85\x9b\x12\x4b\x7d\x5e\x15\x43\xef\x1d\x96\xc1\x40\x1f\x66\x3c\x91\x32\x89\x0c\x6a\xda\xdb\x9e\x71\x3f\x89\x90\xa9\xbd\x59\x4a\xe3\xba\xa1\xe5\x0e\x2c\xf7\x69\x6f\x77\xba\x54\x44\x61\x19\xc1\x82\xd9\x66\x83\xbe\xf2\xd2\x71\x52\xc1\x9a\x0b\x41\x99\x4f\x63\x52\x72\x1d\xc0\x12\xc5\x47\xea\x63\x79\xd3\x02\xf4\x87\x36\x31\x73\x40\x72\x27\x6d\x9f\x47\x85\xf3\x89\x6f\xae\x75\xc9\x53\x52\x49\x6f\xaf\x4e\x83\x61\xeb\x8d\x7c\x6a\xdc\xda\x7e\x6e\xdd\x03\xcf\xa6\xa3\x8f\x9e\x06\x3b\x9b\xb3\xd2\x23\x65\x59\x7e\x6b\xe9\x97\x1d\x31\x0f\x49\xfd\xa6\x2c\xbf\x1e\x33\x1a\x85\x77\x94\xfe\x67\xe4\x2e\x06\xec\x8a\x6c\x0b\x31\xf3\x1a\x1f\x3c\xf8\x6e\x99\xac\xa1\x7b\x9b\xac\x51\x30\x54\x28\x6d\xca\x9d\x8c\xa8\x73\xf2\xa9\x90\x9c\x3e\xef\xef\x86\x99\xfe\x79\xd0\xe3\x77\x0c\x83\xde\x41\x3b\xcc\xd9\x56\xa0\x94\x8f\x30\x47\x06\x69\x00\xcf\x30\x46\x16\xc8\x4b\xe6\xd5\x29\x36\x98\xad\x3c\x37\x35\xd3\x5b\x33\xde\x54\x1c\x7c\x1e\x45\x09\xa3\x3e\x51\x08\x77\x54\xdd\x00\x12\xff\x06\xb8\xba\xd9\xd9\x2b\x15\x20\xf0\xf6\xd7\xe7\x50\x8a\x5d\x9a\x5b\x5d\x16\xba\x0d\x67\x1e\x2f\x04\x57\xdc\xe7\xa1\x07\x3d\xcb\xcd\xaf\xc3\x4b\xc1\xa3\x05\x17\xca\x83\x41\xee\x12\x9e\xae\x9f\x8c\xc7\xa7\xe3\x83\xa6\xd4\x38\xc5\x2a\xf0\x77\x9a\x36\x7b\x81\xbf\x4e\xd6\x18\xea\xb7\x33\x61\x01\xc4\x3c\x30\x63\x72\x81\x3e\xd2\x8f\x58\x30\x3b\xe5\x0c\x36\x82\x47\xcd\x33\x82\x6f\xe6\x87\x47\x56\xcb\xa2\x5b\x94\x1f\xd7\xbc\xe2\x0e\x86\xe3\x26\xc7\x14\x69\xcf\x8c\x61\x57\xfc\x6b\xee\xff\xec\x5b\x3b\xa5\xd1\xba\x07\x2f\x41\xd9\x85\x3b\x0f\x1e\xf4\xc4\x23\xad\x7a\x86\x52\x51\x66\xfc\xfd\xf5\xb7\xe4\x8b\xdd\xd1\x22\xdb\xdf\x79\x4d\xf2\x2b\x51\x33\x7e\xd1\x55\x93\xc5\xdc\x14\xb6\x86\x6c\xf4\x48\xdb\xff\xd5\xe4\xb4\x37\x7b\x6e\xe1\xd1\xe8\xb4\xe6\x08\xbd\x57\x1c\x47\xd6\xac\x5a\x68\xf0\x4a\x8b\x16\xc3\x51\x81\xc1\x94\xc4\xc4\xa7\xea\xa1\x20\xf4\xf1\x76\xf1\x0d\x49\x98\x7f\x53\xea\xdb\xcc\x78\x74\x8f\x5f\x84\xc8\xcb\x7a\x36\xc2\x3e\xc2\xa4\xd4\xbb\xe6\x13\xe8\xc7\x0a\xf5\x6e\x31\xfd\x17\x67\x38\xdf\x4d\x62\x2b\x65\x38\xef\x12\x1b\x0b\x71\xa9\xbf\xce\x2a\x6c\x5a\x9c\xcb\x65\xd8\x3a\xf9\x54\xea\xc9\x3f\x5b\x7a\x59\x68\x5c\x05\x8f\xc9\x96\x28\x9c\xa8\xd4\x0c\x1e\xf4\x94\x48\xb0\x77\xa0\xee\xf7\x1e\x53\xf7\x7b\x4d\x75\xff\x71\x1c\xdf\xc6\x01\x51\x59\xef\xb8\xeb\x29\xf7\xa6\xbc\xe2\xa1\xfe\x48\xa1\xf6\x36\x3b\xa7\x2c\xef\x5a\xe5\x9c\xe5\xfd\x1f\xf4\xdc\x3d\xdb\x73\x72\xff\x23\x51\xfe\x4d\xea\x26\x7d\x92\x45\x68\xd1\xfb\xc7\x03\xf5\x40\x24\x35\x77\xc1\xdc\xa7\x5a\x91\x64\x1d\x52\x7f\x1e\x4f\x82\xc0\xa4\x97\xb2\x71\xe7\x24\xaa\xf6\xfc\xf5\xd6\xbc\xd8\xe8\x03\xe4\xbf\x11\x17\xe0\x4a\xef\x9c\xd2\xaf\xbc\x75\x62\x85\x97\x52\xfe\x4b\x77\x0a\x54\x7e\x19\x95\xd2\xc0\xa1\x77\xc3\xa1\x3c\xf1\x56\xa2\x38\xcb\xde\xcc\x59\x46\x60\x9e\xf7\x23\x91\xf8\x64\x54\xec\xac\xf5\xee\x3f\x38\x65\x1e\xbc\x2f\x75\xe8\xdd\x6e\xbf\xb4\x2e\x9f\x02\x74\xff\xeb\x3b\x67\x4d\x99\xb3\x26\xf2\x06\xac\x7b\xfc\x95\x55\x10\x00\xba\xd3\xc9\xf5\x74\x76\xb5\x9a\xbf\x9c\x4f\x27\xab\xd9\xf5\xd9\xfc\x6a\x36\x5d\x5d\x5e\xfd\xf2\xc2\x41\xe5\x3b\xfb\xf8\x75\xe2\x5b\xda\xed\x43\xf7\x11\x34\x5e\xce\xdf\xcc\xae\x17\x93\xd5\x4f\x2f\x4e\x9a\xa8\x3b\x3e\xb1\x7d\xa1\x9a\x08\x9e\x5f\x9e\xcd\xde\xec\xa1\x53\x62\xff\x76\x6c\x72\x27\x1d\xbc\x95\xc7\xd1\x0a\xec\x0f\xd1\xd1\x04\xac\xe1\xc0\x7d\x6a\xb9\xae\x35\x70\x6d\xc6\x45\x44\x42\xfb\x37\xc9\x59\x13\xdd\xe8\x36\xa0\x02\xac\x18\x1a\xf5\x69\xc7\x3c\x24\x4a\x13\x96\x9f\x88\x10\x2c\x9e\x23\xed\x14\x82\x1b\xa5\x62\xe9\x39\x8e\x3c\xb5\x12\x69\xdd\xa1\x54\x56\xe5\x85\xe6\xa4\x2b\x0b\x6f\xa5\xe3\xda\xee\xc0\x3e\x75\x86\x03\xf7\x99\x35\x78\x62\x0d\xc6\x5f\xa1\x3a\xb9\x93\xba\xe7\x31\xf7\x17\x81\x04\x81\x15\xf1\x00\x43\xb0\x2c\x99\xe6\x8c\x6c\x6d\xae\xa2\xe3\xd4\x24\xde\xc3\x99\xdf\xfa\x8e\x38\x4f\x73\xc2\x5b\x09\x81\x29\xf7\x6b\xb4\xf2\x3a\x6e\x59\x02\xb7\x94\xb3\x17\xdd\x3e\x7c\x82\x2b\xdc\x78\xd0\x35\xa9\xe6\xca\x6c\x77\xe1\x73\xbf\x0b\x96\xa1\x5f\x00\x29\x64\xd8\x0c\xe0\xf7\x04\xc5\x03\xf4\xf2\xdf\x03\x3f\xf9\x3a\x03\x6d\x4c\xf3\x30\x49\xd4\x0d\xd7\xb7\xd3\xdc\x46\x38\x74\x62\x07\x44\x91\x3e\x20\x0b\x62\x4e\x99\xf2\x76\xdf\x3e\xf7\xe0\x07\x70\x54\x14\x3b\xb9\xe4\xd7\x19\x8b\x6b\x81\x32\x09\xd5\x51\xfb\xfa\x44\xb5\x23\xc3\x9f\xb0\x15\x18\x1f\x94\x4b\x4b\x0c\x7f\x02\xb9\xbb\x85\xde\xa7\x58\x50\xa6\xe0\x64\xf8\xb9\x07\x7f\x82\xc4\x00\x7a\xd2\x79\xdf\xff\xb5\xfb\xc1\x71\xb6\x7a\x6b\x6d\x52\x0b\x58\x01\xfc\x00\xb5\x60\xde\x39\xad\xf1\x7a\x4d\x96\xab\xd9\xd5\xf5\xec\xe2\x6c\x71\x39\xbf\x58\xbd\x38\xf9\xef\x2f\x92\x3e\x37\xd8\xe3\xa4\xfd\x9f\x26\x29\xe6\x17\xab\xd9\xd5\xc5\xe4\xcd\xf5\x7c\xa1\x25\x30\x57\x45\x9a\x9b\xe1\x39\x8e\xfb\xe4\xb9\x3d\x1c\x8f\xec\xec\xd3\x09\x89\x42\xa9\x9c\x08\x15\xb1\xb4\x03\x9d\x90\xfb\x24\xb4\x68\xfc\x71\xd4\xc8\x40\x4b\x62\x51\x90\xfd\x8a\xbe\xfd\x93\xea\xc6\x16\x9c\x8f\x44\x38\x21\x5d\x9b\x44\x19\xa2\x32\x9f\xe9\x7d\x69\x25\x3f\x7d\xf3\xd6\x90\xbb\x98\x9c\xcf\xfa\x4d\x81\x0b\xdd\xbf\xc8\xe5\x6a\xf6\x6a\x7e\x79\xd1\x6f\xbe\x3b\x29\x07\x9d\xec\xe5\x83\x54\x18\x05\xd9\x67\xce\xcc\xce\x2e\xf0\x23\xcc\xf5\xcf\xeb\xc5\xe5\xd9\x32\xe5\xd5\xd5\x45\xeb\x25\x65\xc1\x9c\x9d\x93\xb8\xeb\xc1\xfb\xca\xaf\xb0\x3b\x81\xaa\xd5\x56\xcb\x94\x81\xc2\x87\x6f\x2b\x60\xbb\x3f\xbf\x01\x9b\x42\x80\xf6\x4f\x8a\x8b\xbf\x44\xfe\xec\x62\x79\x9d\x47\xcc\x7c\xf1\xc2\x1d\xd8\xee\x60\x60\xeb\xff\x9b\x30\xe8\x06\xde\xbf\x87\xa2\x04\xf0\xe2\x05\xb8\x03\xfb\x7f\xe1\xc3\x07\xf8\x5e\xbf\x95\x18\x54\xc9\x3e\x1d\xda\xc3\x94\xec\xf7\xb0\x69\x2c\xf8\x3b\x5d\xcb\xe8\xfd\x93\xca\x7a\x0b\xdf\xc4\xa2\xc5\x2c\x35\x79\xbb\xfa\xe9\xf2\x6a\xbe\xfa\xc5\xe4\xab\x7e\x63\x12\x6b\xb9\x36\xd0\x7e\x3b\xe7\xb3\x8b\xd5\xf5\x74\xd2\xce\xe7\x51\x3a\x36\x32\x34\xe0\xbe\x0a\x21\x20\x18\x71\x66\x09\x0c\x39\x09\x1a\x6d\xb2\x03\x17\x28\x15\x11\x0a\x32\x46\x4d\x08\x0e\x8f\x95\xa3\xfb\x26\xdd\x08\xfa\x1b\x66\x49\xba\x65\x24\x04\x0b\xe1\xe4\xff\xa1\x0e\xbf\xfb\x66\x59\x52\x11\xff\x16\xaa\x99\x63\xa9\x77\x75\x76\xd2\xc9\xe3\x08\xb6\xc8\xa6\xf5\xfb\x47\xed\x71\x6e\x69\x91\xaf\xb1\x2b\x26\xaa\x5f\x0b\xbf\x1f\xe8\x7f\x1f\x3a\xc5\xef\x9d\xcb\x44\xc5\x49\xfa\xe7\x28\x87\xa7\xf2\xb5\x3f\x51\x29\xfd\xa1\x26\x88\x7c\x68\x9d\xbf\x0e\x5f\xa1\x9a\x28\x55\x23\x66\x4f\x04\xeb\x74\xfe\x13\x00\x00\xff\xff\xf1\x7e\x73\x3e\x5a\x2b\x00\x00")

func amazonEksNodegroupYamlBytes() ([]byte, error) {
	return bindataRead(
		_amazonEksNodegroupYaml,
		"amazon-eks-nodegroup.yaml",
	)
}

func amazonEksNodegroupYaml() (*asset, error) {
	bytes, err := amazonEksNodegroupYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "amazon-eks-nodegroup.yaml", size: 11098, mode: os.FileMode(420), modTime: time.Unix(1530727465, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x98, 0xc8, 0xca, 0x11, 0x86, 0x93, 0xfd, 0x9c, 0x58, 0xb8, 0x3e, 0x36, 0x35, 0x66, 0xbd, 0x6d, 0x51, 0xf9, 0x25, 0x61, 0x51, 0xe8, 0xc0, 0x38, 0xea, 0x60, 0x52, 0xce, 0xdd, 0xb4, 0x22, 0x7d}}
	return a, nil
}

var _amazonEksServiceRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\xc1\x6e\x13\x31\x10\xbd\xfb\x2b\x86\x0a\x29\x27\x87\x4d\x2f\xa8\xbe\x59\x34\x45\x28\x2a\x54\xdd\xa8\x3d\x4f\xcd\x84\x5a\xf5\xda\xab\xf1\x98\x50\x10\xff\x8e\xec\xdd\x84\xe4\x82\xc4\x9e\x56\xf3\xde\xb3\xdf\xf3\x3c\xad\xb5\xb2\x8f\xfd\x96\x86\x31\xa0\xd0\x4d\xe2\x01\xe5\x81\x38\xfb\x14\x0d\x2c\x2e\xbb\x55\xa7\xbb\x2b\xdd\x5d\x2d\xd4\x35\x65\xc7\x7e\x94\x09\xb1\x03\xfe\x4c\x11\xd6\x9b\x1e\x7a\xe2\xef\xde\x11\xdc\xa7\x40\x0b\xa5\xd4\x3d\xe5\x54\xd8\x51\x36\x4a\x01\xd8\xc7\x7e\x26\x54\xfc\x26\xf1\xa4\x5c\x6f\x7a\xa3\x00\x00\xb6\xaf\x23\x99\xca\x32\xe6\x93\xbd\x35\xa6\xb2\x1a\x70\xc7\x69\x24\x16\x5f\xcf\x81\xf6\xd9\x9c\xcb\xd0\x8e\xb9\x4b\xc1\xbb\xd7\xeb\xe4\xca\x40\x51\x0e\x38\xc0\x99\xf3\x4b\xbd\xea\xf4\xea\xfd\xe2\x88\xf6\x82\x42\xe7\x02\x0d\xeb\xdd\x8e\x9c\x18\xb0\x21\xa4\xfd\x71\x5e\xaf\xf7\xd1\xf9\x11\x83\x39\x19\xc2\x21\xec\xf9\x50\x03\xbd\xe4\x25\xb6\x60\xb8\xcf\x4b\x97\x86\x13\xdc\xba\xf6\x66\xea\x94\x9f\x25\x9b\xbf\x71\x66\xe8\x16\x23\x7e\xa3\xaf\x53\x38\xcb\x31\x9f\xfa\x44\x8e\x06\xf7\xd9\x78\x1c\x4c\xfb\x19\x1b\xed\xdd\xf1\x39\x67\x67\x93\xfa\x7f\x84\x1f\x42\xc9\x42\x3c\x0b\xd5\x97\x22\x63\x91\x69\x79\xd5\x9c\xe5\xd9\xfb\x59\x01\xb6\xcf\x04\x9c\x02\x81\x3c\xa3\xb4\x1a\xec\x7d\x08\x50\x32\x81\x24\x70\x4c\x28\x54\xb7\x0a\x7c\x68\x03\xec\x12\xc3\xa6\x3c\x11\x47\x12\xca\xe0\xa6\x6b\x73\x3b\xfb\x01\x43\x21\x03\x6f\x3e\x92\x58\x91\x7f\x94\x66\x69\x39\x36\xc5\xfa\xc7\x98\xf8\xb8\xc9\xcf\x38\x54\x79\x5f\x9e\xe0\xe2\xed\xaf\xd6\xa6\x5e\xd0\xbd\xd4\xf9\x6f\x3d\xc7\xb8\x50\xea\x4f\x00\x00\x00\xff\xff\x8e\x04\x9e\x3d\xf0\x02\x00\x00")

func amazonEksServiceRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_amazonEksServiceRoleYaml,
		"amazon-eks-service-role.yaml",
	)
}

func amazonEksServiceRoleYaml() (*asset, error) {
	bytes, err := amazonEksServiceRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "amazon-eks-service-role.yaml", size: 752, mode: os.FileMode(420), modTime: time.Unix(1529181989, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x77, 0x23, 0xcd, 0x32, 0x2d, 0x53, 0x72, 0x52, 0x24, 0x1d, 0xb3, 0xb2, 0xd1, 0xf7, 0x9f, 0x60, 0x45, 0xa2, 0x85, 0xf4, 0x23, 0x64, 0xb5, 0xd3, 0x71, 0xfe, 0xae, 0xec, 0x48, 0x7b, 0xe2, 0xdc}}
	return a, nil
}

var _amazonEksVpcSampleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\x4d\x6f\xe3\x36\x10\xbd\xeb\x57\xcc\x1a\x05\xdc\x02\xb1\x57\x92\x8b\x20\xe6\xcd\x55\x3e\x9a\x6e\xbb\x6b\x58\x86\x03\xec\x62\x0f\xb4\x34\xb6\x89\x50\xa4\x40\x52\x09\xdc\xa2\xff\xbd\x10\x25\xcb\x94\x6d\x6d\x63\xec\x47\x90\x43\x40\xce\x90\xef\xcd\xe3\xcc\x78\x34\x18\x0c\xbc\xc9\x43\x3c\xc7\x2c\xe7\xd4\xe0\xad\x54\x19\x35\x0b\x54\x9a\x49\x41\xa0\x1f\xfa\x81\x3f\xf0\xc7\x03\x7f\xdc\xf7\xae\x51\x27\x8a\xe5\xa6\xb2\x4c\x32\xfa\xb7\x14\x70\xf3\x2e\x86\x98\x66\x39\x47\x58\x4c\xa3\xbe\xe7\x4d\xa9\xa2\x19\x1a\x54\x9a\x78\x1e\xc0\x22\x4f\x7e\xe3\x32\x79\x24\x1e\x00\xc0\x7c\x9b\x23\x81\xd8\x28\x26\xd6\x76\xe3\x1a\x57\xb4\xe0\x86\x40\x30\x0e\x87\xc1\xe5\xd5\xd0\x1f\xfa\x6f\x83\xcb\xda\xe6\xe0\xcd\x37\x08\xd1\xfd\xf5\x0c\x14\x15\x6b\x84\x95\x54\x60\x36\x16\x73\x08\xf3\x0d\xd3\xa0\x37\xb2\xe0\x29\x2c\x11\x28\x3c\x51\xce\x52\xc8\x15\x7b\xa2\x06\xe1\xe7\xd9\x6d\x04\xc1\x38\xb8\xfa\xc5\xb9\x61\x58\x92\x8b\x8b\xa5\x40\xe3\x07\x67\x31\xbc\xfc\xb5\xa4\x78\x75\x4c\x31\x62\xa9\xb2\x37\x59\x76\xda\xde\x0d\x7e\x00\xcf\xcc\x6c\x98\xd8\xd1\x75\x70\xc3\xb3\x70\x83\xf0\xea\x2c\xe0\xb0\x1b\x78\x74\x1e\xf0\x38\x3c\x0b\x78\x74\x04\xfc\x17\x1a\x9a\x52\x43\x4b\xc4\xc9\x43\x4c\x48\xc4\x65\x91\x56\xb9\x56\x5e\x44\xee\x85\x41\xb5\xa2\x09\x56\x9c\x9a\x1c\xba\x53\xb2\xc8\x75\xb5\x09\x30\xa8\xff\x03\xfc\x49\x97\xc8\x49\xb3\x04\x48\x77\xa4\x7b\x0f\x52\x3d\xa2\x82\xf7\x68\x9e\xa5\x7a\x84\x48\x8a\x15\x5b\x17\xca\x02\xf5\x9a\x13\x6e\x96\xee\x6f\x19\x34\xe9\xda\xda\x6c\xa5\xc9\x29\x4b\xd8\x69\xa9\x94\xf6\xbc\x19\x6a\x59\xa8\x04\x2d\xdc\x62\x1a\xb9\xda\x5b\x45\x6e\xa2\x90\x90\x52\x2c\xcb\x4e\xc9\x1c\x95\x61\xd8\xb0\x6b\x94\x26\x00\x6f\x66\xb8\x3a\x24\x7a\x23\xe8\x92\xe3\xb5\xd0\x71\x91\xe7\x52\x19\x02\x46\x15\x78\x68\xfc\x5d\x6a\x23\x68\x86\xba\x65\x9e\xd3\xf5\x5e\x62\x78\x87\x5b\x02\xef\x69\x86\x4d\x38\x0b\xca\x0b\x24\xf0\x26\x2e\x96\xd0\xff\xe9\x1f\x4b\x37\x36\x34\x79\x2c\xbd\xfe\x1d\x54\x65\x0f\x60\xdf\x50\xa0\xb9\xa3\x06\x9f\xe9\xd6\x8d\xb0\xb7\x0f\xf1\xc0\xab\xe7\x55\x7a\xd4\xcb\x89\x31\x34\xd9\x64\x28\x4c\xc7\xf1\x53\xae\xbd\x0e\xcd\x0e\xa0\xee\x53\x52\x49\x77\xb0\x5f\x7b\x2f\xf2\xa4\xf1\xa8\xab\x65\x26\x0b\x83\xf3\x52\xbb\xd3\xcf\xb5\xb7\x77\x30\x38\xbc\xf3\x2c\xbd\xa7\xc5\x92\xb3\xa4\x4e\x24\x7d\xe0\x5f\x65\xf7\xe9\x23\x0d\x75\x52\x57\x6c\x8e\x22\xd5\x1f\x04\x39\x29\x74\x77\x64\x1d\x41\xed\xa3\x6e\x62\x3b\x10\xc2\x76\x09\xc3\x84\xad\x39\x27\x73\xfd\xa1\xfd\x7b\xeb\xd7\x5e\xff\xf7\x30\x4e\x87\x3e\xfd\x00\x95\xd5\x9a\xdc\x16\x63\x0b\x46\x66\x36\x8d\xea\x1b\xc0\x0f\x3a\xc2\x99\x3c\x51\xc6\xe9\x92\x71\x66\xb6\x1f\xa5\xc0\x7d\x3f\xb8\x15\x84\xc4\xc8\x31\x31\xfb\xbd\x01\xf4\xfd\xbe\xb3\x2a\x7d\xee\xd0\x4c\x3e\xb6\xfa\x08\xc0\x0c\x57\x35\xd1\x19\xae\x99\x14\x47\x65\xec\xb5\x3c\x4f\x75\x98\x2a\x79\xda\x7e\x67\x27\x91\x2d\xda\xde\x71\xd1\xee\x00\x7b\xee\xcf\xd1\xd7\x8b\x1c\x7e\x2b\x91\x83\xef\x27\x72\xf8\xa3\x45\x0e\x5d\x91\x47\x5f\x2f\xf2\xe8\x5b\x89\x1c\x7e\x3f\x91\x47\x3f\x5a\xe4\x91\x2b\x72\xb0\x6f\x48\x13\xad\x65\xc2\xaa\x31\xe3\x0b\xca\x9f\x3c\xd0\xa1\x73\x75\xa2\xe9\x5a\x3b\xcc\x17\xb5\x47\xa7\xda\x5e\x81\x63\x78\x26\xc7\xd1\x2b\x70\x1c\xbd\x94\x63\x24\x85\x51\x92\x4f\x39\x15\x18\x63\x52\x28\x66\xb6\x76\x5e\xec\xe0\xe7\xba\x74\x30\xb2\xb6\xf6\x84\xcb\x0b\x6d\x50\x41\x22\xb3\xac\x10\x2c\xb1\xf1\xd8\xf9\x16\x9e\xab\x41\x53\xc8\x14\x75\xd7\x0c\xf1\xa1\x30\x79\x61\xaa\x2f\xa1\x5d\xb8\x9a\x1c\x0f\xd2\x13\xce\xeb\xf1\x59\x83\x33\x38\xbb\xe9\xff\x87\x64\x02\x3e\x41\xef\xa2\x77\x01\x9f\xda\x99\x77\xd1\x7e\xe4\xf6\x72\x04\x9f\xe1\xb3\xc5\x77\x05\x38\x45\x62\xe7\x00\xeb\xd2\xa3\xf9\xc4\x4a\x1a\x09\xac\xde\x90\x97\x82\xbf\x48\x90\x2f\x50\xef\x7c\xbc\x1d\x5b\xa7\x67\x1c\x7d\x07\x2e\xa6\x11\xdc\xa7\x2d\x88\x9d\xe2\xff\x05\x00\x00\xff\xff\x5d\xd0\x43\x77\xcf\x0e\x00\x00")

func amazonEksVpcSampleYamlBytes() ([]byte, error) {
	return bindataRead(
		_amazonEksVpcSampleYaml,
		"amazon-eks-vpc-sample.yaml",
	)
}

func amazonEksVpcSampleYaml() (*asset, error) {
	bytes, err := amazonEksVpcSampleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "amazon-eks-vpc-sample.yaml", size: 3791, mode: os.FileMode(420), modTime: time.Unix(1529181989, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x37, 0xc0, 0xb4, 0xcc, 0x5c, 0x16, 0x83, 0x4b, 0xa9, 0x40, 0x3e, 0xff, 0x5e, 0x7c, 0x8f, 0xa8, 0x49, 0xd3, 0x6e, 0xd9, 0x86, 0x70, 0xc0, 0x8a, 0x91, 0x82, 0xde, 0xf7, 0x71, 0x6f, 0xa4, 0x3b}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"amazon-eks-nodegroup.yaml": amazonEksNodegroupYaml,

	"amazon-eks-service-role.yaml": amazonEksServiceRoleYaml,

	"amazon-eks-vpc-sample.yaml": amazonEksVpcSampleYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"amazon-eks-nodegroup.yaml":    &bintree{amazonEksNodegroupYaml, map[string]*bintree{}},
	"amazon-eks-service-role.yaml": &bintree{amazonEksServiceRoleYaml, map[string]*bintree{}},
	"amazon-eks-vpc-sample.yaml":   &bintree{amazonEksVpcSampleYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
