// Code generated by go-bindata.
// sources:
// assets/10-eksclt.al2.conf
// assets/bootstrap.al2.sh
// assets/bootstrap.ubuntu.sh
// assets/kubelet-config.json
// DO NOT EDIT!

package nodebootstrap

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __10EkscltAl2Conf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x41\x6b\xdb\x4e\x10\xc5\xef\xfa\x14\x0b\xc9\xe1\xff\x07\xaf\x14\x3b\x6e\x0e\x01\x1d\x4c\xad\x84\x80\x6b\x87\x28\xa1\x85\xb6\x98\xf5\xee\xd8\x4c\xbd\x9a\x5d\x66\x57\xb6\x53\x93\xef\x5e\x64\x4b\xa9\x4b\x42\xe9\x4d\x9a\xdf\xe8\xbd\x99\x37\x3a\x13\xb0\x0e\x3a\x5a\x19\x3c\x68\x5c\xa2\x16\xe1\x39\x44\xa8\x8c\x30\xec\xbc\x44\x12\x35\x61\x14\x4b\xc7\x62\x5d\x2f\xc0\x42\xec\x1d\x5e\x46\x95\xfa\xe9\x48\x4c\x90\xea\x9d\x18\x88\xff\x46\x93\xc1\xff\x49\xf2\xb5\x04\xde\xa0\x86\xef\xc9\x99\x98\x38\xad\xac\xa8\x20\x2a\xa3\xa2\x12\x5e\xb1\xaa\x20\x02\x87\x6b\xf1\x50\xdc\xde\xcd\xa6\x3d\x31\xfa\x5c\xce\xc7\xc5\xcd\xe8\x69\xf2\x38\x3f\xd6\x92\x82\x36\xc8\x8e\x2a\xa0\x78\x83\x16\xf2\x0c\xa2\xce\x8e\x23\x66\x9d\x56\x0a\xb4\x49\xce\xc4\xad\x75\x0b\x65\x85\x22\x23\x42\x54\x11\xf5\x1f\x1e\x9f\x46\x5f\xe6\xf7\xb3\x71\xd9\x13\x1f\x27\x4f\xe5\x63\xf1\x30\x1f\x4f\xcb\xbf\xca\xb7\xfb\xb5\xea\xc7\xf1\xc9\x91\x7c\x47\x7c\x3a\x1b\x17\xf3\xbb\xfb\x7f\x92\xb3\x8d\xd0\x41\x34\x29\x76\xa0\xcb\xa8\x38\xe6\x27\x8f\x59\x1d\x38\x5b\x20\x75\x1f\x88\x6f\x89\x10\x52\x92\x33\x20\xd1\xe7\xe7\xfb\xd6\xec\xa5\x05\xda\xd6\x21\x02\x4b\x43\x21\x3f\xdf\x9f\x2c\xd7\x35\x54\x6a\x27\xbd\x33\x0d\xed\x42\xe8\x90\xb2\xd6\x6d\xa5\x67\xdc\xa0\x85\x15\x98\x3c\x72\x0d\x2d\xf3\xce\x48\xa4\x25\x2b\xa9\x1d\x45\x85\x04\x2c\xb1\x52\x2b\xc8\xaf\x2e\x06\xc3\x8b\x7e\x7f\x78\x39\xfc\x30\x48\xcd\x9a\x53\xd0\x9c\x9e\xef\xdf\x5e\xef\x25\x55\x87\xdf\x42\x6d\x43\xaa\x5d\xd5\x24\x91\x79\x55\x07\x90\xaa\x32\x57\xc3\xeb\xcb\xb4\xff\xba\x84\xab\x8d\xf4\xec\x36\x68\x80\x73\xb5\x0d\x1d\x20\x94\x0b\x24\x69\x90\xf3\xcc\xf9\x98\x69\xc2\x26\x9d\x13\xac\x1d\x2d\x8f\xbc\x49\xbb\xe1\x04\x31\x35\x5d\xc7\xeb\xf0\x5c\x53\xc4\x0a\x72\xe3\xf4\x1a\xb8\x8b\x15\xe2\xd6\xf1\x5a\x7a\x5b\xaf\x90\x72\x4d\xd8\x02\x86\x15\x1e\x72\x6d\x82\x3f\xcd\xa5\x39\x4b\x63\x89\xab\x37\xe7\x3d\x96\xd3\x67\x55\xd9\xdf\xee\xef\x35\x5a\x88\x2d\x4a\x7f\x04\x47\xc9\xaf\x00\x00\x00\xff\xff\xa2\x51\x55\xb0\x76\x03\x00\x00")

func _10EkscltAl2ConfBytes() ([]byte, error) {
	return bindataRead(
		__10EkscltAl2Conf,
		"10-eksclt.al2.conf",
	)
}

func _10EkscltAl2Conf() (*asset, error) {
	bytes, err := _10EkscltAl2ConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "10-eksclt.al2.conf", size: 886, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapAl2Sh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcb\x31\x8b\xc2\x40\x14\x04\xe0\x7e\x7f\xc5\x5e\xee\x8a\xb3\xd8\x7d\x28\x51\xb0\xd0\x4a\x0b\x1b\xf5\x1f\xc8\xcb\x66\x20\x21\x2f\xbb\x92\x7d\x09\xf8\xef\x05\x09\x92\x6a\xe0\x9b\x99\xdf\x1f\xaa\xda\x48\xb9\xb1\x0e\xa3\x31\x08\x4d\xb2\xc5\xf5\x76\x3a\x3f\x2e\xf7\xc3\xdf\x7f\x18\x07\xb1\xeb\xdd\xde\x6f\xb6\xa5\x9f\x93\x84\x15\x59\xa9\x87\xb2\xab\x59\x99\x24\x05\x16\xd7\x3e\xa7\x72\x55\xd8\xa3\x25\x68\x20\x74\x39\xa8\x50\x37\x56\x10\xa8\xff\x4c\x3c\xe2\x64\x4c\x7e\x65\x45\x1f\x54\x6c\xcd\xe8\x53\x74\x03\x24\x71\xbd\x70\x44\xae\x04\x76\xfe\x2e\x8a\xac\x3c\xe8\xd7\xdf\x01\x00\x00\xff\xff\x09\x75\x8b\xb5\xbc\x00\x00\x00")

func bootstrapAl2ShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapAl2Sh,
		"bootstrap.al2.sh",
	)
}

func bootstrapAl2Sh() (*asset, error) {
	bytes, err := bootstrapAl2ShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.al2.sh", size: 188, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapUbuntuSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x94\x61\x6b\xe3\x46\x13\xc7\xdf\xeb\x53\xcc\xe3\x33\x3c\x09\xdc\x4a\x49\xce\x17\xe8\x81\x4a\xc3\x39\x2d\x47\xd3\xf8\x48\x72\x5c\xa1\x14\x33\xde\x1d\x59\x8b\x57\x3b\x62\x77\x64\x35\x17\xf2\xdd\xcb\x5a\x96\xcf\x09\xb4\xc5\x2f\xac\x9d\xf9\xcd\x68\x76\xe6\xaf\x79\xf3\xbf\x62\x65\x7d\xb1\xc2\x58\x83\xa2\x2e\xcb\x48\xd7\x0c\x93\xdb\xc5\xfc\x7a\xf9\xe9\x73\x39\x3d\xd1\x5d\x70\x70\x7e\xf9\x43\x7e\xf1\x7e\x96\xef\xff\x0b\x87\x42\x51\x8a\x86\x04\x95\x41\xc1\xc2\xb1\x46\xa7\x6c\xbb\x9d\x9d\x4e\xe0\x47\x28\x48\x74\x41\x9b\xa8\xc5\x15\x9b\x6e\x45\x8e\x24\xdf\x21\x39\xf9\x6d\x96\x45\x8f\x2d\xa0\xb3\x18\x61\xef\x55\xb4\x89\xf9\xfe\x79\xb4\xbd\xc6\xb4\xb8\x03\xa6\xc5\x8d\xb6\x01\x8b\xc2\xed\x71\xb2\x2c\x3e\x46\xa1\x26\x71\x81\x22\x89\xaa\xd0\x3a\x32\x59\x76\x92\x01\xbc\x81\x87\xc5\x7c\xf1\x01\xa4\xa6\x48\x10\x6b\xee\x9c\x81\x15\x81\x63\xde\x90\x01\x14\xa0\x2d\x85\x47\x10\xdb\xd0\x98\x14\xa2\x60\x90\x08\x5d\xfb\x76\x97\xa1\xaf\xad\xae\xc1\x46\xe8\x6b\x14\xe8\x09\x0c\x83\xf5\x70\x75\x73\x01\x27\x07\xdf\x0a\x23\x19\x60\x0f\xad\x43\xeb\x61\xa8\xc9\x0c\x09\xd0\x1b\x68\x08\xbd\x80\x70\x7a\x79\xcb\x41\x70\xe5\x28\x1d\x1b\x8e\x32\xd2\x60\x6c\x94\xc0\xf1\xf4\x2d\xac\x3a\x01\x2b\xff\x8f\xbb\x78\xcf\x02\xda\x11\x06\xa8\xb9\x4f\x41\x8e\xd1\xec\xaf\x54\x05\x6e\xbe\x17\x9e\xfa\xd3\x5b\xa9\xb9\x13\xa8\x71\x6b\xfd\x7a\x97\x40\x18\x74\x17\x85\x1b\x1b\x29\xc5\x0d\xa0\x95\x48\xae\xca\x00\x22\x77\x41\xd3\x7f\x8c\xf2\x5f\xb1\x7f\x04\x92\x6e\x92\x6c\x06\x35\x00\x54\x0e\xd7\xb1\x4c\x93\x01\x98\xa0\x31\x81\x62\x2c\xcf\xf2\xdd\x6f\x32\x58\x3d\x1b\x52\xb6\x2d\xa7\x4f\x7b\x69\x3e\xef\x1d\xda\x75\x51\x28\x28\xe3\x63\x39\x7d\xfa\x78\xf3\xe5\xfe\xe1\xfa\x6e\x39\xbf\xbd\x1f\x81\x06\xff\x52\x2d\x9b\xe4\xfd\xed\xea\xf7\xe5\xe7\xc5\xfc\xe0\xc2\x4e\x6a\xf2\x62\x35\x8a\x65\xaf\x84\x37\xe4\x55\x4f\xab\x9a\x79\x53\x4a\xe8\xe8\x88\xe3\x60\xbf\x0d\x58\xc3\x86\xca\xaf\x03\x35\x02\xce\x71\xaf\xda\x60\xb7\xd6\xd1\x9a\xcc\x71\x70\xcb\x46\x59\x5f\x05\x54\x9a\xbd\xa0\xf5\x14\x94\x6d\x70\x4d\xe5\xe5\xd9\xc5\xec\xec\xfc\x7c\xf6\x6e\xf6\xfe\x22\x37\x9b\x90\x93\x0e\xf9\xf4\xe9\xea\xeb\xfd\x72\x7e\xfd\xf3\xd5\x97\x9b\x87\xe5\xdd\xf5\x2f\x9f\x16\xb7\xcf\x39\x36\xf8\x8d\x3d\xf6\x31\xd7\xdc\xa4\x36\x16\x2d\x76\x91\x14\x36\xe6\x72\xf6\xe1\x5d\x7e\x7e\xe8\x06\x77\x46\xb5\x81\xb7\xd6\x50\x28\xb1\x8f\xaf\xdb\xc4\x0d\x5a\x5f\xee\x8f\xc3\x24\x47\xc4\x5b\xb5\xb2\x5e\x19\x1b\xca\x82\x5b\x29\xb4\xb7\x69\x39\x1c\xb9\x35\xfb\x6a\xf0\xa7\x69\x26\xbf\x27\xc9\xcd\x48\x1c\xee\x17\x3a\x9f\xbe\x9d\xd2\xb0\xde\x50\x18\x47\x48\xd2\x73\xd8\xa8\xd6\x75\xeb\x54\x82\xb7\x63\xdc\x3a\x70\xd7\x2a\x13\xec\x96\x42\x39\x9c\xaa\xb1\xf0\x40\x6b\xbb\xab\x3c\x29\xe0\xb8\xaf\xbb\xcf\x9f\x7d\x65\xd7\xe5\x6b\xf1\x0d\xe6\xfc\x11\x9b\xf1\x6e\x15\xa1\x74\x81\xd4\x3a\x2d\xae\xf2\x8e\x05\x85\x7e\x1d\x64\x7a\x4f\x61\x4b\xe1\x23\x05\xb1\x55\x52\xc2\x8b\x97\xa0\x67\xff\xd8\x70\x17\x55\xd2\x40\x59\xa1\x8b\x74\xe8\xa8\x25\x2f\x4a\xa3\xaa\xac\xa3\x17\x35\x68\xcc\x75\x90\xc4\x9d\x26\x79\x0f\x0b\xea\xfb\x62\x4b\xfb\x09\x26\xd3\xa7\x9d\xec\xff\xf8\xe9\xcf\xe7\x49\x76\x9a\x8d\x6b\x0c\xc3\x0b\x2e\xfb\x3b\x00\x00\xff\xff\xa6\x80\xec\xcf\xa1\x05\x00\x00")

func bootstrapUbuntuShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapUbuntuSh,
		"bootstrap.ubuntu.sh",
	)
}

func bootstrapUbuntuSh() (*asset, error) {
	bytes, err := bootstrapUbuntuShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.ubuntu.sh", size: 1441, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kubeletConfigJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\x4d\x6f\xf2\x30\x10\x84\xef\xfc\x8a\xc8\x67\x94\x84\xf7\x15\x52\xcb\x8d\x82\xda\x43\x39\x15\xda\x9e\x1d\x67\x03\x56\x1c\x2f\x5a\xaf\xe9\x97\xf8\xef\x95\x3f\x5a\x0a\x3d\x54\x39\x79\xf4\xec\x78\x36\xe3\x8f\x51\x51\x88\x5e\xdb\x56\xcc\x0a\x71\xef\x1b\x30\xc0\x0b\xb4\x9d\xde\x7a\x92\xac\xd1\x8a\x71\x20\xe4\x5e\x3f\x01\xb9\x70\x9e\x15\xa2\x4f\x5c\xa9\x22\x58\xf6\x57\xae\xd4\x58\x1d\x26\x0d\xb0\x9c\xe4\x81\xb6\x25\x70\x2e\xd0\x75\x19\xbf\xac\x7b\xde\x81\x65\xad\x92\xf9\xac\x08\x01\x82\x6e\xd1\xbe\x0d\xe8\xdd\xb7\x54\x14\x02\xac\x6c\x0c\x84\x68\x9d\x34\x0e\xa2\x7c\x1c\xa7\x81\x17\x68\x76\x88\xfd\x4f\x5c\x49\xb5\x83\xcd\x66\x15\x2e\xfd\x37\xd4\x4e\x8c\x7f\x1b\x31\xf9\x73\x9f\xd7\x69\x7d\x7d\x66\x62\x34\x58\x5e\xcc\x6f\xb5\x81\x60\x54\x01\xab\x0a\x7a\xa7\xd8\x54\x4a\x96\x8a\x58\xa4\xf9\x51\xf6\x88\x2b\x21\xe9\xf7\x8b\x8d\x06\x6c\xa3\xc1\x73\x0e\xfa\x47\xee\x79\x76\x81\x36\x6f\x30\x3d\xdb\x20\x32\x8f\x56\x5e\x52\xff\x6b\x77\x99\x47\x19\xef\x18\x68\x89\x83\xd4\xb1\xae\x2c\x94\x06\x95\x34\xa9\x06\xb5\x25\xf4\xfb\x25\xe9\x03\x50\x44\xe2\xb9\x4b\x17\x8a\x0e\x24\x7b\x82\x3b\xc9\x70\xea\x43\x3c\x20\x4b\x86\xfc\x46\xd6\x40\x07\xa0\x05\x10\xeb\x2e\x94\x09\xa7\x7f\x9b\x52\xb8\x08\x6c\x56\xeb\x1b\x44\x76\x4c\x72\xff\x45\x1c\x3f\x03\x00\x00\xff\xff\xbb\x62\xda\x19\x74\x02\x00\x00")

func kubeletConfigJsonBytes() ([]byte, error) {
	return bindataRead(
		_kubeletConfigJson,
		"kubelet-config.json",
	)
}

func kubeletConfigJson() (*asset, error) {
	bytes, err := kubeletConfigJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubelet-config.json", size: 628, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"10-eksclt.al2.conf": _10EkscltAl2Conf,
	"bootstrap.al2.sh": bootstrapAl2Sh,
	"bootstrap.ubuntu.sh": bootstrapUbuntuSh,
	"kubelet-config.json": kubeletConfigJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"10-eksclt.al2.conf": &bintree{_10EkscltAl2Conf, map[string]*bintree{}},
	"bootstrap.al2.sh": &bintree{bootstrapAl2Sh, map[string]*bintree{}},
	"bootstrap.ubuntu.sh": &bintree{bootstrapUbuntuSh, map[string]*bintree{}},
	"kubelet-config.json": &bintree{kubeletConfigJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

