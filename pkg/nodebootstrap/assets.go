// Code generated by go-bindata.
// sources:
// assets/10-eksclt.al2.conf
// assets/bootstrap.al2.sh
// assets/bootstrap.ubuntu.sh
// assets/kubelet.yaml
// DO NOT EDIT!

package nodebootstrap

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __10EkscltAl2Conf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xd1\x6a\xdb\x4a\x10\x7d\xd7\x57\x2c\x24\x0f\xf7\x82\x57\xe2\xe6\x5e\xee\x43\x40\x0f\xaa\xad\x04\x53\x55\x0e\x91\x43\x0b\x6d\x11\xe3\xdd\xb1\x33\x78\x35\x2b\x76\x57\x76\xd2\xe0\x7f\x2f\xb2\xac\xd6\xa1\xa1\xf4\x4d\xbb\x67\xe6\x9c\x33\xb3\x47\x17\x02\xb7\x5e\x05\x23\x7d\x8b\x8a\xd6\xa4\x84\x7f\xf6\x01\x1b\x2d\xb4\xb3\xad\x24\x16\x1d\x53\x10\x6b\xeb\xc4\xb6\x5b\xa1\xc1\x30\x39\x1e\xb2\x06\xbe\x59\x16\x05\x71\xf7\x24\xae\xc4\x5f\x59\x71\xf5\x77\x14\x7d\xae\xd0\xed\x48\xe1\xd7\xe8\x42\x14\x56\x81\x11\x0d\x06\xd0\x10\x40\xb4\xe0\xa0\xc1\x80\xce\x5f\x8b\xfb\xfc\x76\xbe\x28\x27\x22\xfb\x58\xd5\xb3\xfc\x26\x7b\x28\x96\xf5\x70\x17\xe5\xbc\x23\x67\xb9\x41\x0e\x37\x64\x30\x4d\x30\xa8\x64\xb0\x98\x8c\x5c\x31\xf2\x2e\xba\x10\xb7\xc6\xae\xc0\x08\x60\x2d\x7c\x80\x40\xea\x95\xc6\xb4\x78\xa8\x96\xf9\x7d\x3d\x2b\xab\x89\x28\x17\xb3\xbc\x2e\xb2\x77\x79\x31\x1e\x96\xd9\xbc\x5c\x56\xbf\x95\x3b\xcd\x7b\x52\x1b\xc6\x61\xcb\xf2\x0d\xb1\x23\xe5\xfc\x6e\x22\xe6\x65\xb5\xcc\xca\x69\x5e\xcf\x67\x7f\xc4\x6d\x7a\xd6\xa3\x42\x94\x3f\xa1\xaa\x02\xb8\x90\x9e\x7d\x26\x9d\x77\xc9\x8a\x78\x6c\x10\x5f\x22\x21\xa4\x64\xab\x51\x52\x9b\x5e\xbe\x9c\x94\x0f\xe7\x80\x81\x15\x1a\x3f\x82\xc3\xd8\x87\x09\x98\xf6\x11\xe2\x41\x3f\x26\x9b\x10\xfb\x00\xac\x50\x92\x4e\x2f\x5f\xce\x8c\x8f\x5c\x0d\x3c\xc9\xd6\xea\x9e\xe8\x43\xf6\xa9\xbe\x5b\xcc\xaa\x11\x72\xb8\x21\x1f\xd0\x1d\xf5\xd2\xe0\x3a\x3c\xbf\xdc\x53\x78\x94\x01\x88\xc3\x0f\x13\xc3\xba\xc7\x76\x30\xc6\xee\x65\xeb\x68\x47\x06\x37\xa8\x07\x86\x01\x53\xc6\x76\x5a\xb6\xce\xee\x48\xa3\x4b\x61\xef\x47\xc0\x72\xcf\x89\x4e\xba\x8e\x03\x35\x98\x6a\xab\xb6\xe8\xc6\xc9\x31\xec\xad\xdb\xca\xd6\x74\x1b\xe2\x54\x31\x8d\x7d\x4c\x72\x45\x2c\x35\xb9\x34\xb1\x6d\x48\x14\x53\xbf\xd2\x33\x58\x59\x5e\x0f\x78\xff\x44\x3d\xce\x18\x62\x7d\xaa\x68\xad\x96\xc4\x6b\x07\x67\x16\xa8\x81\x0d\xa6\x97\x2f\x7d\x82\xf3\xf7\x55\x9d\x4f\xef\xeb\x6c\x3a\x5d\x3c\x94\xcb\x43\xac\xb7\x2e\x46\xe5\xe2\x01\x7e\x1d\xf0\x43\x0c\xc7\x3f\x07\xf6\x3e\x56\xb6\xe9\xf3\x90\xb4\xd0\x79\x94\xd0\xe8\xff\xff\xbb\xfe\x37\xfe\xe7\x24\xdb\xbf\x78\x6f\x8c\x36\xbf\x24\x67\xb8\x8e\x9f\xa1\x31\x3f\x97\xf3\x56\x61\x1f\xb1\xbe\x2a\xfa\x1e\x00\x00\xff\xff\x5c\x3b\x51\x59\xe7\x03\x00\x00")

func _10EkscltAl2ConfBytes() ([]byte, error) {
	return bindataRead(
		__10EkscltAl2Conf,
		"10-eksclt.al2.conf",
	)
}

func _10EkscltAl2Conf() (*asset, error) {
	bytes, err := _10EkscltAl2ConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "10-eksclt.al2.conf", size: 999, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapAl2Sh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x52\x5d\x6b\xdb\x30\x14\x7d\xd7\xaf\x38\x73\x4d\x69\x18\x8e\xd7\xd1\x0d\xda\x26\x83\xb2\x64\x90\x87\x25\x81\xf6\x61\x23\x64\x46\x91\x6f\x66\x51\x45\x32\xd2\x75\xd6\x12\xbc\xdf\x3e\x9c\xd9\xc5\x19\x7b\x1a\x7b\x92\xce\xc7\x3d\x5c\x1d\x74\xf6\x2a\xdd\x68\x9b\x6e\x64\x28\x84\x08\xc4\x48\x1c\xc8\x7b\x7a\xd2\xdc\xc1\x52\x97\xb4\x95\xda\x74\xd8\xba\xca\x06\x62\x21\xb6\x95\x55\xac\x9d\xc5\x77\xe2\x6c\x27\x9f\xb2\xd2\xe5\xe1\x62\x80\x83\x00\x7e\x14\xda\x10\x3c\xc9\x1c\xda\x06\x96\x56\x51\xc6\xcf\x25\xa1\xf1\xdc\x22\x77\x02\x00\xf4\x16\x58\xad\x10\xc5\x87\x13\x53\x1d\x61\x3c\x6e\xd8\xcb\x3a\xc2\x7a\x8d\xf3\xf3\xd6\xd5\x0c\x37\xe2\x4f\x7c\x5b\xbd\x49\xae\xd7\xaf\xe3\x46\xbe\x05\x17\x64\x8f\x81\x00\xa9\xc2\xa1\x75\xb6\x94\x27\xae\xfc\x6f\x7d\xab\x05\x90\x3b\x4b\x18\x21\x25\x56\x29\x3d\x06\xc5\x26\xed\xb6\x1f\xee\x64\x29\x6a\x21\xe6\x8b\xc9\x34\x9b\x2d\xc7\x51\x7c\xa1\x2a\x6f\x90\x24\x41\x1b\xb2\x8c\x82\xb9\xbc\x49\xd3\xcb\xf7\xd7\xc3\xb7\xef\xae\x86\xed\x99\x1a\xc9\x14\x38\xdd\x11\xcb\x24\x97\x2c\x53\xe3\x94\x34\x89\x2e\xf7\x57\x83\x48\xcc\xe6\xf7\x0f\x77\xf3\x8f\xd3\x6c\x36\xf9\xf7\xc4\xae\xa1\x44\xe7\xfd\xc8\x87\xaf\xcb\xe9\x7f\x08\x6d\x6a\x1f\x44\x42\x04\x57\x79\x45\x27\xdd\x3c\x56\x1b\x32\xc4\x43\xb2\x7b\x9c\x81\x0b\x1d\xa0\xa4\x85\xdb\x93\xf7\x3a\x27\x7c\xbe\xfb\x92\x2d\x17\x93\x7b\x21\x94\x64\x7c\xf8\xeb\xec\xb1\x8e\x63\xc2\x68\x34\x5d\x7c\x7a\xe9\x37\x3e\xb4\xb7\xfa\xa4\xa4\xf8\xd0\x43\xf5\x1f\x8f\xed\x89\x0d\xae\x45\xb7\xc0\x38\x3e\x74\xd7\x9b\x24\xbe\xe8\xff\xca\xe6\xf3\x9c\x4e\x45\x83\x5a\x34\x9b\x88\xf0\x1c\x98\x76\x8a\x0d\x72\x49\x3b\x67\x13\x4f\xc6\xc9\xbc\xc7\x93\x95\x1b\x43\x68\xdf\xd2\x13\x02\x4b\xcf\x2f\xfc\xaf\x00\x00\x00\xff\xff\x07\x7d\xb2\xb5\x4b\x03\x00\x00")

func bootstrapAl2ShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapAl2Sh,
		"bootstrap.al2.sh",
	)
}

func bootstrapAl2Sh() (*asset, error) {
	bytes, err := bootstrapAl2ShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.al2.sh", size: 843, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapUbuntuSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\xe1\x8f\xda\xc6\x13\xfd\xbe\x7f\xc5\xfc\x08\xca\xef\x50\xb3\x26\x49\xd3\x48\xb9\xc4\x55\xe9\x1d\xa9\x4e\xb9\x42\x74\x10\xa5\xd5\xe9\x8a\x06\xef\x18\xaf\x58\xef\x5a\xbb\x63\xb8\x0b\xa2\x7f\x7b\xb5\x18\x13\x38\xb5\xf9\x50\x55\x7c\xc0\xb3\xf3\xe6\x79\xfc\xfc\x66\xfc\xe4\x7f\xfd\xb9\xb6\xfd\x39\x86\x42\x88\x40\x0c\xd2\x01\x79\x4f\xf7\x9a\xdb\xb0\xd2\x15\xe5\xa8\x4d\x1b\x5b\x57\xdb\x40\x2c\x44\x5e\xdb\x8c\xb5\xb3\xb0\x20\x9e\x95\x78\x3f\xab\x9c\x0a\x67\x3d\xd8\x08\x80\x75\xa1\x0d\x81\x27\x54\xa0\x6d\x60\xb4\x19\xcd\xf8\xa1\x22\x88\x98\xb7\xa0\x9c\x00\x00\xd0\x39\xc0\xed\x2d\x74\xba\x9b\x13\xd0\xb6\x03\x69\x1a\x4f\x5f\x6c\x3b\x70\x77\x07\x4f\x9f\xee\x51\xb1\x38\x26\xff\x84\x3f\x6e\x9f\xcb\x37\x77\xdf\x75\x63\xfa\x2d\x70\x41\x76\x47\x08\x40\x59\xe1\x60\x8f\x7c\xbb\x3f\xf3\xc4\xb5\x6f\x00\xb9\x16\x00\xca\x59\x82\x77\xd0\x27\xce\xfa\xb4\x0c\x19\x9b\x7e\xdb\x7e\x52\x62\x25\xb6\x42\x8c\xc6\x97\xc3\xd9\xd5\xc7\xb4\xd3\x3d\xcb\x6a\x6f\x40\xca\xa0\x0d\x59\x86\x82\xb9\x3a\xef\xf7\x5f\xbc\x7e\x93\xbc\xfc\xe1\x55\xb2\xff\xef\x1b\x64\x0a\xdc\x2f\x89\x51\x2a\x64\xec\x1b\x97\xa1\x91\xba\x5a\xbd\xea\x75\xc4\xd5\x68\x32\x1d\x8c\x2e\x86\xb3\xab\xcb\x7f\xcf\xd8\x4a\x24\xb5\x3a\xa6\x9c\xfe\xfe\x71\xf8\x1f\x90\x46\xdd\x7b\x1d\x21\x82\xab\x7d\x46\x27\xda\x2c\xeb\x39\x19\xe2\x84\xec\x0a\x9e\x00\x17\x3a\x40\x86\x16\xdc\x8a\xbc\xd7\x8a\xe0\xd7\xc1\x6f\xb3\x8f\xe3\xcb\x89\x10\x19\x32\xfc\xf8\xb7\xb5\x3b\x39\x76\x0c\xef\xde\x0d\xc7\xef\x0f\xfa\x76\x37\xfb\xab\xed\x89\x48\xdd\xcd\x51\xb4\x7d\xf4\xb0\x47\xc9\x18\x6f\x45\xdb\x40\xda\xdd\xb4\x97\xe7\xb2\x7b\x76\x6c\xcb\xe8\x9e\xd3\xaa\x4e\x6f\x2b\x62\x27\x22\x58\xac\x00\x8d\xc6\x00\xfb\x6e\x25\x2d\x43\xb2\xbf\x6e\xcf\x1e\xc3\x32\x36\x07\x58\xc6\xa6\x3d\x6b\x60\x81\x5d\x75\x4c\x26\xc2\x43\x60\x2a\x23\xce\x53\x20\x96\x71\x9e\x48\x09\x71\x26\x00\x9e\xc0\x74\x7c\x39\x3e\x8f\x26\x0e\x04\xa1\x70\xb5\x51\x30\x27\x30\xce\x2d\x49\x01\x32\xd0\x8a\xfc\x03\xb0\x2e\xa9\x25\x85\xc0\xe8\x39\x40\x5d\x3d\xdb\x31\xac\x0b\x9d\x15\xa0\x03\xac\x0b\x64\x58\x13\x28\x07\xda\xc2\xe0\xfa\x25\x9c\x1d\x72\x73\x0c\xa4\xc0\x59\xa8\x0c\x6a\x0b\x4d\x4f\xaa\x21\x40\xab\xa0\x24\xb4\x0c\xec\xe2\xcd\x2b\xe7\x19\xe7\x86\x62\x58\xba\xc0\x2d\x1a\x94\x0e\xec\x5d\xe8\x3d\x83\x79\xcd\xa0\xf9\xff\x61\x57\x6f\x1d\x43\x66\x08\x3d\x14\x6e\x1d\x8b\x8c\x43\xb5\x7f\xa4\xdc\xbb\xf2\x6b\xe3\x51\x9f\xb5\xe6\xc2\xd5\x0c\x05\xae\xb4\x5d\xec\x08\xd8\x41\x56\x07\x76\xa5\x0e\x14\xeb\x1a\xa0\xe6\x40\x26\x17\x00\xdf\xb0\xe5\xc1\x5a\xdf\x86\xfd\x23\x20\x0e\x43\x9c\x85\x1d\x42\x00\xe4\x06\x17\x21\x3d\xdb\xad\x8b\x0e\x2a\xe5\x29\x84\xf4\x79\xb2\xfb\x75\x9a\x53\xeb\x14\x49\x5d\x1d\xb9\x77\x9f\xc8\x4c\x1d\x98\xbc\x54\x36\xa4\xdd\xcd\xc5\xf5\xa7\xc9\x74\x78\x33\xbb\x1c\x4d\x5a\x40\x89\xf7\x32\xfa\xf1\xc8\xaa\xdb\x63\x52\x83\x73\x32\xa1\x25\xbe\x1e\xfc\x3c\xbc\x9e\x6c\x9f\xa1\xa9\x0a\x4c\x9a\x7e\x13\xed\x8e\x57\xc1\xa3\x51\xd9\x73\x61\x1d\x57\x22\xeb\x0c\xe3\x82\x96\xec\x96\x64\xe5\x9a\xe6\x85\x73\xcb\x94\x7d\x4d\x47\x38\xe7\xf5\x97\x06\x56\x3a\x45\xe9\xe7\x06\xd5\x02\x8c\x71\x6b\x59\x79\xbd\xd2\x86\x16\xa4\x8e\x8b\x2b\xa7\xa4\xb6\xb9\x47\x99\x39\xcb\xa8\x2d\x79\xa9\x4b\x5c\x50\xda\xdd\x0c\x3e\x4f\x66\xc3\x0f\x93\xd9\xf0\xe2\x66\x36\xb8\xb8\x18\x7f\x1a\x4d\xb7\x89\x5a\xfa\x84\x32\x9f\x34\xe9\xcb\xe1\xfb\xc1\xa7\xeb\xe9\xec\x66\xf8\xcb\xd5\x78\xb4\x4d\xb0\xc4\x2f\xce\xe2\x3a\x24\x99\x2b\xe3\xcb\xe9\x57\x58\x07\x92\x58\xaa\xd7\xaf\xce\xbf\x4f\x5e\x1c\x34\x76\xb5\x92\x95\x77\x2b\xad\xc8\xa7\xb8\x0e\x8f\xc5\x77\x25\x6a\x9b\xee\xc3\xc6\x1f\x2d\xc4\x6a\x39\xd7\x56\x2a\xed\xd3\xbe\xab\xb8\x9f\x59\x1d\x3f\x80\x47\xe9\xcc\xd9\xbc\xc9\x47\x8f\xc4\xbc\x25\x4e\x54\x8b\x38\x3c\xa9\xaf\x6d\x9c\xc8\x54\xb9\x6c\x49\xbe\x7d\x87\xc4\x6b\xe7\x97\xb2\x32\xf5\x22\xb6\x60\x75\x5b\xb7\xf0\xae\xae\xa4\xf2\x7a\x45\x3e\x6d\xa2\xbc\x6d\xdc\xd3\x42\xef\x3a\x8f\x16\x38\x56\xf8\x90\x88\x03\x23\xe3\x8d\xf9\xe0\x8d\xe9\xe0\x6a\x34\x3d\x98\x67\xb7\x7e\x9c\xcd\xf5\x22\x7d\x6c\xfe\xe6\x38\x79\xc0\xb2\x55\x21\x27\xe4\xda\x93\x5c\xc4\xaf\x41\x7a\xe3\x18\x99\x3e\x34\x63\x32\x21\xbf\x22\x7f\x41\x9e\x75\x1e\xdd\x73\xd2\x0e\x5a\x67\x1f\x4a\x57\x07\x19\x7d\x93\xe6\x68\x02\x1d\xb4\xd7\x64\x59\x66\x28\x73\x6d\xe8\xa4\x87\x0c\x93\xcc\x73\xc4\xf5\xe2\x78\x35\x0b\xf2\xeb\x62\x8d\xfb\x31\x6e\xe7\xdd\xd8\xdd\xfe\x74\xb7\xed\x88\x9e\x68\xd7\x28\xfa\x13\x9c\xf8\x2b\x00\x00\xff\xff\xba\x74\xf6\x0a\xaf\x08\x00\x00")

func bootstrapUbuntuShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapUbuntuSh,
		"bootstrap.ubuntu.sh",
	)
}

func bootstrapUbuntuSh() (*asset, error) {
	bytes, err := bootstrapUbuntuShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.ubuntu.sh", size: 2223, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kubeletYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x4f\x4f\xc3\x30\x0c\xc5\xef\xf9\x14\xfe\x04\x6d\x07\x9a\x04\xb9\x8d\x4d\x70\x60\x27\x36\xe0\xec\xa6\xee\x16\x35\x8d\x27\xc7\x19\x7f\x3e\x3d\x5a\x5a\x90\x26\xa1\x9c\x9e\xde\xb3\xdf\x4f\xce\xe0\x63\x67\xe1\x39\xb7\x14\x48\xd7\x1c\x7b\x7f\xc8\x82\xea\x39\x1a\x3c\xf9\x37\x92\xe4\x39\x5a\x18\xa6\x40\xe5\x4a\xa2\x1a\xee\x52\xe5\xb9\x3e\x2f\x5a\x52\x5c\x18\x83\x5d\x27\x94\x92\x85\xa6\x2a\xcf\xb8\x90\x93\x92\x6c\x78\x44\x1f\x2d\xcc\xb2\x0a\xec\x30\x18\x83\x59\x8f\x14\xd5\xbb\x52\x64\x0d\x00\x46\x8e\x5f\x23\xe7\x74\x11\x00\x14\xb1\x0d\xd4\x59\xe8\x31\x24\x32\x00\x1f\xd4\x1e\x99\x87\xc9\x75\xe8\x8e\xb4\xdf\x6f\x2d\xdc\x8c\x4d\xba\x1e\x50\xc9\x97\xfc\xe7\xb2\xb9\x9f\xc3\xc1\x53\xd4\xf5\xea\xd1\x07\xb2\x50\x93\xba\x9a\x86\xe4\x34\xd4\x0e\x2b\x27\x3a\xd1\xb0\xf8\xef\x3f\x98\x91\x3b\xb2\xf0\x3e\x55\xfe\x5b\xbe\x9a\x47\xa8\x2b\x18\xcb\x5f\x8c\x62\xbe\x46\xbc\xb6\x6f\x9b\x64\x4c\x22\x39\x93\xec\xb7\xbb\x07\x66\x4d\x2a\x78\x9a\x61\x8d\x3b\x08\xe7\xd3\x46\xfc\x99\xc4\xc2\xa4\xfa\x64\x4c\x4f\xa8\x59\xe8\x09\x95\xca\x59\x5e\x58\x51\x69\xfe\xaa\x5d\x59\xb7\x26\x51\xdf\x5f\xee\x48\xf3\xb6\x9f\x00\x00\x00\xff\xff\x1f\x2f\xa9\x0f\xd0\x01\x00\x00")

func kubeletYamlBytes() ([]byte, error) {
	return bindataRead(
		_kubeletYaml,
		"kubelet.yaml",
	)
}

func kubeletYaml() (*asset, error) {
	bytes, err := kubeletYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubelet.yaml", size: 464, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"10-eksclt.al2.conf": _10EkscltAl2Conf,
	"bootstrap.al2.sh": bootstrapAl2Sh,
	"bootstrap.ubuntu.sh": bootstrapUbuntuSh,
	"kubelet.yaml": kubeletYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"10-eksclt.al2.conf": &bintree{_10EkscltAl2Conf, map[string]*bintree{}},
	"bootstrap.al2.sh": &bintree{bootstrapAl2Sh, map[string]*bintree{}},
	"bootstrap.ubuntu.sh": &bintree{bootstrapUbuntuSh, map[string]*bintree{}},
	"kubelet.yaml": &bintree{kubeletYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

