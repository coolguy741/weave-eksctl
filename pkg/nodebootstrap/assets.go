// Code generated by go-bindata.
// sources:
// assets/10-eksclt.al2.conf
// assets/bootstrap.al2.sh
// assets/bootstrap.ubuntu.sh
// assets/kubelet.yaml
// DO NOT EDIT!

package nodebootstrap

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __10EkscltAl2Conf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x4f\x6b\xdb\x4e\x10\xbd\xeb\x53\x2c\x24\x87\xdf\x0f\xbc\x52\xe2\xb8\x39\x04\x74\x50\x63\x25\x18\x54\x27\x44\x0e\x2d\xb4\xc5\x8c\x77\xc7\xce\xe0\xd5\xac\xd8\x5d\xd9\x49\x83\xbf\x7b\x91\x65\xb5\x2e\x09\xa5\x37\xed\xbc\x99\xf7\xde\xfc\xd1\x89\xc0\xb5\x57\xc1\x48\x5f\xa3\xa2\x25\x29\xe1\x5f\x7c\xc0\x4a\x0b\xed\x6c\x2d\x89\x45\xc3\x14\xc4\xd2\x3a\xb1\x6e\x16\x68\x30\x0c\xf6\x8f\xac\x82\x1f\x96\x45\x41\xdc\x3c\x8b\xa1\xf8\x2f\x2b\x86\xff\x47\xd1\xd7\x12\xdd\x86\x14\x7e\x8f\x4e\x44\x61\x15\x18\x51\x61\x00\x0d\x01\x44\x0d\x0e\x2a\x0c\xe8\xfc\x95\x78\xc8\x6f\x27\x77\xd3\x81\xc8\x3e\x97\xf3\x71\x7e\x93\x3d\x16\xb3\x79\x17\x8b\x72\xde\x90\xb3\x5c\x21\x87\x1b\x32\x98\x26\x18\x54\xd2\x59\x4c\x7a\xae\x18\x79\x13\x9d\x88\x5b\x63\x17\x60\x04\xb0\x16\x3e\x40\x20\xf5\x87\xc6\x75\xf1\x58\xce\xf2\x87\xf9\x78\x5a\x0e\xc4\xf4\x6e\x9c\xcf\x8b\xec\x63\x5e\xf4\x8f\x59\x36\x99\xce\xca\xbf\xca\x1d\xfa\x3d\xa8\x75\xed\xb0\x65\xf9\x8e\xd8\x9e\x72\x72\x3f\x10\x93\x69\x39\xcb\xa6\xd7\xf9\x7c\x32\xfe\x27\x6e\xd3\xb2\xee\x15\xa2\xfc\x19\x55\x19\xc0\x85\xf4\xe8\x33\x69\xbc\x4b\x16\xc4\x7d\x81\xf8\x16\x09\x21\x25\x5b\x8d\x92\xea\xf4\xf4\xf5\xa0\xbc\x3b\x06\x0c\x2c\xd0\xf8\x1e\xec\xda\xde\x0d\xc0\xd4\x4f\x10\x77\xfa\x31\xd9\x84\xd8\x07\x60\x85\x92\x74\x7a\xfa\x7a\x64\xbc\xe7\xaa\xe0\x59\xd6\x56\xb7\x44\x9f\xb2\x2f\xf3\xfb\xbb\x71\xd9\x43\x0e\x57\xe4\x03\xba\xbd\x5e\x1a\x5c\x83\xc7\xc1\x2d\x85\x27\x19\x80\x38\xfc\x32\xd1\x8d\xbb\x2f\x07\x63\xec\x56\xd6\x8e\x36\x64\x70\x85\xba\x63\xe8\x30\x65\x6c\xa3\x65\xed\xec\x86\x34\xba\x14\xb6\xbe\x07\x2c\xb7\x9c\xe8\xa4\x6b\x38\x50\x85\xa9\xb6\x6a\x8d\xae\xef\x1c\xc3\xd6\xba\xb5\xac\x4d\xb3\x22\x4e\x15\x53\x5f\xc7\x24\x17\xc4\x52\x93\x4b\x13\x5b\x87\x44\x31\xb5\x23\x3d\x82\x95\xe5\x65\x87\xb7\x2b\x6a\x71\xc6\x10\xeb\x43\x46\x6d\xb5\x24\x5e\x3a\x38\xb2\x40\x15\xac\x30\xbd\x3c\x1b\x8e\xce\xce\xcf\x47\x17\xa3\x0f\xc3\x58\xaf\x5d\x8c\xca\xc5\xa7\xaf\x6f\xcf\x7a\x17\xc3\xfe\x7f\x81\xad\x8f\x95\xad\xda\x2b\x48\x6a\x68\x3c\x4a\xa8\xf4\xe5\xe8\xea\x22\x3e\x3f\x88\xb5\x7b\x6e\xed\xd0\xea\xcd\xbd\x74\xe1\xf8\x05\x2a\xf3\x7b\x24\xef\x25\xb6\x87\xd5\x66\x45\x3f\x03\x00\x00\xff\xff\x5c\x6d\xc6\x40\xdd\x03\x00\x00")

func _10EkscltAl2ConfBytes() ([]byte, error) {
	return bindataRead(
		__10EkscltAl2Conf,
		"10-eksclt.al2.conf",
	)
}

func _10EkscltAl2Conf() (*asset, error) {
	bytes, err := _10EkscltAl2ConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "10-eksclt.al2.conf", size: 989, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapAl2Sh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x52\x5d\x6b\xdb\x30\x14\x7d\xd7\xaf\x38\x73\x4d\x69\x18\x8e\xd7\xd1\x0d\xda\x26\x83\xb2\x64\x90\x87\x25\x81\xf6\x61\x23\x64\x46\x91\x6f\x66\x51\x45\x32\xd2\x75\xd6\x12\xbc\xdf\x3e\x9c\xd9\xc5\x19\x7b\x1a\x7b\x92\xce\xc7\x3d\x5c\x1d\x74\xf6\x2a\xdd\x68\x9b\x6e\x64\x28\x84\x08\xc4\x48\x1c\xc8\x7b\x7a\xd2\xdc\xc1\x52\x97\xb4\x95\xda\x74\xd8\xba\xca\x06\x62\x21\xb6\x95\x55\xac\x9d\xc5\x77\xe2\x6c\x27\x9f\xb2\xd2\xe5\xe1\x62\x80\x83\x00\x7e\x14\xda\x10\x3c\xc9\x1c\xda\x06\x96\x56\x51\xc6\xcf\x25\xa1\xf1\xdc\x22\x77\x02\x00\xf4\x16\x58\xad\x10\xc5\x87\x13\x53\x1d\x61\x3c\x6e\xd8\xcb\x3a\xc2\x7a\x8d\xf3\xf3\xd6\xd5\x0c\x37\xe2\x4f\x7c\x5b\xbd\x49\xae\xd7\xaf\xe3\x46\xbe\x05\x17\x64\x8f\x81\x00\xa9\xc2\xa1\x75\xb6\x94\x27\xae\xfc\x6f\x7d\xab\x05\x90\x3b\x4b\x18\x21\x25\x56\x29\x3d\x06\xc5\x26\xed\xb6\x1f\xee\x64\x29\x6a\x21\xe6\x8b\xc9\x34\x9b\x2d\xc7\x51\x7c\xa1\x2a\x6f\x90\x24\x41\x1b\xb2\x8c\x82\xb9\xbc\x49\xd3\xcb\xf7\xd7\xc3\xb7\xef\xae\x86\xed\x99\x1a\xc9\x14\x38\xdd\x11\xcb\x24\x97\x2c\x53\xe3\x94\x34\x89\x2e\xf7\x57\x83\x48\xcc\xe6\xf7\x0f\x77\xf3\x8f\xd3\x6c\x36\xf9\xf7\xc4\xae\xa1\x44\xe7\xfd\xc8\x87\xaf\xcb\xe9\x7f\x08\x6d\x6a\x1f\x44\x42\x04\x57\x79\x45\x27\xdd\x3c\x56\x1b\x32\xc4\x43\xb2\x7b\x9c\x81\x0b\x1d\xa0\xa4\x85\xdb\x93\xf7\x3a\x27\x7c\xbe\xfb\x92\x2d\x17\x93\x7b\x21\x94\x64\x7c\xf8\xeb\xec\xb1\x8e\x63\xc2\x68\x34\x5d\x7c\x7a\xe9\x37\x3e\xb4\xb7\xfa\xa4\xa4\xf8\xd0\x43\xf5\x1f\x8f\xed\x89\x0d\xae\x45\xb7\xc0\x38\x3e\x74\xd7\x9b\x24\xbe\xe8\xff\xca\xe6\xf3\x9c\x4e\x45\x83\x5a\x34\x9b\x88\xf0\x1c\x98\x76\x8a\x0d\x72\x49\x3b\x67\x13\x4f\xc6\xc9\xbc\xc7\x93\x95\x1b\x43\x68\xdf\xd2\x13\x02\x4b\xcf\x2f\xfc\xaf\x00\x00\x00\xff\xff\x07\x7d\xb2\xb5\x4b\x03\x00\x00")

func bootstrapAl2ShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapAl2Sh,
		"bootstrap.al2.sh",
	)
}

func bootstrapAl2Sh() (*asset, error) {
	bytes, err := bootstrapAl2ShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.al2.sh", size: 843, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapUbuntuSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x61\x6f\xdb\x36\x10\xfd\xce\x5f\x71\x73\x8d\x2e\xc1\x4a\x39\x49\xd3\x02\x4d\xab\x61\x5e\xe3\x0e\xc1\xb2\xa4\xa8\x5d\x74\x43\x90\x19\x67\xf1\x64\x11\xa6\x48\x81\x3c\xd9\x4d\x0d\xef\xb7\x0f\xb4\x2c\x57\x0e\xb6\x7e\x18\x06\x7f\xb0\x8e\xf7\xee\xe9\xf4\xf4\xee\xf4\xe4\xbb\xc1\x4c\xdb\xc1\x0c\x43\x21\x44\x20\x06\xe9\x80\xbc\xa7\xcf\x9a\xdb\xb0\xd2\x15\xe5\xa8\x4d\x1b\x5b\x57\xdb\x40\x2c\x44\x5e\xdb\x8c\xb5\xb3\x30\x27\x9e\x96\xf8\x79\x5a\x39\x15\x8e\x8e\x61\x2d\x00\x56\x85\x36\x04\x9e\x50\x81\xb6\x81\xd1\x66\x34\xe5\x87\x8a\x20\x62\x5e\x83\x72\x02\x00\x40\xe7\x00\x77\x77\xd0\xeb\xaf\x0f\x40\x9b\x1e\xa4\x69\x3c\x3d\xdd\xf4\xe0\xfe\x1e\x9e\x3e\xdd\xa1\x62\x71\x4c\xfe\x05\x7f\xde\x9d\xc8\x57\xf7\x3f\xf4\x63\xfa\x35\x70\x41\x76\x4b\x08\x40\x59\xe1\x60\x87\x7c\xbd\x3b\xf3\xc4\xb5\x6f\x00\xb9\x16\x00\xca\x59\x82\x37\x30\x20\xce\x06\xb4\x08\x19\x9b\x41\xdb\x7e\x52\x62\x25\x36\x42\xdc\xdc\x5e\x8e\xa6\x57\xef\xd3\x5e\xff\x28\xab\xbd\x01\x29\x83\x36\x64\x19\x0a\xe6\xea\x62\x30\x38\x7d\xf9\x2a\x39\x7b\x71\x9e\xec\xfe\x07\x06\x99\x02\x0f\x4a\x62\x94\x0a\x19\x07\xc6\x65\x68\xa4\xae\x96\xe7\xc7\x3d\x71\x75\x33\x9e\x0c\x6f\xde\x8e\xa6\x57\x97\xff\x9d\xb1\x95\x48\x6a\xd5\xa5\x9c\xfc\xf1\x7e\xf4\x3f\x90\x46\xdd\x8f\x7b\x42\x04\x57\xfb\x8c\x0e\xb4\x59\xd4\x33\x32\xc4\x09\xd9\x25\x3c\x01\x2e\x74\x80\x0c\x2d\xb8\x25\x79\xaf\x15\xc1\x6f\xc3\xdf\xa7\xef\x6f\x2f\xc7\x42\x64\xc8\xf0\xe3\x3f\xd6\x6e\xe5\xd8\x32\xbc\x79\x33\xba\x7d\xb7\xd7\xb7\xbf\xde\x5d\x6d\x0e\x44\xea\xaf\x3b\xd1\xe6\xd1\xc3\x76\x92\x31\xde\x88\xb6\x81\xb4\xbf\x6e\x2f\x2f\x64\xff\xa8\x6b\xcb\xe8\x9e\xc3\xaa\xde\xf1\x46\xc4\x4e\x44\xb0\x58\x01\x1a\x8d\x01\x76\xdd\x4a\x5a\x84\x64\x77\xdd\x9e\x3d\x86\x65\x6c\xf6\xb0\x8c\x4d\x7b\xd6\xc0\x02\xbb\xaa\x4b\x26\xc2\x43\x60\x2a\x23\xce\x53\x20\x96\x71\x9e\x48\x09\x71\x24\x00\x9e\xc0\xe4\xf6\xf2\xf6\x22\x9a\x38\x10\x84\xc2\xd5\x46\xc1\x8c\xc0\x38\xb7\x20\x05\xc8\x40\x4b\xf2\x0f\xc0\xba\xa4\x96\x14\x02\xa3\xe7\x00\x75\xf5\x6c\xcb\xb0\x2a\x74\x56\x80\x0e\xb0\x2a\x90\x61\x45\xa0\x1c\x68\x0b\xc3\xeb\x33\x38\xda\xe7\x66\x18\x48\x81\xb3\x50\x19\xd4\x16\x9a\x9e\x54\x43\x80\x56\x41\x49\x68\x19\xd8\xc5\x9b\x57\xce\x33\xce\x0c\xc5\xb0\x74\x81\x5b\x34\x28\x1d\xd8\xbb\x70\xfc\x0c\x66\x35\x83\xe6\xef\xc3\xb6\xde\x3a\x86\xcc\x10\x7a\x28\xdc\x2a\x16\x19\x87\x6a\xf7\x48\xb9\x77\xe5\xd7\xc6\xa3\x3e\x2b\xcd\x85\xab\x19\x0a\x5c\x6a\x3b\xdf\x12\xb0\x83\xac\x0e\xec\x4a\x1d\x28\xd6\x35\x40\xcd\x81\x4c\x2e\x00\xbe\x61\xcb\xbd\xb5\xbe\x0d\xfb\x57\x40\x1c\x86\x38\x0b\x5b\x84\x00\xc8\x0d\xce\x43\x7a\xb4\x5d\x17\x3d\x54\xca\x53\x08\xe9\x49\xb2\xfd\xf5\x9a\x53\xeb\x14\x49\x5d\x75\xdc\xbb\x4b\x64\xa6\x0e\x4c\x5e\x2a\x1b\xd2\xfe\xfa\xed\xf5\xc7\xf1\x64\xf4\x61\x7a\x79\x33\x6e\x01\x25\x7e\x96\xd1\x8f\x1d\xab\x6e\xba\xa4\x06\x67\x64\x42\x4b\x7c\x3d\xfc\x79\x74\x3d\xde\x3c\x43\x53\x15\x98\x34\xfd\x26\xda\x75\x57\xc1\xa3\x51\xd9\x71\x61\x1d\x57\x22\xeb\x0c\xe3\x82\x96\xec\x16\x64\xe5\x8a\x66\x85\x73\x8b\x94\x7d\x4d\x1d\x9c\xf3\xfa\x4b\x03\x2b\x9d\xa2\xf4\x53\x83\x6a\x01\xc6\xb8\x95\xac\xbc\x5e\x6a\x43\x73\x52\xdd\xe2\xca\x29\xa9\x6d\xee\x51\x66\xce\x32\x6a\x4b\x5e\xea\x12\xe7\x94\xbe\x3c\x39\x3b\x3f\x39\x3d\x3d\x7f\x7e\xfe\xe2\x2c\x51\x0b\x9f\x50\xe6\x93\xfe\x7a\xf8\x69\x3c\xbd\x1c\xbd\x1b\x7e\xbc\x9e\x4c\x3f\x8c\x7e\xb9\xba\xbd\xd9\x24\x58\xe2\x17\x67\x71\x15\x92\xcc\x95\xf1\x95\x0c\x2a\xac\x03\x49\x2c\xd5\xcb\xf3\x8b\xe7\xc9\xe9\x5e\x59\x57\x2b\x59\x79\xb7\xd4\x8a\x7c\x8a\xab\xf0\x58\x72\x57\xa2\xb6\xe9\x2e\x6c\x5c\xd1\x42\xac\x96\x33\x6d\xa5\xd2\x3e\x1d\xb8\x8a\x07\x99\xd5\xf1\xb3\xd7\x49\x67\xce\xe6\x4d\x3e\x3a\x23\xe6\x2d\x71\xa2\x5a\xc4\xfe\xf9\x7c\x6d\xe3\x1c\xa6\xca\x65\x0b\xf2\xed\x9b\x23\x5e\x39\xbf\x90\x95\xa9\xe7\xb1\x05\xab\xdb\xba\xb9\x77\x75\x25\x95\xd7\x4b\xf2\x69\x13\xe5\x6d\xe3\x9e\xe6\x7a\xdb\x79\x7c\xf1\x5d\x5d\xf7\x89\x38\x26\x32\xde\x98\xf7\x8e\x98\x0c\xaf\x6e\x26\x7b\xcb\x6c\x97\x8e\xb3\xb9\x9e\xa7\x8f\x2d\xdf\x1c\x27\x0f\x58\xb6\x2a\xe4\x84\x5c\x7b\x92\xf3\xf8\x0d\x48\x3f\x38\x46\xa6\x5f\x9b\xe1\x18\x93\x5f\x92\x7f\x4b\x9e\x75\x1e\x3d\x73\xd0\x0e\x5a\x67\x1f\x4a\x57\x07\x19\xdd\x92\xe6\x68\x02\xed\xb5\xd7\x64\x59\x66\x28\x73\x6d\xe8\xa0\x87\x0c\x93\xcc\x73\xc4\x1d\xc7\xa1\x6a\xd6\xe2\xd7\x75\x1a\xb7\x62\xdc\xc9\xdb\x61\xbb\xfb\xe9\x7e\xd3\x13\xc7\xa2\x5d\x9e\xe8\x0f\x70\xe2\xef\x00\x00\x00\xff\xff\x6f\xa0\xbe\x70\xa5\x08\x00\x00")

func bootstrapUbuntuShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapUbuntuSh,
		"bootstrap.ubuntu.sh",
	)
}

func bootstrapUbuntuSh() (*asset, error) {
	bytes, err := bootstrapUbuntuShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.ubuntu.sh", size: 2213, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kubeletYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x4f\x4f\xc3\x30\x0c\xc5\xef\xf9\x14\xfe\x04\x6d\x07\x9a\x04\xb9\x8d\x4d\x70\x60\x27\x36\xe0\xec\xa6\xee\x16\x35\x8d\x27\xc7\x19\x7f\x3e\x3d\x5a\x5a\x90\x26\xa1\x9c\x9e\xde\xb3\xdf\x4f\xce\xe0\x63\x67\xe1\x39\xb7\x14\x48\xd7\x1c\x7b\x7f\xc8\x82\xea\x39\x1a\x3c\xf9\x37\x92\xe4\x39\x5a\x18\xa6\x40\xe5\x4a\xa2\x1a\xee\x52\xe5\xb9\x3e\x2f\x5a\x52\x5c\x18\x83\x5d\x27\x94\x92\x85\xa6\x2a\xcf\xb8\x90\x93\x92\x6c\x78\x44\x1f\x2d\xcc\xb2\x0a\xec\x30\x18\x83\x59\x8f\x14\xd5\xbb\x52\x64\x0d\x00\x46\x8e\x5f\x23\xe7\x74\x11\x00\x14\xb1\x0d\xd4\x59\xe8\x31\x24\x32\x00\x1f\xd4\x1e\x99\x87\xc9\x75\xe8\x8e\xb4\xdf\x6f\x2d\xdc\x8c\x4d\xba\x1e\x50\xc9\x97\xfc\xe7\xb2\xb9\x9f\xc3\xc1\x53\xd4\xf5\xea\xd1\x07\xb2\x50\x93\xba\x9a\x86\xe4\x34\xd4\x0e\x2b\x27\x3a\xd1\xb0\xf8\xef\x3f\x98\x91\x3b\xb2\xf0\x3e\x55\xfe\x5b\xbe\x9a\x47\xa8\x2b\x18\xcb\x5f\x8c\x62\xbe\x46\xbc\xb6\x6f\x9b\x64\x4c\x22\x39\x93\xec\xb7\xbb\x07\x66\x4d\x2a\x78\x9a\x61\x8d\x3b\x08\xe7\xd3\x46\xfc\x99\xc4\xc2\xa4\xfa\x64\x4c\x4f\xa8\x59\xe8\x09\x95\xca\x59\x5e\x58\x51\x69\xfe\xaa\x5d\x59\xb7\x26\x51\xdf\x5f\xee\x48\xf3\xb6\x9f\x00\x00\x00\xff\xff\x1f\x2f\xa9\x0f\xd0\x01\x00\x00")

func kubeletYamlBytes() ([]byte, error) {
	return bindataRead(
		_kubeletYaml,
		"kubelet.yaml",
	)
}

func kubeletYaml() (*asset, error) {
	bytes, err := kubeletYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubelet.yaml", size: 464, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"10-eksclt.al2.conf": _10EkscltAl2Conf,
	"bootstrap.al2.sh": bootstrapAl2Sh,
	"bootstrap.ubuntu.sh": bootstrapUbuntuSh,
	"kubelet.yaml": kubeletYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"10-eksclt.al2.conf": &bintree{_10EkscltAl2Conf, map[string]*bintree{}},
	"bootstrap.al2.sh": &bintree{bootstrapAl2Sh, map[string]*bintree{}},
	"bootstrap.ubuntu.sh": &bintree{bootstrapUbuntuSh, map[string]*bintree{}},
	"kubelet.yaml": &bintree{kubeletYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

