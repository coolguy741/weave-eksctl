// Code generated by go-bindata.
// sources:
// assets/10-eksclt.al2.conf
// assets/bootstrap.al2.sh
// assets/bootstrap.ubuntu.sh
// assets/kubelet-config.json
// DO NOT EDIT!

package nodebootstrap

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __10EkscltAl2Conf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x51\x6b\xdb\x30\x14\x85\xdf\xfd\x2b\x04\xed\xc3\x06\x91\xdd\xa6\x59\x1f\x0a\x7e\xf0\x16\xb7\x14\xbc\xb6\xd4\x2d\x1b\x6c\x23\xdc\x48\x37\xe1\x2e\xf2\x95\x91\xe4\xa4\x5d\xc8\x7f\x1f\x8e\xed\x2e\xa3\x65\xec\xcd\xd6\x77\x7d\x8e\xee\x39\x3e\x12\xb8\xf2\x2a\x18\xe9\x6b\x54\xb4\x20\x25\xfc\xb3\x0f\x58\x69\xa1\x9d\xad\x25\xb1\x68\x98\x82\x58\x58\x27\x56\xcd\x1c\x0d\x86\xd1\xfe\x25\xab\xe0\x97\x65\x51\x10\x37\x4f\x62\x2c\xde\x65\xc5\xf8\x7d\x14\x7d\x2b\xd1\xad\x49\xe1\x8f\xe8\x48\x14\x56\x81\x11\x15\x06\xd0\x10\x40\xd4\xe0\xa0\xc2\x80\xce\x5f\x88\xfb\xfc\xea\xfa\xf6\x66\x24\xb2\x2f\xe5\x6c\x9a\x5f\x66\x8f\xc5\xc3\xac\x3b\x8b\x72\x5e\x93\xb3\x5c\x21\x87\x4b\x32\x98\x26\x18\x54\xd2\x5d\x31\x19\xb4\x62\xe4\x75\x74\x24\xae\x8c\x9d\x83\x11\xc0\x5a\xf8\x00\x81\xd4\x5f\x1e\x9f\xb3\xaf\xb3\xbb\xdb\x69\x39\x12\x9f\x8a\xc7\xf2\x21\xbf\x9f\x4d\x6f\xca\x91\xb8\xb9\x9d\xe6\xb3\x22\xfb\x98\x17\xe5\x3f\xbd\xfa\x65\x7b\xab\x6e\x17\xb6\x2c\xdf\x70\xda\x4b\x5e\xdf\xfd\x97\x9c\x69\x85\xf6\xa2\x51\xfe\x84\xaa\x0c\xe0\x42\x7a\xf0\x98\x34\xde\x25\x73\xe2\xe1\x03\xf1\x3d\x12\x42\x4a\xb6\x1a\x25\xd5\xe9\xf1\xb6\x37\xdb\xf5\x40\x99\xc6\x07\x74\x52\xb3\x4f\x8f\xb7\x07\x9b\x0e\x03\x15\x3c\xc9\xda\xea\x96\x0e\x89\xec\x0e\x45\x0d\xcc\xd1\xf8\x41\xb8\x0b\x66\x18\x00\x63\xec\x46\xd6\x8e\xd6\x64\x70\x89\x3a\x0d\xae\xc1\x9e\xd5\x56\x4b\xe2\x85\x03\xa9\x2c\x07\x20\x46\x27\xa9\x82\x25\xa6\xe7\x27\xe3\xc9\xc9\xe9\xe9\xe4\x6c\xf2\x61\x1c\xeb\x95\x8b\x51\xb9\xf8\x78\xfb\xba\xeb\x5d\x0c\xfb\x9f\x08\x36\x3e\x56\xb6\x6a\xa3\x4a\x6a\x68\x3c\x4a\xa8\xf4\xf9\xe4\xe2\x2c\x3e\x7d\xd9\xd2\x36\x5a\xd6\xce\xae\x49\xa3\x4b\x61\xe3\x07\xc0\x24\xe7\xc4\x52\x93\x4b\x13\x5b\x87\x44\x31\xb5\xf1\x1d\x60\x65\x79\xd1\xf1\xb6\x8e\x96\x33\x86\x58\x0f\x13\x2f\x97\x77\x0d\x07\xaa\x30\xd5\x56\xad\xd0\x0d\x11\x61\xd8\x58\xb7\x92\xb5\x69\x96\xc4\xa9\x62\xea\x81\xc3\x25\xed\x83\x6f\x43\x3c\xcc\xa5\xed\xad\xb5\xa4\xe5\xab\xfe\xbb\xe3\xf8\x19\x2a\xf3\xc7\xfd\xad\x41\x83\xa1\x47\xf1\x4f\x6f\x39\xfa\x1d\x00\x00\xff\xff\x8a\xde\x69\x62\xa4\x03\x00\x00")

func _10EkscltAl2ConfBytes() ([]byte, error) {
	return bindataRead(
		__10EkscltAl2Conf,
		"10-eksclt.al2.conf",
	)
}

func _10EkscltAl2Conf() (*asset, error) {
	bytes, err := _10EkscltAl2ConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "10-eksclt.al2.conf", size: 932, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapAl2Sh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcb\xb1\x0a\xc2\x40\x10\x04\xd0\xfe\xbe\x62\x8d\x16\x5a\xdc\x2d\x4a\x14\x14\xb4\xd2\xc2\x46\xfd\x03\xd9\x5c\x16\x12\xb2\xb9\x0b\xb9\x4d\xc0\xbf\x17\x24\x48\xaa\x81\x37\x33\xcb\x05\x16\x75\xc0\x54\x81\xe5\xc1\x18\xf6\x55\x84\xec\xf1\xbc\xde\xde\xf7\xd7\x79\xb5\xf6\x43\x2f\x60\x6d\xaa\x85\x83\x42\xa5\xda\x9d\x10\xb7\x87\xa3\xdb\xed\x73\x37\x25\x0a\x29\x27\xc5\x96\x95\x6c\x49\x4a\x28\xd1\x93\xd8\xba\x1b\xf3\x4d\x06\x17\x40\x56\x8f\xdc\x24\xaf\x82\xcd\x50\xb0\xb0\xba\xdf\xc4\x71\x18\x8d\x49\x9f\xa4\xdc\x7a\x15\x28\x89\xdb\x18\x6c\xcf\x12\xa9\x9c\x39\x07\x2a\x84\x61\xfa\xce\x8a\xa4\xd4\xeb\xdf\xbf\x01\x00\x00\xff\xff\xc9\xa6\xc0\x6c\xcc\x00\x00\x00")

func bootstrapAl2ShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapAl2Sh,
		"bootstrap.al2.sh",
	)
}

func bootstrapAl2Sh() (*asset, error) {
	bytes, err := bootstrapAl2ShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.al2.sh", size: 204, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapUbuntuSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x94\xe1\x6a\xe4\x46\x0c\xc7\xbf\xfb\x29\xd4\xbd\x40\x13\xb8\xb1\x93\xdc\x5e\xa0\x01\x97\xa6\x97\xb4\x1c\x4d\x93\x23\xc9\x71\x85\x52\x16\x79\x46\x5e\x0f\x3b\x1e\x99\x19\x79\xdd\x5c\xc8\xbb\x97\x59\xaf\xf7\x36\x81\xb6\xec\x87\xf5\x48\x3f\xc9\x1a\xe9\x6f\xbd\xf9\xae\xa8\xac\x2f\x2a\x8c\x0d\x28\xea\xb3\x8c\x74\xc3\x30\xbb\xb9\xbd\xbc\x5a\x7c\xfc\x54\x1e\x1c\xea\x3e\x38\x50\x2a\x5a\x47\x5e\xa0\x11\xe9\xce\x8b\xe2\xe4\xec\x87\xfc\xf4\xfd\x3c\xdf\xfe\x17\x0e\x85\xa2\x14\x2d\x09\x2a\x83\x82\x85\x63\x8d\x4e\xd9\x6e\x3d\x3f\x9a\xc1\x8f\x50\x90\xe8\x82\x56\x51\x8b\x2b\x56\x7d\x45\x8e\x24\xdf\x20\x39\xf9\x75\x96\x45\x8f\x1d\xa0\xb3\x18\x61\xeb\x55\xb4\x8a\xf9\xf6\x79\xb2\xbd\xc6\xb4\xb8\x1d\xa6\xc5\x4d\xb6\x11\x8b\xc2\xdd\x7e\xb2\x2c\x3e\x46\xa1\x36\x71\x81\x22\x89\xaa\xd1\x3a\x32\x59\x76\x98\x01\xbc\x81\x87\xdb\xcb\xdb\x73\x90\x86\x22\x41\x6c\xb8\x77\x06\x2a\x02\xc7\xbc\x22\x03\x28\x40\x6b\x0a\x8f\x20\xb6\xa5\x29\x29\x44\xc1\x20\x11\xfa\xee\xed\x26\xc3\xd0\x58\xdd\x80\x8d\x30\x34\x28\x30\x10\x18\x06\xeb\xe1\xe2\xfa\x14\x0e\x77\xbe\x0a\x23\x19\x60\x0f\x9d\x43\xeb\x61\xac\xc9\x8c\x09\xd0\x1b\x68\x09\xbd\x80\x70\x7a\x79\xc7\x41\xb0\x72\x94\x8e\x2d\x47\x99\x68\x30\x36\x4a\xe0\x78\xf4\x16\xaa\x5e\xc0\xca\xf7\x71\x13\xef\x59\x40\x3b\xc2\x00\x0d\x0f\x29\xc8\x31\x9a\xed\x95\xea\xc0\xed\xb7\xc2\x53\x7f\x06\x2b\x0d\xf7\x02\x0d\xae\xad\x5f\x6e\x12\x08\x83\xee\xa3\x70\x6b\x23\xa5\xb8\x11\xb4\x12\xc9\xd5\x19\x40\xe4\x3e\x68\xfa\x9f\x51\xfe\x27\xf6\xaf\x40\xd2\x4d\x92\xcd\xa8\x06\x80\xda\xe1\x32\x96\x69\x32\x00\x33\x34\x26\x50\x8c\xe5\x71\xbe\xf9\xcd\x46\xab\x67\x43\xca\x76\xe5\xc1\xd3\x56\xaa\xcf\x5b\x87\x76\x7d\x14\x0a\xca\xf8\x58\x1e\x3c\x7d\xb8\xfe\x7c\xff\x70\x75\xb7\xb8\xbc\xb9\x9f\x80\x16\xff\x56\x1d\x9b\xe4\xfd\xfd\xe2\x8f\xc5\xa7\xdb\xcb\x9d\x6b\x93\xd4\x61\x45\x2e\x4e\x89\xaf\x2f\x7e\xbe\xba\xde\x01\xd8\x4b\x43\x5e\xac\x46\xb1\xec\x95\xf0\x8a\xbc\x1a\xa8\x6a\x98\x57\xa5\x84\x9e\xf6\x38\x0e\xf6\xeb\x88\xb5\x6c\xa8\xfc\x32\x52\x13\xe0\x1c\x0f\xaa\x0b\x76\x6d\x1d\x2d\xc9\xec\x07\x77\x6c\x94\xf5\x75\x40\xa5\xd9\x0b\x5a\x4f\x41\xd9\x16\x97\x54\x9e\x1d\x9f\xce\x8f\x4f\x4e\xe6\xef\xe6\xef\x4f\x73\xb3\x0a\x39\xe9\x90\x1f\x3c\x5d\x7c\xb9\x5f\x5c\x5e\xfd\x72\xf1\xf9\xfa\x61\x71\x77\xf5\xeb\xc7\xdb\x9b\xe7\x1c\x5b\xfc\xca\x1e\x87\x98\x6b\x6e\x53\x9f\x8b\x0e\xfb\x48\x0a\x5b\x73\x36\x3f\x7f\x97\x9f\xec\xda\xc5\xbd\x51\x5d\xe0\xb5\x35\x14\x4a\x1c\xe2\xeb\x3e\x72\x8b\xd6\x97\xdb\xe3\x38\xea\x09\xf1\x56\x55\xd6\x2b\x63\x43\x59\x70\x27\x85\xf6\x36\x6d\x93\x3d\xb7\x66\x5f\x8f\xfe\x34\xee\xe4\xf7\x24\xb9\x99\x88\xdd\xfd\x42\xef\xd3\xc7\x55\x1a\xd6\x2b\x0a\xd3\x38\x48\x06\x0e\x2b\xd5\xb9\x7e\x99\x4a\xf0\x76\x8a\x5b\x06\xee\x3b\x65\x82\x5d\x53\x28\xc7\x53\x3d\x15\x1e\x68\x69\x37\x95\xa7\x69\xee\xf7\x75\xb3\x1f\xd8\xd7\x76\x59\xbe\x56\xe7\x68\xce\x1f\xb1\x9d\xee\x56\x13\x4a\x1f\x48\x2d\xd3\x66\x2b\xef\x58\x50\xe8\xb7\x51\xc7\xf7\x14\xd6\x14\x3e\x50\x10\x5b\x27\x25\xbc\x78\x09\x7a\xf6\x8f\x2d\xf7\x51\x25\x0d\x94\x35\xba\x48\xbb\x8e\x5a\xf2\xa2\x34\xaa\xda\x3a\x7a\x51\x83\xc6\x5c\x07\x49\xdc\x51\xd2\xff\xb8\xc1\xbe\x6d\xbe\xb4\xc0\x60\x76\xf0\xb4\xf9\x2e\xfe\xfc\xe9\xaf\xe7\x59\x76\x94\x4d\x7b\x0e\xc3\x0b\x2e\xfb\x27\x00\x00\xff\xff\xcb\x67\xce\x59\xd2\x05\x00\x00")

func bootstrapUbuntuShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapUbuntuSh,
		"bootstrap.ubuntu.sh",
	)
}

func bootstrapUbuntuSh() (*asset, error) {
	bytes, err := bootstrapUbuntuShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.ubuntu.sh", size: 1490, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kubeletConfigJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\x4d\x6f\xf2\x30\x10\x84\xef\xfc\x8a\xc8\x67\x94\x84\xf7\x15\x52\xcb\x8d\x82\xda\x43\x39\x15\xda\x9e\x1d\x67\x03\x56\x1c\x2f\x5a\xaf\xe9\x97\xf8\xef\x95\x3f\x5a\x0a\x3d\x54\x39\x79\xf4\xec\x78\x36\xe3\x8f\x51\x51\x88\x5e\xdb\x56\xcc\x0a\x71\xef\x1b\x30\xc0\x0b\xb4\x9d\xde\x7a\x92\xac\xd1\x8a\x71\x20\xe4\x5e\x3f\x01\xb9\x70\x9e\x15\xa2\x4f\x5c\xa9\x22\x58\xf6\x57\xae\xd4\x58\x1d\x26\x0d\xb0\x9c\xe4\x81\xb6\x25\x70\x2e\xd0\x75\x19\xbf\xac\x7b\xde\x81\x65\xad\x92\xf9\xac\x08\x01\x82\x6e\xd1\xbe\x0d\xe8\xdd\xb7\x54\x14\x02\xac\x6c\x0c\x84\x68\x9d\x34\x0e\xa2\x7c\x1c\xa7\x81\x17\x68\x76\x88\xfd\x4f\x5c\x49\xb5\x83\xcd\x66\x15\x2e\xfd\x37\xd4\x4e\x8c\x7f\x1b\x31\xf9\x73\x9f\xd7\x69\x7d\x7d\x66\x62\x34\x58\x5e\xcc\x6f\xb5\x81\x60\x54\x01\xab\x0a\x7a\xa7\xd8\x54\x4a\x96\x8a\x58\xa4\xf9\x51\xf6\x88\x2b\x21\xe9\xf7\x8b\x8d\x06\x6c\xa3\xc1\x73\x0e\xfa\x47\xee\x79\x76\x81\x36\x6f\x30\x3d\xdb\x20\x32\x8f\x56\x5e\x52\xff\x6b\x77\x99\x47\x19\xef\x18\x68\x89\x83\xd4\xb1\xae\x2c\x94\x06\x95\x34\xa9\x06\xb5\x25\xf4\xfb\x25\xe9\x03\x50\x44\xe2\xb9\x4b\x17\x8a\x0e\x24\x7b\x82\x3b\xc9\x70\xea\x43\x3c\x20\x4b\x86\xfc\x46\xd6\x40\x07\xa0\x05\x10\xeb\x2e\x94\x09\xa7\x7f\x9b\x52\xb8\x08\x6c\x56\xeb\x1b\x44\x76\x4c\x72\xff\x45\x1c\x3f\x03\x00\x00\xff\xff\xbb\x62\xda\x19\x74\x02\x00\x00")

func kubeletConfigJsonBytes() ([]byte, error) {
	return bindataRead(
		_kubeletConfigJson,
		"kubelet-config.json",
	)
}

func kubeletConfigJson() (*asset, error) {
	bytes, err := kubeletConfigJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubelet-config.json", size: 628, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"10-eksclt.al2.conf": _10EkscltAl2Conf,
	"bootstrap.al2.sh": bootstrapAl2Sh,
	"bootstrap.ubuntu.sh": bootstrapUbuntuSh,
	"kubelet-config.json": kubeletConfigJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"10-eksclt.al2.conf": &bintree{_10EkscltAl2Conf, map[string]*bintree{}},
	"bootstrap.al2.sh": &bintree{bootstrapAl2Sh, map[string]*bintree{}},
	"bootstrap.ubuntu.sh": &bintree{bootstrapUbuntuSh, map[string]*bintree{}},
	"kubelet-config.json": &bintree{kubeletConfigJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

