// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/10-eksclt.al2.conf
// assets/authenticator.sh
// assets/get_credentials.sh
// assets/get_metadata.sh
// assets/kubeconfig.yaml

package nodebootstrap

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __10EkscltAl2Conf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x4f\x4f\xfb\x46\x10\xbd\xfb\x53\xac\x04\x87\x56\x62\x6d\xc8\x2f\xe5\x80\xe4\x43\x44\x02\x42\x4d\x01\x11\x10\x95\xda\x2a\x9a\xec\x8e\xc3\x28\xf6\xac\x35\x3b\x4e\xf8\x23\xbe\x7b\xe5\x38\x46\x01\xaa\xea\x27\x5f\xbc\xfb\x66\xdf\xbe\x79\xf3\xec\x03\x83\xab\xe8\xb4\xb4\xb1\x46\x47\x05\x39\x13\x5f\xa2\x62\xe5\x8d\x97\x50\x5b\x62\xd3\x30\xa9\x29\x82\x98\x55\xb3\xc0\x12\xf5\x68\xbb\x18\x55\xf0\x1a\xd8\x4c\x89\x9b\x67\x33\x30\xbf\x8c\xa6\x83\x5f\x93\xe4\xaf\x19\xca\x9a\x1c\xfe\x93\x1c\x98\x69\x70\x50\x9a\x0a\x15\x3c\x28\x98\x1a\x04\x2a\x54\x94\x78\x66\xee\x26\x97\x57\x37\xd7\x47\x66\xf4\x38\x9b\x8f\x27\x17\xa3\x87\xe9\xfd\xbc\xdb\x4b\x26\xbc\x26\x09\x5c\x21\xeb\x05\x95\x98\x67\xa8\x2e\xeb\x24\x66\x3d\x57\x8a\xbc\x4e\x0e\xcc\x65\x19\x16\x50\x1a\x60\x6f\xa2\x82\x92\xfb\x74\xc7\x1f\xa3\x3f\xe7\xb7\x37\xe3\xd9\x91\x39\x9f\x3e\xcc\xee\x27\x77\xf3\xf1\xf5\xec\x7f\xe9\x77\xfd\xed\xd8\x3b\xf9\x1c\xd8\xfe\x07\xf9\xf5\xcd\x78\x32\xbf\xba\xfd\x29\xba\xb2\x25\xda\x92\x26\x93\x67\x74\x33\x05\xd1\x7c\xef\x35\x6b\xa2\x64\x0b\xe2\xfe\x80\xf9\x3b\x31\xc6\x5a\xf0\x5e\x30\xc6\xfc\x38\xdd\x3e\xbb\x5d\x0e\x1e\x2d\xd5\xf9\xe1\xdb\x4e\xc2\xfb\x0e\x70\x65\x13\x15\xc5\x7a\x8e\xf9\xe1\xdb\x5e\xcb\x7d\x41\x05\xcf\xb6\x0e\xbe\x45\x7b\x6b\x7a\x08\x1a\x7d\x42\x56\x72\xa0\x14\xd8\x6a\x58\x21\xdb\x0d\x2e\x9e\x42\x58\xed\x95\x04\xa1\xd7\xae\xa2\x0a\x1e\xf3\xc7\xcf\x05\x65\x19\x36\xb6\x16\x5a\x53\x89\x4b\xf4\xb9\x4a\x83\x3b\xac\x0e\xde\x12\x17\x02\xd6\x05\x56\x20\x46\xb1\x54\xc1\x12\xf3\xd3\xe3\xc1\xf0\xf8\xe4\x64\xf8\x63\xf8\xdb\x20\xf5\x2b\x49\xd1\x49\x7a\xf8\xf6\x3d\x17\xef\x29\x6c\x03\x07\x9b\x98\xba\x50\xb5\x1e\x67\x35\x34\x11\x2d\x54\xfe\x74\x78\xf6\x23\x3d\xf9\x30\x22\x34\xde\xd6\x12\xd6\xe4\x51\x72\xd8\xc4\xaf\x0e\x85\x0a\x88\xf3\xdd\xb2\x1b\x4f\x5f\xc2\x64\x17\xc4\xd6\x93\xe4\x59\xa8\x35\x73\x4c\xed\x68\xf6\x60\x17\xb8\xe8\xf0\x76\xd4\x2d\xce\xa8\xa9\xef\x2b\x3e\xfa\x93\x86\x95\x2a\xcc\x7d\x70\x2b\x94\x7e\x7a\xa8\x9b\x20\x2b\x5b\x97\xcd\xb2\x95\xc0\xd4\x9f\x5b\x4a\x68\x6a\xeb\x85\xd6\x28\x79\xb7\x2a\x7a\xe1\x82\x4b\xda\x2a\x6f\x87\xbf\xef\x6b\x1b\x98\x56\x0f\x2d\xbf\x05\xaf\xdb\x4e\x5f\xa0\xea\x7b\x2b\x10\xb4\x11\xb4\x4b\x50\x8c\xf9\x5d\x50\x50\xfc\xbd\x4b\x5c\xfb\xd1\xa2\x9c\xa3\x68\xfb\x03\x00\xfd\x74\x09\x70\xe0\x97\x2a\x34\x71\x9b\x81\xbc\x80\x32\xe2\x87\xa3\x84\xac\xd6\x81\x2d\xbe\x86\xdf\x41\xea\x44\x93\x7f\x03\x00\x00\xff\xff\xa8\xe6\x02\x07\x5e\x04\x00\x00")

func _10EkscltAl2ConfBytes() ([]byte, error) {
	return bindataRead(
		__10EkscltAl2Conf,
		"10-eksclt.al2.conf",
	)
}

func _10EkscltAl2Conf() (*asset, error) {
	bytes, err := _10EkscltAl2ConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "10-eksclt.al2.conf", size: 1118, mode: os.FileMode(420), modTime: time.Unix(1533737447, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x41, 0x3, 0xc, 0x11, 0x90, 0x3a, 0x28, 0x60, 0x6f, 0x34, 0x51, 0x44, 0x54, 0x45, 0x93, 0x1f, 0x12, 0x5b, 0xff, 0x54, 0xcc, 0xac, 0x2e, 0xd6, 0x74, 0x3b, 0xca, 0x88, 0x99, 0x9a, 0x1a, 0xae}}
	return a, nil
}

var _authenticatorSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcf\xcf\x4a\xf5\x30\x14\x04\xf0\x7d\x9e\x62\xbe\xdb\x0f\x54\xb0\xed\x33\x5c\xa4\x2b\xff\x2c\xac\xe2\xb2\x3d\xb7\x3d\x6d\x43\xd3\x9c\x90\x9c\xdc\x22\xe2\xbb\x8b\xe8\x42\xc1\xed\x0c\x03\xf3\x2b\xfe\xd5\x27\xeb\xeb\xb4\xa0\xe4\x6c\x4c\x81\xd6\x6e\xc1\x31\xf6\x48\x21\x70\xc4\x24\x11\x94\x75\x61\xaf\x76\x20\x95\x78\x8d\x24\xd8\x19\x03\x79\x44\xa6\x11\xc7\x97\xb6\x6b\x6e\xdb\xee\xe6\xee\xb9\x7d\x6a\x1e\xbb\x87\xe3\x7d\x83\x29\xca\x86\x7e\x63\xa5\x91\x94\x2a\xf6\xe7\xde\x14\xb0\x3e\xe9\xe7\x44\x26\x2c\x74\xb6\x7e\x86\x0a\x72\x18\x49\x19\xfd\x9a\x4f\x3c\x88\x9f\xec\x5c\xbd\xd2\xe6\x7a\x5c\x52\xfa\x4e\xd5\xe1\xab\xe9\x31\x0a\x27\x7f\xa1\x48\x39\x04\x89\x8a\xe0\xf2\x6c\x3d\x26\xcb\x6e\x4c\x57\xc6\x54\xa8\x59\x87\x9a\xd7\x34\xa8\xab\x7f\x1e\x30\x66\xe1\xa0\x56\xca\x5f\x9c\x92\xf6\x04\x95\x95\x3d\x4a\x8b\xc3\xff\xb7\xbf\x38\xef\x87\x8f\x00\x00\x00\xff\xff\xb2\xc5\x14\x0e\x27\x01\x00\x00")

func authenticatorShBytes() ([]byte, error) {
	return bindataRead(
		_authenticatorSh,
		"authenticator.sh",
	)
}

func authenticatorSh() (*asset, error) {
	bytes, err := authenticatorShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "authenticator.sh", size: 295, mode: os.FileMode(493), modTime: time.Unix(1533737447, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x24, 0x41, 0xfb, 0x80, 0xf8, 0xd1, 0xf0, 0x5f, 0x67, 0x3b, 0x11, 0xf7, 0xdd, 0x6f, 0x96, 0x7d, 0x55, 0x95, 0x97, 0xf8, 0x6e, 0x76, 0x7f, 0x11, 0xb7, 0xc, 0x25, 0x83, 0xd7, 0x44, 0xf9, 0x97}}
	return a, nil
}

var _get_credentialsSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\xcd\x6e\xdb\x30\x10\x84\xef\xfb\x14\x53\xc6\x40\x92\x83\xa4\x4b\xd1\x5b\x0a\xb8\xa9\x12\x18\x71\x6d\xc0\x8e\xd1\x4b\x01\x85\xa2\xd6\x35\x63\x99\x54\xc9\x55\x7e\xe0\xf8\xdd\x0b\xa5\x92\x91\xe6\x90\xe3\xee\x60\x86\xc3\x8f\x3c\xf9\x94\x95\xd6\x65\xa5\x8e\x1b\xa2\x13\xcc\x4b\xd1\xd6\xc1\xd4\x6d\x14\x0e\x30\x81\x2b\x76\x62\x75\x1d\xa1\x5d\x85\xb6\xa9\xb4\x30\xee\xb6\x6d\xc9\xc6\xbb\xb5\xfd\x9d\x3e\xeb\x5d\x7d\x87\x47\x2b\x1b\xe8\xc6\x46\x0e\x0f\x1c\xb0\x5a\x4c\x89\x22\x0b\x12\x0f\x0e\x81\x9f\xac\x0c\x63\x63\x1b\x5e\x6b\x5b\x0f\xb3\xf3\xad\x8b\x2c\x44\xd1\xb7\xc1\x30\x32\x16\x93\xf1\x36\x1a\xa9\xb3\x1d\x8b\xae\xb4\xe8\x94\xdd\x03\x11\x3f\x35\x3e\x08\xc6\x3f\x97\xc5\xf7\xfc\x6a\xbc\x9a\xde\x16\x8b\xfc\x7a\x32\x9f\x0d\xca\xcd\xea\x5b\x7e\x39\x9f\x5d\x4d\xae\x2f\xd4\xdb\x98\x77\x6d\x15\x51\xc5\xd1\x04\x5b\x72\xd1\x5f\xf4\xec\x1c\x7b\x02\xf4\x63\x04\x6f\x23\x06\x39\x19\x38\xfc\x22\x00\x48\x12\xdf\x4a\xd3\x0a\xee\xa3\x77\xc7\x9d\xd3\x3b\x86\x1a\xed\xbb\x5e\xf9\xcd\xb2\xb8\x9c\xae\x96\xb7\xf9\xa2\x98\x8d\x7f\xe4\x07\x45\x07\xa2\x3e\x65\xe2\xd6\xfe\x42\x8d\xce\xde\x1f\x7e\xae\x88\xd8\x55\x8d\xb7\x4e\x3a\x9d\xcd\xc6\x77\x81\x6f\x6c\x07\x85\x17\xdc\xff\x41\x12\x90\xf6\xeb\x74\xb0\xbc\xda\x3f\xb4\x9c\x1e\x3d\x86\x83\xd8\xb5\x35\x5a\x78\xdc\xca\xc6\x07\x2b\xcf\x69\x47\xf8\x14\x2f\x28\x75\xe4\x2f\x9f\x91\x54\xf8\xfa\xdf\x2b\x18\x9d\x9a\x20\x44\xaf\x18\xa5\xc6\x3f\x94\x88\x2c\x47\x3e\x9d\x14\x1c\x0b\x47\x24\x49\xff\x07\xd4\x68\x3f\x54\x3c\x28\xa2\xbf\x01\x00\x00\xff\xff\xe2\xe9\xad\xa5\x69\x02\x00\x00")

func get_credentialsShBytes() ([]byte, error) {
	return bindataRead(
		_get_credentialsSh,
		"get_credentials.sh",
	)
}

func get_credentialsSh() (*asset, error) {
	bytes, err := get_credentialsShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "get_credentials.sh", size: 617, mode: os.FileMode(420), modTime: time.Unix(1533737447, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1d, 0xb1, 0xd, 0xd, 0xa8, 0xad, 0xb6, 0x56, 0xf8, 0x35, 0xd6, 0xd9, 0x39, 0xff, 0x52, 0x5, 0xf7, 0xeb, 0x62, 0xea, 0x6b, 0x2, 0xd4, 0xe6, 0x6e, 0x91, 0xb7, 0x23, 0x71, 0xb8, 0xae, 0xc4}}
	return a, nil
}

var _get_metadataSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\xdf\x6f\xe2\x46\x10\x7e\xf7\x5f\x31\xdd\x20\x71\x48\xd8\x2e\x69\xae\xb9\x46\xf2\x55\x51\xa1\x15\xca\x35\x9c\x2e\xb9\xf6\xa1\x3d\x91\xc5\x1e\xcc\x5e\x96\x5d\xdf\xee\x18\x07\x11\xfe\xf7\x6a\x8c\x21\x2e\x49\xdb\xeb\x93\xe5\xf9\xf1\xcd\xcc\x37\xf3\xed\xc9\x37\xf1\x4c\x99\x78\x26\xfd\x22\x08\x4e\x60\x32\x23\xa9\x0c\x2c\x91\x64\x26\x49\x82\x9c\xd9\x92\x80\x16\x08\xca\x78\x92\x26\xc5\x3e\x14\xd2\x79\x04\xbc\xf7\x29\x69\x20\x99\xc3\x4a\xea\x12\x81\x2c\x48\x93\x41\xe5\x14\x21\x70\xd6\xdd\x1e\x25\x42\xb3\xba\xab\x9d\x77\xf7\xe5\x0c\x35\x52\xa4\x6d\x2a\x75\x6d\x0f\x4e\x60\x6e\x1d\x58\x5a\xa0\x03\x9f\x3a\x55\x90\xaf\x63\xb9\xa8\x5f\x7b\xc2\x65\x06\xa5\x51\xc4\x05\x4a\x8f\x41\xe0\x91\x20\xb4\x80\xce\xe1\x83\xa2\xfd\x6f\xa1\x0a\x9c\x4b\xa5\xf7\xff\xc6\x96\xc6\x23\xf1\x50\x15\x42\x6a\x4b\x9d\x71\x7a\x0d\x3b\xb7\x5a\xdb\x4a\x99\xbc\x0f\xb3\x92\xd8\xef\x49\x69\x0d\x06\x31\x83\xcf\x5f\xb8\x52\x8e\x04\x0e\x73\x65\x4d\xdd\xcc\x7e\x7a\x18\x0f\x2f\x82\x13\x90\x95\x87\x30\xb4\x25\x15\xcc\x0e\x3e\x10\x84\x61\x13\x5d\xfa\xb0\x42\x4f\xe1\x29\x60\x7a\x0a\x19\xf2\x48\x33\x0c\x49\xe6\x9c\x32\x57\x9a\xd0\x79\xb8\x96\x4b\x4c\x1c\x7a\x5b\xba\x14\x43\x5a\x17\xd8\xff\x8d\x59\xf4\xc9\xa1\xd2\xdf\x43\x54\x76\x08\x08\xbf\x1d\x9c\xe3\x77\xe7\x67\xaf\x4f\x11\x07\x67\xd9\x9b\xec\x1c\xc2\xf0\x4b\x89\x6e\x0d\xe2\x56\xe6\xfe\x8f\x1f\xaf\x70\x9d\x24\xdd\xdd\x86\xa2\x54\x97\x9e\xd0\x45\xf7\x6f\x7c\xa4\x6c\xbc\x1a\x48\x5d\x2c\xe4\x20\x6e\xec\xa1\x91\x4b\xec\x7e\x8a\x6a\x74\xc1\x74\xdd\x4e\x86\x93\x0b\xc0\x87\x02\x9d\x5a\xa2\x21\xa8\x14\x2d\x40\xc2\xd2\x3a\x26\x4a\x92\x4a\x61\x85\xce\x2b\x6b\xfa\x35\xb7\xd2\x40\x21\xbd\x6f\xf3\xd5\x80\x03\x83\xd7\x86\x1c\x0d\x3a\x49\x08\xd5\xc2\x6a\x3c\xbe\x0d\x35\x67\xa0\x4a\x1a\xc2\x0c\xc8\x06\xc1\x9e\x85\xb1\x99\xdb\x44\x74\x5e\xa5\xa5\xd3\x10\x86\x5e\x69\x6e\x68\x41\x54\x5c\xc4\xf1\xe0\xfb\x1f\xa2\xd3\xd7\x67\x51\xf3\x8d\xb5\x24\xf4\x14\x67\x6b\x23\x97\x2a\x8d\xf7\x18\xa1\xca\xd0\x90\xa2\x75\x9c\xd9\xb4\xe4\x89\x7a\xa2\x55\x61\xc8\xf8\x98\x2e\x2c\x88\xce\xa6\x5d\x77\x2b\xe0\x91\xaf\x21\x74\x10\x1d\xec\x59\x4f\xec\x52\x8b\x14\xc7\xef\xbf\x26\xb5\x70\x6a\x25\x09\xc7\x05\x57\xbd\xfc\xfd\x66\x3a\x1c\xfd\x7c\xf9\xf1\xdd\xed\xf4\xc3\xe8\x97\xf1\xe4\xfa\x6b\x20\x76\xc4\x72\x3e\x3e\x14\xd6\x11\x3c\x87\xe1\xc5\x1d\x54\x3b\x57\x1a\x41\x79\x50\x86\xd0\x64\x98\xb5\x14\xc6\x42\x7f\x92\x99\x87\x0a\xb5\xe6\x6f\x5b\x69\xbe\x0f\xde\x82\xa2\x2e\x23\x80\x57\xcb\x42\xb3\x66\xdc\x52\x52\xb0\x6b\xf5\x85\x31\x3a\x9b\xe7\xc6\xad\x00\x78\x0b\x31\x52\x1a\xef\x8e\x31\x6e\xaf\x3d\x68\xc0\xae\x27\xc3\xd1\x74\xfc\x3e\x69\xe6\xaf\x89\xdd\x8a\xa3\xc4\x67\x0f\x47\x10\xe4\x48\x53\x96\xd5\xab\x1e\x6c\x02\xa8\x35\xf9\x5c\x72\x7f\x06\x00\xf0\xa4\xd5\xcf\xde\x9a\x83\x6d\x2f\x46\xf1\xdf\x6a\x14\xc7\x41\x4f\x7a\x6c\xad\x6d\xb8\x15\xc1\x76\xd7\x58\x23\x80\x29\x0b\xa0\x69\x10\x9a\x75\x76\xa3\x5a\xa5\x9f\xe0\x11\x3c\x6a\x4c\xe9\x55\x74\x85\x6b\x48\x12\x10\xff\x43\xb2\xa2\x07\x8f\xb0\x53\x6d\x97\x8b\xa6\x0b\x4c\xef\x0f\x65\x6d\x65\x30\x3b\xd4\x25\x99\x27\x82\x19\x74\x06\x09\x6b\xcc\x26\x30\xee\x6c\x06\x5b\x71\x68\x2e\x94\x2e\xaf\x9f\x74\xd1\xd9\x90\xcc\xb7\xe2\xdf\xfb\xed\x90\xcc\x8f\xda\x60\xd2\xf9\xa4\xf7\xcb\xe1\xa3\x6d\x73\xd1\x3e\x77\xf6\xd7\x67\x7e\x4c\x18\x27\xb1\x94\xe1\xa5\xe0\x17\x06\x65\x7f\x3b\x7f\x2b\x7a\x02\x12\x10\xb5\x53\x04\xad\xa3\x1d\x5d\xdd\x4c\x7f\x7a\xf7\xf1\xe6\x76\xf4\x61\x7a\x7d\xf9\xeb\x28\x39\x4e\x04\x78\xfb\xcf\x17\xfb\x57\x00\x00\x00\xff\xff\x34\x10\xc0\x45\x2d\x07\x00\x00")

func get_metadataShBytes() ([]byte, error) {
	return bindataRead(
		_get_metadataSh,
		"get_metadata.sh",
	)
}

func get_metadataSh() (*asset, error) {
	bytes, err := get_metadataShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "get_metadata.sh", size: 1837, mode: os.FileMode(420), modTime: time.Unix(1533737447, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6c, 0xdd, 0xa2, 0x9a, 0x4f, 0xcf, 0xc6, 0xd, 0x9c, 0x94, 0x3e, 0xf2, 0x66, 0xef, 0xcc, 0x76, 0xd6, 0xf7, 0xf7, 0xe6, 0x2e, 0xe1, 0x77, 0xa5, 0x4, 0x74, 0x97, 0xdc, 0x43, 0x91, 0x6b, 0xa3}}
	return a, nil
}

var _kubeconfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x41\x8f\xd3\x30\x10\x85\xef\xfe\x15\x4f\xdb\x2b\x4d\xd5\x1b\xca\x0d\xad\x38\x20\x21\x90\x10\x70\xa5\x83\xf3\xda\x8c\xea\xd8\x91\x67\xd2\xdd\xfd\xf7\xc8\x21\x0b\x3d\xec\x6d\x34\x33\xef\xbd\xf1\xe7\x1d\x3e\x65\x75\x95\x84\xd3\x75\xf9\xcd\x58\xf2\x59\x2f\xdd\x8b\x4c\xe9\x04\xe7\x34\x27\x71\x86\x1d\x4e\x17\xfa\xaf\x58\x39\x30\xb7\x65\xeb\x6c\x3c\xe1\xa9\xaa\xd3\x50\x16\xc7\xe3\x07\x44\x56\x7f\x07\xc9\x03\x8c\x6e\x90\x59\x8d\xf5\xc6\x8a\x1f\xdf\x3e\x87\x1d\xbe\x7c\xfd\xfe\xb1\x87\x8f\x34\x22\x96\x69\x62\x76\xc3\x93\xa6\x84\x5c\x1c\x32\xcf\x94\x0a\x39\x3b\x2b\x7c\x54\xc3\x59\x13\x0d\x97\x66\xb5\xcc\x83\x38\x87\x20\xb3\xfe\x64\x35\x2d\xb9\xc7\xed\x18\xae\x9a\x87\x1e\x8f\xeb\xc5\x21\xa6\xc5\x9c\xd5\xfa\xb0\xc7\x56\xf7\x01\xc0\x7a\x96\x9e\x35\x8a\x73\x2f\x8b\x8f\xa5\xaa\xbf\xf4\x78\x38\xd0\xe3\x81\x57\x8b\x9e\x0e\x51\xba\x58\xfd\x21\x00\x59\x26\xf6\x68\x24\x6a\xa6\xd3\x42\x2c\xd9\xf9\xec\xab\xef\xff\x61\xa2\x07\x60\x9b\x6d\x39\x5b\xe8\xbd\xb8\xf5\x17\x7b\x6d\x26\x3a\x10\xe2\x52\x2b\xb3\xef\x5f\xc5\xff\xfc\xda\xe2\x9b\x31\xab\xc3\xea\xc5\x67\xc6\xbf\x15\x70\x0f\x23\x26\x65\xf6\xae\x3d\xaf\xfd\x4f\x14\xd7\x92\xbb\xeb\x7b\xeb\xb4\x1c\x6e\x47\x49\xf3\x28\xc7\x4d\xd7\xd8\x4b\x03\x77\x0f\xe0\x4e\x59\x6a\x67\xe3\x9f\x00\x00\x00\xff\xff\xf3\x8f\xab\xb4\x16\x02\x00\x00")

func kubeconfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_kubeconfigYaml,
		"kubeconfig.yaml",
	)
}

func kubeconfigYaml() (*asset, error) {
	bytes, err := kubeconfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubeconfig.yaml", size: 534, mode: os.FileMode(420), modTime: time.Unix(1533737447, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa0, 0x93, 0xd0, 0x68, 0x60, 0x69, 0xf4, 0x6d, 0x37, 0xdf, 0x47, 0x73, 0x4f, 0x94, 0xa7, 0xdf, 0xed, 0xf1, 0x52, 0x91, 0x84, 0x23, 0x18, 0x24, 0xdb, 0x99, 0x4c, 0x6a, 0xc4, 0x5d, 0xee, 0x8}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"10-eksclt.al2.conf": _10EkscltAl2Conf,

	"authenticator.sh": authenticatorSh,

	"get_credentials.sh": get_credentialsSh,

	"get_metadata.sh": get_metadataSh,

	"kubeconfig.yaml": kubeconfigYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"10-eksclt.al2.conf": &bintree{_10EkscltAl2Conf, map[string]*bintree{}},
	"authenticator.sh":   &bintree{authenticatorSh, map[string]*bintree{}},
	"get_credentials.sh": &bintree{get_credentialsSh, map[string]*bintree{}},
	"get_metadata.sh":    &bintree{get_metadataSh, map[string]*bintree{}},
	"kubeconfig.yaml":    &bintree{kubeconfigYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
