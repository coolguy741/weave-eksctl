// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/10-eksclt.al2.conf (1.01kB)
// assets/bootstrap.al2.sh (1.2kB)
// assets/bootstrap.ubuntu.sh (2.05kB)
// assets/kubelet.yaml (464B)

package nodebootstrap

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __10EkscltAl2Conf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xc1\x6e\x9b\x40\x10\xbd\xf3\x15\x2b\xc5\x87\x56\xf2\x82\x9a\xde\x22\x71\xa0\x98\xa4\xa8\x04\x47\xc6\x69\x2b\xb5\x15\x5a\xef\x8e\x9d\x91\x97\x59\xb4\x2c\xb6\x53\xcb\xff\x5e\x61\x4c\x4b\xd4\xa8\xea\x0d\xe6\xcd\xbc\xf7\x66\xf6\x5d\x31\xd8\x36\xd2\x69\xde\xd4\x20\x71\x8d\x92\x35\xcf\x8d\x83\x4a\x31\x65\x4d\xcd\x91\x58\x4b\xe8\xd8\xda\x58\xb6\x6d\x57\xa0\xc1\x4d\xcf\x3f\x51\x25\x7e\x1a\x62\x19\x52\x7b\x60\xd7\xec\x4d\x94\x5d\xbf\xf5\xbc\x6f\x05\xd8\x1d\x4a\xf8\xe1\x5d\xb1\xcc\x48\xa1\x59\x05\x4e\x28\xe1\x04\xab\x85\x15\x15\x38\xb0\xcd\x0d\x5b\x24\x77\xe9\x3c\x9f\xb2\xe8\x4b\x51\xce\x92\xdb\xe8\x31\x5b\x96\x7d\xcd\x4b\x68\x87\xd6\x50\x05\xe4\x6e\x51\x43\x18\x80\x93\x41\x6f\x31\x18\xb8\x7c\xa0\x9d\x77\xc5\xee\xb4\x59\x09\xcd\x04\x29\xd6\x38\xe1\x50\xbe\xd0\x88\xb3\xc7\x62\x99\x2c\xca\x59\x5e\x4c\x59\x3e\x9f\x25\x65\x16\x7d\x48\xb2\xe1\x67\x19\xa5\xf9\xb2\xf8\xa7\xdc\x65\xdf\x8b\x5a\xbf\x0e\x19\xe2\xaf\x88\x9d\x29\xd3\x87\x29\x4b\xf3\x62\x19\xe5\x71\x52\xa6\xb3\xff\xe2\xd6\x1d\xeb\x59\xc1\x4b\x0e\x20\x0b\x27\xac\x0b\x47\x9f\x41\xdb\xd8\x60\x85\x34\x0c\xb0\xef\x1e\x63\x9c\x93\x51\xc0\xb1\x0e\x27\xc7\x8b\xf2\x69\x0c\x68\xb1\x02\xdd\x0c\x60\xbf\xf6\x69\x2a\x74\xfd\x24\xfc\x5e\xdf\x47\x13\x20\x35\x4e\x90\x04\x8e\x2a\x9c\x1c\x47\xc6\x07\xae\x4a\x1c\x78\x6d\x54\x47\x74\x1f\x7d\x2d\x1f\xe6\xb3\x62\x80\x2c\x6c\xb0\x71\x60\xcf\x7a\xa1\xb3\x2d\x8c\x8b\x7b\x74\x4f\xdc\x09\x24\xf7\xdb\x44\x7f\xee\x61\x5c\x68\x6d\xf6\xbc\xb6\xb8\x43\x0d\x1b\x50\x3d\x43\x8f\x49\x6d\x5a\xc5\x6b\x6b\x76\xa8\xc0\x86\x62\xdf\x0c\x80\xa1\x8e\x13\x2c\xb7\x2d\x39\xac\x20\x54\x46\x6e\xc1\x0e\x9b\x83\xdb\x1b\xbb\xe5\xb5\x6e\x37\x48\xa1\x24\x1c\xe6\x08\xf9\x0a\x89\x2b\xb4\x61\x60\x6a\x17\x48\xc2\xee\xa4\x23\x58\x1a\x5a\xf7\x78\xf7\x44\x1d\x4e\xe0\x7c\x75\xe9\xa8\x8d\xe2\x48\x6b\x2b\x46\x16\xb0\x12\x1b\x08\x27\xc7\x2e\xc1\xc9\xa7\xa2\x4c\xe2\x45\x19\xc5\xf1\xfc\x31\x5f\x9e\x7c\xb5\xb5\x3e\x48\xeb\xf7\xf0\xcb\x80\x9f\x2e\xd5\x22\x59\x7c\x4e\xe3\xa4\x28\x67\xf3\xfb\x28\xcd\x4f\x5d\x30\x82\x5a\xb4\x0d\xf0\xc9\x31\x5a\xc4\x1f\x4f\x37\xef\xfd\x77\x17\x07\xdd\xe3\x77\x1e\x71\xf3\x57\x88\xfa\xb2\xff\x2c\x2a\xfd\xe7\x4e\xaf\x35\x76\x69\xeb\xba\xbc\x5f\x01\x00\x00\xff\xff\xdf\x63\x59\xbf\xf2\x03\x00\x00")

func _10EkscltAl2ConfBytes() ([]byte, error) {
	return bindataRead(
		__10EkscltAl2Conf,
		"10-eksclt.al2.conf",
	)
}

func _10EkscltAl2Conf() (*asset, error) {
	bytes, err := _10EkscltAl2ConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "10-eksclt.al2.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9f, 0xb5, 0x5e, 0x9a, 0x1a, 0x86, 0x84, 0x57, 0xc0, 0x1, 0x27, 0x8c, 0x9d, 0xaa, 0x2e, 0x26, 0x51, 0x17, 0x4, 0x94, 0x7a, 0x1b, 0xd7, 0x3e, 0xfd, 0x39, 0xe1, 0xab, 0xff, 0x7f, 0x7b, 0x4a}}
	return a, nil
}

var _bootstrapAl2Sh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\x5d\x6f\xe2\x3a\x10\x7d\xf7\xaf\x98\x9b\x46\x2d\xe8\x2a\xe4\xb6\xe2\xa2\xdb\x0f\x2a\x21\xe0\xaa\x3c\x14\xaa\x52\xed\x87\x2a\x36\x32\xce\x64\x63\xd5\xb1\x23\x7b\xc2\xb6\x8a\xb2\xbf\x7d\x15\x1a\xaa\xb0\xcb\xbe\x54\xfb\x14\xcf\x9c\x39\x67\x9c\x99\xe3\xa3\xbf\xc2\xb5\xd4\xe1\x9a\xbb\x94\x31\x87\x04\x81\x01\xb4\x16\x9f\x25\xed\xc2\x5c\xe6\x98\x70\xa9\x76\xb1\x36\x85\x76\x48\x8c\x25\x85\x16\x24\x8d\x86\xaf\x48\x51\xc6\x9f\xa3\xdc\xc4\xae\xd3\x85\x92\x01\x7c\x4b\xa5\x42\xb0\xc8\x63\x90\xda\x11\xd7\x02\x23\x7a\xc9\x11\xea\x9a\x4b\x88\x0d\x03\x00\x90\x09\xc0\xe3\x23\x78\x7e\xb9\x57\x54\x79\x30\x1c\xd6\xd9\xd3\xca\x83\xd5\x0a\x8e\x8f\x9b\xaa\x9a\x5c\x83\xdf\xe1\xcb\xe3\x3f\xc1\xf9\xea\x6f\xbf\x86\x2f\x81\x52\xd4\x5b\x41\x00\x14\xa9\x81\xa6\xb2\x49\x59\xa4\xc2\xbe\xe2\x89\x64\x00\xb1\xd1\x08\x57\x10\x22\x89\x10\x9f\x9c\x20\x15\xee\x6e\xdf\xcb\x78\xce\x2a\xc6\xe6\x8b\xc9\x34\x9a\xdd\x0d\x3d\xbf\x23\x0a\xab\x20\x08\x9c\x54\xa8\x09\x52\xa2\xfc\x22\x0c\x4f\x07\xe7\xbd\xb3\x7f\xfb\xbd\xe6\x1b\x2a\x4e\xe8\x28\xcc\x90\x78\x10\x73\xe2\xa1\x32\x82\xab\x40\xe6\x9b\x7e\xd7\x63\xb3\xf9\xf2\x61\x34\x1f\x4f\xa3\xd9\xe4\xfd\x8a\xbb\x09\x05\x32\x6e\x4b\x3e\x7c\xbe\x9b\xfe\x01\xd1\x7a\xec\x5d\x8f\xdd\x8e\xc6\x37\xb3\xf9\x74\xe8\x77\x0a\xcd\x33\x84\x20\xeb\xb2\xd1\xc7\x65\xb4\x9c\xde\x7f\x98\x8d\xa7\xcb\x68\xb2\xb8\x1d\xcd\xe6\xef\x6f\xe8\xd0\x6e\xa4\x40\x17\xc6\x26\xe3\x52\x77\x3d\xc6\x64\x02\xf5\x72\x9b\xd6\xaf\xab\x7f\xfe\x6f\x10\x0d\xfa\x1e\xac\x5a\xbb\x1d\xdd\x8f\x6f\x86\x1e\xcf\xe2\x41\xdf\x63\xa8\x0e\xd1\x38\xb7\x22\xfd\x0d\xcf\x66\xaf\x3c\x87\xbf\xaa\xbd\x19\xc7\x5b\x22\x41\x8c\x09\x2f\x14\x41\x2d\x26\x09\x05\x15\x16\x81\x0c\x9c\xf8\x35\xe9\xc4\x83\xeb\xe3\x33\x96\x48\xc6\x9c\x29\xac\xc0\x3d\x23\x3d\x15\x6b\x54\x48\x3d\xd4\x1b\x38\x02\x4a\xa5\x03\xc1\x35\x98\x0d\x5a\x2b\x63\x84\xdb\xd1\xa7\xe8\x6e\x31\x59\x32\x26\x38\xc1\xf5\x41\xee\xd6\x3b\x5b\x85\xab\xab\xe9\xe2\xff\x37\x33\xfa\x65\x73\xaa\xf6\x1c\xe5\x97\xad\xa8\xfa\xc9\x19\x2d\xb0\x8e\xab\x83\xdb\xf4\xcb\x03\xd9\x8a\xed\xee\x3a\xf4\xcb\xdd\xf1\x22\xf0\x3b\xed\xd7\x5e\x3f\xca\xfd\x06\x5e\xb7\x62\xdb\xd9\xfa\x65\xfd\xa9\x58\xfd\x07\xcc\xbd\x38\xc2\x4c\x90\x82\x98\x63\x66\x74\x60\x51\x19\x1e\xb7\xf2\xa8\xf9\x5a\x21\x34\x33\x68\x01\x8e\xb8\xa5\xb7\xfc\x8f\x00\x00\x00\xff\xff\x18\xaa\xe1\x83\xb0\x04\x00\x00")

func bootstrapAl2ShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapAl2Sh,
		"bootstrap.al2.sh",
	)
}

func bootstrapAl2Sh() (*asset, error) {
	bytes, err := bootstrapAl2ShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.al2.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5, 0xad, 0x5d, 0xd8, 0xcb, 0x57, 0x86, 0xff, 0xb1, 0xae, 0x2f, 0xdc, 0x4a, 0x43, 0xaf, 0xb7, 0xb2, 0xa3, 0x97, 0xd9, 0xc5, 0xc0, 0xc6, 0xbe, 0xe6, 0x83, 0x41, 0xf5, 0xf2, 0xec, 0x65, 0x33}}
	return a, nil
}

var _bootstrapUbuntuSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\xef\x6f\xe2\x46\x10\xfd\xbe\x7f\xc5\x94\xa0\x2b\xa8\xb1\xdd\x5c\xd3\x93\x2e\x89\xab\xd2\xc0\x55\xa8\x39\x88\x02\xd7\x1f\x8a\x52\xb4\xec\x0e\x78\xc5\x7a\xd7\xda\x1d\x43\x22\xe4\xfe\xed\xd5\x82\x4d\x48\x74\xbd\x0f\xa7\x7e\xc2\x3b\xef\xcd\xf3\x78\xe6\xed\x70\xf2\x4d\x32\x57\x26\x99\x73\x9f\x31\xe6\x91\x20\xb2\x80\xce\xe1\xa3\xa2\xe6\x58\xa8\x02\x17\x5c\xe9\xe6\x6c\x6c\x69\x3c\x12\x63\x8b\xd2\x08\x52\xd6\xc0\x12\x69\x96\xf3\xc7\x59\x61\xa5\xef\x74\x61\xcb\x00\x36\x99\xd2\x08\x0e\xb9\x04\x65\x3c\x71\x23\x70\x46\x4f\x05\x42\xe0\x5c\x82\xb4\x0c\x00\x40\x2d\x00\xee\xef\xa1\xd5\xde\xbe\x20\x55\x2d\x48\xd3\x10\x3d\xab\x5a\xf0\xf0\x00\x6f\xde\xd4\xac\x90\x1c\xc0\x7f\xe0\xef\xfb\xef\xa3\xf7\x0f\xdf\xb5\x03\x7c\x09\x94\xa1\xd9\x09\x02\xa0\xc8\x2c\xd4\xcc\xcb\x3a\xe6\x90\x4a\xb7\x27\x2c\x14\x03\x90\xd6\x20\x5c\x41\x82\x24\x12\x5c\x79\x41\x3a\x69\xca\x8f\x73\x5e\xb0\x8a\xb1\xd1\xb8\x3f\x98\x0d\x6f\xd3\x56\xbb\x23\x4a\xa7\x21\x8a\xbc\xd2\x68\x08\x32\xa2\xe2\x22\x49\xce\xde\xbd\x8f\xdf\xfe\x78\x1e\xd7\xbf\x89\xe6\x84\x9e\x92\x1c\x89\x47\x92\x13\x4f\xb4\x15\x5c\x47\xaa\x58\x9f\x77\x5b\x6c\x38\x9a\x4c\x7b\xa3\xeb\xc1\x6c\xd8\xff\x7a\xc5\xa6\x45\x91\x92\xc7\x92\xd3\xbf\x6e\x07\xff\x83\x68\xe8\x7b\xb7\xc5\x7a\x7f\x4c\x66\x93\xc1\xdd\xef\xc3\xeb\xc1\x64\xd6\x1f\x7f\xec\x0d\x47\x5f\x2f\xee\xd1\xad\x95\x40\x9f\x48\x9b\x73\x65\xba\x2d\xc6\xbc\x2d\x9d\xc0\x17\xad\x5f\x95\x73\xd4\x48\x31\x9a\x35\x9c\x00\x65\xca\x83\xe0\x06\xec\x1a\x9d\x53\x12\xe1\x63\xef\xcf\xd9\xed\xb8\x3f\x61\x4c\x70\x82\x9f\x3e\x9b\xbb\xeb\xf6\x4e\xe1\xea\x6a\x30\xfe\x70\x18\x5f\x7b\x5b\x3f\x55\x2f\x66\xd0\xde\x1e\x9d\xaa\x57\xbd\x3c\x02\xc3\xb9\x62\x4d\x01\x69\x7b\xdb\x3c\x5e\x44\xed\xce\xb1\xeb\x83\x39\x5f\x66\xb5\xba\x15\x0b\x95\x30\x6f\x78\x01\x5c\x2b\xee\xa1\xae\x36\xc2\x95\x8f\xeb\xe7\x26\xf6\x9a\x26\x48\x1f\x68\x82\x74\x13\xdb\xd3\x3c\xd9\xe2\x58\x8c\xf9\x27\x4f\x98\x07\x9e\x43\x8f\x14\x85\xeb\x8a\x92\xb1\x0e\x03\x38\x81\xe9\xb8\x3f\xbe\x08\x77\xc4\x23\xf8\xcc\x96\x5a\xc2\x1c\x41\x5b\xbb\x42\x09\x9c\x00\xd7\xe8\x9e\x80\x54\x8e\x8d\x28\x78\xe2\x8e\x3c\x94\xc5\xe9\x4e\x61\x93\x29\x91\x81\xf2\xb0\xc9\x38\xc1\x06\x41\x5a\x50\x06\x7a\x37\x6f\xa1\x73\xc0\xe6\xdc\xa3\x04\x6b\xa0\xd0\x5c\x19\xd8\xd7\x24\xf7\x02\xdc\x48\xc8\x91\x1b\x02\xb2\xe1\xe5\x85\x75\xc4\xe7\x1a\xc3\x31\xb7\x9e\x1a\x36\x48\xe5\xc9\x59\xdf\x3d\x85\x79\x49\xa0\xe8\x5b\xbf\xcb\x37\x96\x40\x68\xe4\x0e\x32\xbb\x09\x49\xda\x72\x59\x7f\xd2\xc2\xd9\xfc\xb9\xf0\xd0\x9f\x8d\xa2\xcc\x96\x04\x19\x5f\x2b\xb3\xdc\x09\x90\x05\x51\x7a\xb2\xb9\xf2\x18\xf2\xf6\x44\x45\x1e\xf5\x82\x01\x7c\xc1\x96\x07\x6b\x7d\x99\xf6\x9f\x84\x70\x1d\xc2\x6d\xd8\x31\x18\xc0\x42\xf3\xa5\x4f\x3b\xbb\x6d\xd4\x32\x56\x62\xa4\x8a\x23\x9f\xb6\xf6\x40\xce\x1f\xa3\x60\xac\x23\xcf\x35\xd0\x2e\x47\xf3\x39\x6a\xdf\xe4\xdd\xf4\x7e\x19\xdc\x4c\xaa\x53\xae\x8b\x8c\xc7\xfb\x17\xc7\xca\x1e\xaf\x8c\x57\x9e\xaf\xb5\xb8\xd6\x76\x13\x15\x4e\xad\x95\xc6\x25\xca\x94\x5c\x89\x35\x56\x58\x19\x29\xb3\x70\x3c\x12\xd6\x10\x57\x06\x5d\xa4\x72\xbe\xc4\xb4\xbd\x0d\x6b\x62\xf0\xdb\x64\x36\xb8\xbe\x9b\xf5\xae\xaf\xc7\x9f\x46\xd3\x2a\x96\x2b\x17\xa3\x70\xf1\x1e\xee\x0f\x3e\xf4\x3e\xdd\x4c\x67\x77\x83\x5f\x87\xe3\x51\x55\x47\x5f\xed\x96\x2a\x74\x29\x29\x78\xe9\x31\xe2\xb9\x7c\x77\x7e\xf1\x43\x7c\x56\xbf\x5f\x68\x5b\xca\xa8\x70\x76\xad\x24\xba\x94\x6f\x7c\x03\x18\x15\xcd\x95\x89\xa4\x72\x69\x62\x0b\x4a\x84\x51\xe1\x5f\xec\x08\x16\xd6\x2c\xf6\x78\x98\x44\xc0\x0d\x52\x2c\x1b\xc6\xe1\x7b\x5c\x69\x82\xef\x53\x69\xc5\x0a\x5d\xd3\x60\xa4\x8d\x75\xab\xa8\xd0\xe5\x52\x99\x54\x18\x55\x03\x0e\x97\xca\x13\xba\x28\x8c\xe0\xb8\x55\x07\x20\x38\x2f\x0a\xda\x74\x98\xcd\xb4\x37\x1c\x4d\x0f\xc3\xdb\xdd\x63\x6b\x16\x6a\x99\xbe\x76\xd1\x3e\x1c\x3f\xf1\x5c\x3f\xd7\xf9\x39\x62\xb0\x5b\xc3\xea\x06\x4b\xed\x97\xc2\xf3\x32\x09\x3b\x21\x6c\xa4\x9d\xd5\xee\x7f\x7e\xa8\x5a\xac\xcb\x9a\xd5\xc1\xdd\x0b\x1e\xfb\x37\x00\x00\xff\xff\xf8\xaa\x3b\x53\x02\x08\x00\x00")

func bootstrapUbuntuShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapUbuntuSh,
		"bootstrap.ubuntu.sh",
	)
}

func bootstrapUbuntuSh() (*asset, error) {
	bytes, err := bootstrapUbuntuShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.ubuntu.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6c, 0x50, 0x9f, 0x48, 0x7c, 0xb, 0xc1, 0x39, 0x8d, 0x89, 0x74, 0xaa, 0x29, 0x76, 0x76, 0xc4, 0xdb, 0xff, 0xc7, 0x62, 0x12, 0x40, 0x94, 0x7a, 0xb, 0x9a, 0x43, 0x13, 0x18, 0x3a, 0xf0, 0x32}}
	return a, nil
}

var _kubeletYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x4f\x4f\xc3\x30\x0c\xc5\xef\xf9\x14\xfe\x04\x6d\x07\x9a\x04\xb9\x8d\x4d\x70\x60\x27\x36\xe0\xec\xa6\xee\x16\x35\x8d\x27\xc7\x19\x7f\x3e\x3d\x5a\x5a\x90\x26\xa1\x9c\x9e\xde\xb3\xdf\x4f\xce\xe0\x63\x67\xe1\x39\xb7\x14\x48\xd7\x1c\x7b\x7f\xc8\x82\xea\x39\x1a\x3c\xf9\x37\x92\xe4\x39\x5a\x18\xa6\x40\xe5\x4a\xa2\x1a\xee\x52\xe5\xb9\x3e\x2f\x5a\x52\x5c\x18\x83\x5d\x27\x94\x92\x85\xa6\x2a\xcf\xb8\x90\x93\x92\x6c\x78\x44\x1f\x2d\xcc\xb2\x0a\xec\x30\x18\x83\x59\x8f\x14\xd5\xbb\x52\x64\x0d\x00\x46\x8e\x5f\x23\xe7\x74\x11\x00\x14\xb1\x0d\xd4\x59\xe8\x31\x24\x32\x00\x1f\xd4\x1e\x99\x87\xc9\x75\xe8\x8e\xb4\xdf\x6f\x2d\xdc\x8c\x4d\xba\x1e\x50\xc9\x97\xfc\xe7\xb2\xb9\x9f\xc3\xc1\x53\xd4\xf5\xea\xd1\x07\xb2\x50\x93\xba\x9a\x86\xe4\x34\xd4\x0e\x2b\x27\x3a\xd1\xb0\xf8\xef\x3f\x98\x91\x3b\xb2\xf0\x3e\x55\xfe\x5b\xbe\x9a\x47\xa8\x2b\x18\xcb\x5f\x8c\x62\xbe\x46\xbc\xb6\x6f\x9b\x64\x4c\x22\x39\x93\xec\xb7\xbb\x07\x66\x4d\x2a\x78\x9a\x61\x8d\x3b\x08\xe7\xd3\x46\xfc\x99\xc4\xc2\xa4\xfa\x64\x4c\x4f\xa8\x59\xe8\x09\x95\xca\x59\x5e\x58\x51\x69\xfe\xaa\x5d\x59\xb7\x26\x51\xdf\x5f\xee\x48\xf3\xb6\x9f\x00\x00\x00\xff\xff\x1f\x2f\xa9\x0f\xd0\x01\x00\x00")

func kubeletYamlBytes() ([]byte, error) {
	return bindataRead(
		_kubeletYaml,
		"kubelet.yaml",
	)
}

func kubeletYaml() (*asset, error) {
	bytes, err := kubeletYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubelet.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe1, 0x70, 0xd5, 0xbb, 0x81, 0xa2, 0xa6, 0x76, 0x99, 0x80, 0xe7, 0xe2, 0x47, 0xc5, 0xa0, 0xe0, 0xb4, 0xe1, 0x42, 0x2c, 0xb0, 0x60, 0xa0, 0xb0, 0x97, 0x53, 0xa7, 0x1a, 0x9, 0xc3, 0x1, 0x6d}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"10-eksclt.al2.conf":  _10EkscltAl2Conf,
	"bootstrap.al2.sh":    bootstrapAl2Sh,
	"bootstrap.ubuntu.sh": bootstrapUbuntuSh,
	"kubelet.yaml":        kubeletYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"10-eksclt.al2.conf":  &bintree{_10EkscltAl2Conf, map[string]*bintree{}},
	"bootstrap.al2.sh":    &bintree{bootstrapAl2Sh, map[string]*bintree{}},
	"bootstrap.ubuntu.sh": &bintree{bootstrapUbuntuSh, map[string]*bintree{}},
	"kubelet.yaml":        &bintree{kubeletYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
