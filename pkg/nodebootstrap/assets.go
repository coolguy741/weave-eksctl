// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/10-eksclt.al2.conf (982B)
// assets/bootstrap.al2.sh (1.313kB)
// assets/bootstrap.ubuntu.sh (2.134kB)
// assets/kubelet.yaml (464B)

package nodebootstrap

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __10EkscltAl2Conf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xdf\x6f\xd3\x30\x10\x7e\xcf\x5f\x61\x69\x7d\x00\xa9\x4e\xc4\x78\x9b\x94\x87\x90\x66\x23\x22\x4b\xa7\xa6\x03\x24\x40\x91\x6b\x5f\xbb\x53\x9d\x73\xe4\x38\xdd\x46\xd5\xff\x1d\xb9\x69\xa0\x13\x13\xe2\xcd\xbe\xef\xee\xfb\xbe\xfb\x71\xc1\x60\xdb\x49\xa7\x79\xd7\x82\xc4\x35\x4a\xd6\x3d\x77\x0e\x1a\xc5\x94\x35\x2d\x47\x62\x3d\xa1\x63\x6b\x63\xd9\xb6\x5f\x81\x06\x37\x3d\x7e\x92\x46\xfc\x34\xc4\x0a\xa4\xfe\x89\x5d\xb2\x37\x49\x71\xf9\x36\x08\xbe\x55\x60\x77\x28\xe1\x47\x70\xc1\x0a\x23\x85\x66\x0d\x38\xa1\x84\x13\xac\x15\x56\x34\xe0\xc0\x76\x57\x6c\x91\xdd\xe4\xf3\x72\xca\x92\x2f\x55\x3d\xcb\xae\x93\xfb\x62\x59\x0f\xb1\x20\xa3\x1d\x5a\x43\x0d\x90\xbb\x46\x0d\x71\x04\x4e\x46\x83\xc5\x68\xe4\x0a\x81\x76\xc1\x05\xbb\xd1\x66\x25\x34\x13\xa4\x58\xe7\x84\x43\xf9\x42\x23\x2d\xee\xab\x65\xb6\xa8\x67\x65\x35\x65\xe5\x7c\x96\xd5\x45\xf2\x21\x2b\xc6\xcf\x32\xc9\xcb\x65\xf5\x4f\xb9\x53\xbf\x27\xb5\xa1\x1d\x32\xc4\x5f\x11\x3b\x52\xe6\x77\x53\x96\x97\xd5\x32\x29\xd3\xac\xce\x67\xff\xc5\xad\x3d\xeb\x51\x21\xc8\x9e\x40\x56\x4e\x58\x17\x9f\x3d\xa3\xbe\xb3\xd1\x0a\x69\x2c\x60\xdf\x03\xc6\x38\x27\xa3\x80\x63\x1b\x4f\xf6\x27\xe5\xc3\x39\xa0\xc5\x0a\x74\x37\x82\x43\xdb\x87\xa9\xd0\xed\x83\x08\x07\xfd\x10\x4d\x84\xd4\x39\x41\x12\x38\xaa\x78\xb2\x3f\x33\x3e\x72\x35\xe2\x89\xb7\x46\x79\xa2\xdb\xe4\x6b\x7d\x37\x9f\x55\x23\x64\x61\x83\x9d\x03\x7b\xd4\x8b\x9d\xed\xe1\x3c\xf8\x88\xee\x81\x3b\x81\xe4\x7e\x9b\x18\xc6\x3d\x96\x4b\x6d\x7a\xc5\x5b\x6b\x76\xa8\xc0\xc6\xe2\xb1\x1b\x01\x43\xbe\x0e\x2c\xb7\x3d\x39\x6c\x20\x56\x46\x6e\xc1\x8e\xdd\x81\x7b\x34\x76\xcb\x5b\xdd\x6f\x90\x62\x49\x38\xd6\x11\xf2\x15\x12\x57\x68\xe3\xc8\xb4\x2e\x92\x84\x7e\x6c\x67\xb0\x34\xb4\x1e\x70\xbf\x06\x8f\x13\xb8\x50\x9d\x32\x5a\xa3\x38\xd2\xda\x8a\x33\x0b\xd8\x88\x0d\xc4\x93\xbd\xbf\xd2\xec\x53\x55\x67\xe9\xa2\x4e\xd2\x74\x7e\x5f\x2e\x0f\xa1\xda\xda\x10\xa4\x0d\x07\xf8\xe5\x11\x1f\x4e\xd1\x2a\x5b\x7c\xce\xd3\xac\xaa\x67\xf3\xdb\x24\x2f\x0f\x7e\xf9\x51\x2b\xfa\x0e\xf8\x64\x9f\x2c\xd2\x8f\x87\xab\xf7\xe1\xbb\x93\x03\xbf\x60\xef\x11\x37\x7f\x1d\xca\x10\x0e\x9f\x45\xa3\xff\xcc\xe9\xb5\x44\x7f\x51\x3e\x2b\xf8\x15\x00\x00\xff\xff\x5b\x08\x1a\xba\xd6\x03\x00\x00")

func _10EkscltAl2ConfBytes() ([]byte, error) {
	return bindataRead(
		__10EkscltAl2Conf,
		"10-eksclt.al2.conf",
	)
}

func _10EkscltAl2Conf() (*asset, error) {
	bytes, err := _10EkscltAl2ConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "10-eksclt.al2.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2a, 0x99, 0xdb, 0x6d, 0x46, 0x69, 0x8a, 0xf5, 0x84, 0xe3, 0x6a, 0xe7, 0xca, 0x7b, 0x3f, 0xc5, 0xd3, 0xea, 0xd8, 0xe2, 0xc2, 0xf2, 0x9, 0x14, 0x55, 0x10, 0x30, 0x2e, 0xca, 0x69, 0x53, 0x21}}
	return a, nil
}

var _bootstrapAl2Sh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\x7f\x6f\xe2\x38\x10\xfd\xdf\x9f\x62\xce\x8d\xba\x45\x27\x93\x16\x71\xe8\x96\x2d\x2b\x21\xc8\xa9\xe8\xc4\x0f\x2d\xec\x5d\x4f\x15\x17\x19\x67\x38\xac\x26\x76\x14\x4f\xd8\xae\x50\xee\xb3\xaf\x4c\x43\x05\x2d\xdb\xbf\xe2\x99\x79\x6f\x3c\x9e\xf7\xe0\xe2\x97\x70\xa5\x4d\xb8\x92\x6e\xc3\x98\x43\x02\x61\x01\x8b\x02\x9f\x34\x1d\xc2\x5c\xe7\xb8\x96\x3a\x3d\xc4\xc6\x96\xc6\x21\x31\xb6\x2e\x8d\x22\x6d\x0d\xfc\x87\x14\x67\xf2\x29\xce\x6d\xe2\xae\x1a\xb0\x63\x00\xdf\x36\x3a\x45\x28\x50\x26\xa0\x8d\x23\x69\x14\xc6\xf4\x3d\x47\xf0\x98\x4f\x90\x58\x06\x00\xa0\xd7\x00\x0f\x0f\xc0\x83\xdd\x09\xa8\xe2\xd0\xeb\xf9\xec\x4d\xc5\x61\xb9\x84\xcb\xcb\x1a\xe5\xc9\xbe\xf8\x3f\xfc\xfb\x70\x2d\x3e\x2e\x7f\x0d\x7c\xf9\x13\xd0\x06\xcd\xbe\x21\x00\xaa\x8d\x85\x1a\x59\xa7\x0a\xa4\xb2\x78\xae\xaf\x35\x03\x48\xac\x41\xb8\x85\x10\x49\x85\xf8\xe8\x14\xa5\xe1\x61\xfa\x66\x26\x73\x56\x31\x76\x01\x5f\x1d\xc2\x68\x3c\x9c\x6f\x5b\x40\xd6\xbf\x10\x32\x24\x99\x48\x92\x6c\x31\xfd\x33\x9a\xf4\x78\x70\xa5\xca\x22\x05\x21\x9c\x4e\xd1\x10\x88\x7b\x98\x7d\x5d\x80\xb8\x03\x7e\x2f\xe4\x37\x27\x50\xb5\xc4\x81\x24\xc8\x3e\xa2\x11\x44\xa9\x70\xa8\xac\x49\x5c\x17\x3a\xd7\xd7\x1c\x36\x44\x79\x37\x0c\x6f\x3a\x1f\x9b\xad\xdf\xda\xcd\xfa\x1b\xa6\x92\xd0\x51\x28\x73\x1d\xee\x99\x0d\xfe\x6a\xdd\x75\xdf\x7a\xdd\xaf\x26\x79\x67\x84\x2e\x04\xfb\xf9\x39\xf0\xf7\xaf\xf6\x34\xe1\x79\x61\x70\xc3\xfd\x4e\x26\xd3\x61\x14\x8f\x66\xfe\xe1\xc7\x13\x40\x6a\x95\x4c\x85\xce\xb7\xed\x06\x67\xa3\xc9\x7c\xd1\x9f\x0c\xa2\x78\x34\x7c\x03\x3c\x68\x2c\x74\x72\x8c\x5c\xfc\x33\x8b\x7e\x8e\xf5\x7e\x68\x70\xd6\xff\x7b\x1e\xcf\xa3\x2f\x7f\x8d\x06\xd1\x3c\x1e\x4e\xc7\xfd\xd1\xe4\x0d\xc7\x61\xb1\xd5\x0a\x5d\x98\xd8\x4c\x6a\xbf\x32\x36\xee\x0f\xee\x46\x93\xa8\x17\x5c\x95\x46\x66\x08\x22\x6b\x30\xa6\xd7\xe0\xdd\x54\xd7\x9e\xbd\xf6\xf4\x7b\x27\xee\xb4\x39\x2c\x8f\xcc\xd4\xff\x32\xb8\xeb\x71\x99\x25\x9d\x36\x67\x98\x9e\xa3\x49\x59\xa8\xcd\x4f\x78\x45\xf6\xcc\x73\xf8\xb6\xdb\x8b\x53\xf9\x1c\x09\x12\x5c\xcb\x32\x25\xf0\xcd\x34\xa1\xa2\xb2\x40\xef\xba\x0f\x81\x27\x7d\xe0\xf0\xf9\xb2\xc5\xd6\x9a\x31\x67\xcb\x42\xe1\x89\x73\x1f\xcb\x15\xa6\x48\x4d\x34\x5b\xb8\x00\xda\x68\x07\x4a\x1a\xb0\x5b\x2c\x0a\x9d\x20\x8c\xfb\xf7\xf1\x6c\x3a\x9c\x33\xa6\x24\xc1\xe7\xb3\xdc\xbd\x82\xfb\x0e\xb7\xb7\xd1\xf4\x8f\x17\xa5\x83\x5d\x7d\xaa\x4e\x74\x0d\x76\x47\x51\xf5\x4a\xc8\xa3\xa2\x8f\xab\xb3\xca\x05\xbb\x33\xd9\x8a\x1d\x66\xed\x05\xbb\xc3\xb1\x2b\x6a\x91\xeb\x1f\xa8\xff\x17\x38\xbd\x80\x37\x2a\xb6\xdf\x6d\xb0\xf3\x9f\x8a\xf9\x17\x30\xf7\xdd\x11\x66\x8a\x52\x48\x24\x66\xd6\x88\x02\x53\x2b\x93\xa3\x3c\x1a\xb9\x4a\x11\xea\x1d\x1c\x15\x1c\xc9\x82\x5e\xf2\x3f\x02\x00\x00\xff\xff\xf0\x09\xf8\x2f\x21\x05\x00\x00")

func bootstrapAl2ShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapAl2Sh,
		"bootstrap.al2.sh",
	)
}

func bootstrapAl2Sh() (*asset, error) {
	bytes, err := bootstrapAl2ShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.al2.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x92, 0xc1, 0x8e, 0x92, 0x57, 0xd6, 0xdb, 0xa3, 0x1c, 0x3d, 0xfc, 0xe4, 0xc3, 0xb7, 0x18, 0x9b, 0x40, 0xa2, 0x3e, 0x5f, 0x86, 0x78, 0x64, 0x94, 0x94, 0x77, 0x8e, 0xf8, 0xc9, 0xe6, 0x7f, 0x65}}
	return a, nil
}

var _bootstrapUbuntuSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x55\x61\x6f\x1a\x47\x10\xfd\xbe\xbf\x62\x7a\x46\xa9\x51\xb3\x5c\xec\xa6\x91\xe2\x84\xaa\xd4\x90\x16\xc5\x01\x2b\xe0\x36\x95\xe5\xa2\x65\x77\xe0\x56\xec\xed\x9e\x76\xe7\x20\x96\x45\x7f\x7b\xb5\xc7\x1d\xc1\x24\xf1\x27\x6e\xf7\xbd\x37\x37\x33\xf7\x66\x38\xf9\x21\x9d\x6b\x9b\xce\x45\xc8\x18\x0b\x48\xc0\x1d\xa0\xf7\xf8\x59\x53\x73\x2c\x74\x81\x0b\xa1\x4d\x73\xb6\xae\xb4\x01\x89\xb1\x45\x69\x25\x69\x67\x61\x89\x34\xcb\xc5\xe7\x59\xe1\x54\x38\x6d\xc3\x03\x03\xd8\x64\xda\x20\x78\x14\x0a\xb4\x0d\x24\xac\xc4\x19\xdd\x17\x08\x91\xf3\x06\x94\x63\x00\x00\x7a\x01\x70\x7b\x0b\x49\xeb\xe1\x11\x69\x9b\x40\xb7\x1b\x6f\xcf\xb6\x09\xdc\xdd\xc1\xb3\x67\x35\x2b\x8a\x23\xf8\x1f\xfc\x7b\xfb\x82\xbf\xbe\xfb\xa9\x15\xe1\x37\x40\x19\xda\x2a\x20\x00\xca\xcc\x41\xcd\x7c\x53\xdf\x79\xa4\xd2\xef\x08\x0b\xcd\x00\x94\xb3\x08\x6f\x21\x45\x92\x29\xae\x82\x24\x93\x36\xe9\x77\x72\x51\xb0\x2d\x63\x27\x70\x13\x10\x86\x1f\xfa\x93\xf5\x39\x90\x8b\x25\x42\x8e\x24\x94\x20\xc1\xa6\xe3\xf7\x83\x51\x37\x69\x9d\xca\xd2\x1b\xe0\x3c\x68\x83\x96\x80\x7f\x82\xeb\x9b\x29\xf0\x3f\x21\xf9\xc4\xc5\x26\x70\x94\xe7\xbc\x11\x71\x72\x2b\xb4\x9c\xc8\xf0\x80\xd2\x59\x15\x2e\xe0\xd5\x8b\x17\x09\x64\x44\xc5\x45\x9a\x9e\xbd\x7a\xdd\x39\xff\xe5\x65\xa7\xfe\x4d\x8d\x20\x0c\x94\x8a\x42\xa7\x95\xb2\x9d\x1c\xf5\xbb\x8e\x5b\xf7\xfb\x28\x93\x27\x52\xb8\x80\x56\x95\x7f\x02\xc9\xd3\xaf\x8e\x32\x1e\x75\x69\xeb\x2c\x89\x3d\x19\x8d\xfb\x83\xd9\xf0\x3a\x16\x7e\x98\x01\x18\x27\x85\xe1\xba\x58\xbf\x6c\x27\x6c\x38\x9a\x4c\x7b\xa3\xcb\xc1\x6c\xd8\xff\x8a\xd8\x7c\x64\xae\xd5\x21\x73\xfa\xcf\xf5\xe0\xfb\xdc\x68\x88\x76\xc2\x7a\x7f\x4f\x66\x93\xc1\xc7\xbf\x86\x97\x83\xc9\xac\x3f\xfe\xd0\x1b\x8e\xbe\xd2\x04\xf4\x6b\x2d\x31\xa4\xca\xe5\x42\xc7\x96\xb1\xe0\x4a\x2f\xf1\xd1\xa7\x5e\x95\x73\x34\x48\x1d\xb4\x6b\x38\x01\xca\x74\x00\x29\x2c\xb8\x35\x7a\xaf\x15\xc2\x87\xde\xa7\xd9\xf5\xb8\x3f\x61\x4c\x0a\x82\x5f\xbf\xa9\xad\x4a\xae\x22\xbc\x7d\x3b\x18\xbf\xdb\xb7\xa6\xf5\x50\x3f\x6d\x1f\x35\xa2\xf5\x70\x70\xda\x1e\x55\x7e\x00\xc6\xf3\x96\x35\x09\x74\x5b\x0f\xcd\xe3\x05\xaf\x4b\xad\x6d\x1a\x87\xe1\xb1\x2a\x69\x6f\x59\xcc\x84\x05\x2b\x0a\x10\x46\x8b\x00\x75\xb6\x1c\x57\xa1\x53\x3f\x37\x77\xc7\x34\x49\x66\x4f\x93\x64\x9a\xbb\x1d\x2d\x90\x2b\x0e\x83\xb1\x70\x1f\x08\xf3\xc8\xf3\x18\x90\x78\x5c\x0f\xa8\x18\x3b\x65\x00\x27\x30\x1d\xf7\xc7\x17\x71\x26\x03\x42\xc8\x5c\x69\x14\xcc\x11\x8c\x73\x2b\x54\x20\x08\x70\x8d\xfe\x1e\x48\xe7\xd8\x04\x85\x40\xc2\x53\x80\xb2\x78\x5e\x45\xd8\x64\x5a\x66\xa0\x03\x6c\x32\x41\xb0\x41\x50\x0e\xb4\x85\xde\xd5\x39\x9c\xee\xb1\xb9\x08\xa8\xc0\x59\x28\x8c\xd0\x16\x76\x39\xa9\x5d\x00\x61\x15\xe4\x28\x2c\xc5\xd9\x9d\xc7\xad\xe3\x49\xcc\x0d\xc6\x63\xee\x02\x35\x6c\x50\x3a\x90\x77\xa1\xfd\x1c\xe6\x25\x81\xa6\x1f\x43\xa5\xb7\x8e\x40\x1a\x14\x1e\x32\xb7\x89\x22\xe3\x84\xaa\x4b\x5a\x78\x97\x7f\x49\x3c\xf6\x67\xa3\x29\x73\x25\x41\x26\xd6\xda\x2e\xab\x00\xe4\x40\x96\x81\x5c\xae\x03\x46\xdd\x8e\xa8\x29\xa0\x59\x30\x80\x27\x6c\xb9\xb7\xd6\xd3\xb4\xef\x12\x9a\x69\xa8\x18\x0c\x60\x61\xc4\x32\x74\x4f\xab\xed\x97\x58\xa7\x90\xeb\xe2\xc0\xa7\xc9\x0e\xc8\xc5\x67\x1e\x8d\x75\xe0\xb9\x06\xaa\x34\x46\xcc\xd1\x84\x46\x77\xd5\xfb\x7d\x70\x35\xd9\x3e\x17\xa6\xc8\x44\x67\xf7\xe2\x8e\x76\xe9\xc1\x80\x1f\x79\xbe\x8e\x55\x38\xc5\xb5\x5d\x78\xc1\xa5\xb3\x24\xb4\x45\xcf\x75\x2e\x96\xd8\x6d\x3d\xc4\x09\x1f\xbc\x9f\xcc\x06\x97\x1f\x67\xbd\xcb\xcb\xf1\xcd\x68\xba\xed\xa8\x95\xef\xa0\xf4\x9d\x1d\xdc\x1f\xbc\xeb\xdd\x5c\x4d\x67\x1f\x07\x7f\x0c\xc7\xa3\x6d\x7d\x7b\xb4\x16\xb6\xb1\x13\x69\x21\xca\x80\x5c\xe4\xea\xd5\xcb\x8b\x9f\x3b\x67\xf5\xfb\xa5\x71\xa5\xe2\x85\x77\x6b\xad\xd0\x77\xc5\x26\x34\x80\xd5\x7c\xae\x2d\x57\xda\x77\x53\x57\x50\x2a\xad\x8e\xff\x8c\x07\xb0\x74\x76\xb1\xc3\x63\xb7\x23\x6e\x91\x3a\xaa\x61\xec\xeb\xf1\xa5\x8d\xde\xee\x2a\x27\x57\xe8\x9b\x26\x22\x6d\x9c\x5f\xf1\xc2\x94\x4b\x6d\xbb\xd2\xea\x1a\xf0\xb8\xd4\x81\xd0\xf3\xd8\xe6\x2e\xf9\x12\x8f\x81\xe8\x2e\x1e\x63\xd3\xbe\xff\xd3\xde\x70\x34\xdd\x7f\xa0\x6a\x56\x9d\x5d\xe8\x65\xf7\xd8\x29\xbb\xeb\xce\xbd\xc8\xcd\x97\x3c\xbf\x45\x8c\x96\x6a\x58\xed\x68\x9b\xdd\xe0\x7f\x59\x18\x71\xee\xe3\xd6\xa9\xec\x74\xfb\xdb\xdd\x36\x61\x6d\xd6\xac\x07\xe1\x1f\xf1\xd8\xff\x01\x00\x00\xff\xff\xae\xe5\x0a\x0b\x56\x08\x00\x00")

func bootstrapUbuntuShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapUbuntuSh,
		"bootstrap.ubuntu.sh",
	)
}

func bootstrapUbuntuSh() (*asset, error) {
	bytes, err := bootstrapUbuntuShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.ubuntu.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfa, 0x97, 0xec, 0xc4, 0x20, 0xf3, 0x1c, 0x0, 0x5c, 0x54, 0xb1, 0x1f, 0xec, 0x5a, 0x97, 0xd0, 0xe7, 0xb0, 0xbf, 0x3e, 0x8b, 0x83, 0xc8, 0x92, 0x49, 0x84, 0xe4, 0xfa, 0xff, 0xa1, 0x6b, 0x5f}}
	return a, nil
}

var _kubeletYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x4f\x4f\xc3\x30\x0c\xc5\xef\xf9\x14\xfe\x04\x6d\x07\x9a\x04\xb9\x8d\x4d\x70\x60\x27\x36\xe0\xec\xa6\xee\x16\x35\x8d\x27\xc7\x19\x7f\x3e\x3d\x5a\x5a\x90\x26\xa1\x9c\x9e\xde\xb3\xdf\x4f\xce\xe0\x63\x67\xe1\x39\xb7\x14\x48\xd7\x1c\x7b\x7f\xc8\x82\xea\x39\x1a\x3c\xf9\x37\x92\xe4\x39\x5a\x18\xa6\x40\xe5\x4a\xa2\x1a\xee\x52\xe5\xb9\x3e\x2f\x5a\x52\x5c\x18\x83\x5d\x27\x94\x92\x85\xa6\x2a\xcf\xb8\x90\x93\x92\x6c\x78\x44\x1f\x2d\xcc\xb2\x0a\xec\x30\x18\x83\x59\x8f\x14\xd5\xbb\x52\x64\x0d\x00\x46\x8e\x5f\x23\xe7\x74\x11\x00\x14\xb1\x0d\xd4\x59\xe8\x31\x24\x32\x00\x1f\xd4\x1e\x99\x87\xc9\x75\xe8\x8e\xb4\xdf\x6f\x2d\xdc\x8c\x4d\xba\x1e\x50\xc9\x97\xfc\xe7\xb2\xb9\x9f\xc3\xc1\x53\xd4\xf5\xea\xd1\x07\xb2\x50\x93\xba\x9a\x86\xe4\x34\xd4\x0e\x2b\x27\x3a\xd1\xb0\xf8\xef\x3f\x98\x91\x3b\xb2\xf0\x3e\x55\xfe\x5b\xbe\x9a\x47\xa8\x2b\x18\xcb\x5f\x8c\x62\xbe\x46\xbc\xb6\x6f\x9b\x64\x4c\x22\x39\x93\xec\xb7\xbb\x07\x66\x4d\x2a\x78\x9a\x61\x8d\x3b\x08\xe7\xd3\x46\xfc\x99\xc4\xc2\xa4\xfa\x64\x4c\x4f\xa8\x59\xe8\x09\x95\xca\x59\x5e\x58\x51\x69\xfe\xaa\x5d\x59\xb7\x26\x51\xdf\x5f\xee\x48\xf3\xb6\x9f\x00\x00\x00\xff\xff\x1f\x2f\xa9\x0f\xd0\x01\x00\x00")

func kubeletYamlBytes() ([]byte, error) {
	return bindataRead(
		_kubeletYaml,
		"kubelet.yaml",
	)
}

func kubeletYaml() (*asset, error) {
	bytes, err := kubeletYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubelet.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe1, 0x70, 0xd5, 0xbb, 0x81, 0xa2, 0xa6, 0x76, 0x99, 0x80, 0xe7, 0xe2, 0x47, 0xc5, 0xa0, 0xe0, 0xb4, 0xe1, 0x42, 0x2c, 0xb0, 0x60, 0xa0, 0xb0, 0x97, 0x53, 0xa7, 0x1a, 0x9, 0xc3, 0x1, 0x6d}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"10-eksclt.al2.conf":  _10EkscltAl2Conf,
	"bootstrap.al2.sh":    bootstrapAl2Sh,
	"bootstrap.ubuntu.sh": bootstrapUbuntuSh,
	"kubelet.yaml":        kubeletYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"10-eksclt.al2.conf":  &bintree{_10EkscltAl2Conf, map[string]*bintree{}},
	"bootstrap.al2.sh":    &bintree{bootstrapAl2Sh, map[string]*bintree{}},
	"bootstrap.ubuntu.sh": &bintree{bootstrapUbuntuSh, map[string]*bintree{}},
	"kubelet.yaml":        &bintree{kubeletYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
