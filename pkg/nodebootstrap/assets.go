// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/10-eksclt.al2.conf (1.001kB)
// assets/bootstrap.al2.sh (1.06kB)
// assets/bootstrap.ubuntu.sh (1.946kB)
// assets/kubelet.yaml (464B)

package nodebootstrap

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __10EkscltAl2Conf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xc1\x6a\xdb\x40\x10\xbd\xeb\x2b\x16\xe2\x43\x0b\x5e\x89\xa6\xb7\x80\x0e\xaa\xad\xa4\xa6\xaa\x1c\x2c\x87\x16\xda\x22\xc6\xbb\x63\x67\xf0\x6a\x56\xac\x56\x76\x52\xe3\x7f\x2f\xb2\xac\xd6\xa1\xa1\xf4\xa6\xdd\x37\xf3\xde\x9b\xd9\xa7\x2b\x81\xdb\x46\x79\x23\x9b\x1a\x15\xad\x49\x89\xe6\xb9\xf1\x58\x69\xa1\x9d\xad\x25\xb1\x68\x99\xbc\x58\x5b\x27\xb6\xed\x0a\x0d\xfa\xf1\xe9\x90\x54\xf0\xd3\xb2\xc8\x88\xdb\x27\x71\x2d\xde\x24\xd9\xf5\xdb\x20\xf8\x56\xa0\xdb\x91\xc2\x1f\xc1\x95\xc8\xac\x02\x23\x2a\xf4\xa0\xc1\x83\xa8\xc1\x41\x85\x1e\x5d\x73\x23\x16\xe9\xdd\x6c\x9e\x8f\x45\xf2\xa5\x28\xa7\xe9\x6d\xf2\x90\x2d\xcb\xfe\x2e\x48\x79\x47\xce\x72\x85\xec\x6f\xc9\x60\x1c\xa1\x57\x51\x6f\x31\x1a\xb8\x42\xe4\x5d\x70\x25\xee\x8c\x5d\x81\x11\xc0\x5a\x34\x1e\x3c\xa9\x17\x1a\x93\xec\xa1\x58\xa6\x8b\x72\x9a\x17\x63\x91\xcf\xa7\x69\x99\x25\x1f\xd2\x6c\x38\x2c\x93\x59\xbe\x2c\xfe\x29\x77\x9e\xf7\xac\xd6\x8f\xc3\x96\xe5\x2b\x62\x27\xca\xd9\xfd\x58\xcc\xf2\x62\x99\xe4\x93\xb4\x9c\x4d\xff\x8b\xdb\x74\xac\x27\x85\x20\x7d\x42\x55\x78\x70\x3e\xbe\xf8\x8c\xda\xc6\x45\x2b\xe2\xa1\x41\x7c\x0f\x84\x90\x92\xad\x46\x49\x75\x3c\x3a\x9c\x95\x8f\x97\x80\x81\x15\x9a\x66\x00\xfb\xb1\x8f\x63\x30\xf5\x23\x84\xbd\x7e\x48\x36\x22\x6e\x3c\xb0\x42\x49\x3a\x1e\x1d\x2e\x8c\x0f\x5c\x15\x3c\xc9\xda\xea\x8e\xe8\x73\xf2\xb5\xbc\x9f\x4f\x8b\x01\x72\xb8\xa1\xc6\xa3\x3b\xe9\xc5\xde\xb5\x78\x79\xb9\x27\xff\x28\x3d\x10\xfb\xdf\x26\xfa\x75\x0f\xed\x60\x8c\xdd\xcb\xda\xd1\x8e\x0c\x6e\x50\xf7\x0c\x3d\xa6\x8c\x6d\xb5\xac\x9d\xdd\x91\x46\x17\xc3\xbe\x19\x00\xcb\x1d\x27\x3a\xe9\x5a\xf6\x54\x61\xac\xad\xda\xa2\x1b\x26\x47\xbf\xb7\x6e\x2b\x6b\xd3\x6e\x88\x63\xc5\x34\xf4\x31\xc9\x15\xb1\xd4\xe4\xe2\xc8\xd6\x3e\x52\x4c\xdd\x4a\x2f\x60\x65\x79\xdd\xe3\xdd\x13\x75\x38\xa3\x0f\xf5\xb9\xa2\xb6\x5a\x12\xaf\x1d\x5c\x58\xa0\x0a\x36\x18\x8f\x0e\x5d\x82\xd3\x4f\x45\x99\x4e\x16\x65\x32\x99\xcc\x1f\xf2\xe5\x31\xd4\x5b\x17\xa2\x72\x61\x0f\xbf\x0c\xf8\x31\x84\xd3\x9f\x03\xfb\x26\x54\xb6\xea\xf2\x10\xd5\xd0\x36\x28\x47\x87\x64\x31\xf9\x78\xbc\x79\x1f\xbe\x3b\x0b\x77\x6f\xde\x59\xa3\xcd\x5f\xd9\xe9\xaf\xc3\x67\xa8\xcc\x9f\xf5\xbc\x56\xd8\x85\xac\xab\x0a\x7e\x05\x00\x00\xff\xff\x1c\x75\xf4\x52\xe9\x03\x00\x00")

func _10EkscltAl2ConfBytes() ([]byte, error) {
	return bindataRead(
		__10EkscltAl2Conf,
		"10-eksclt.al2.conf",
	)
}

func _10EkscltAl2Conf() (*asset, error) {
	bytes, err := _10EkscltAl2ConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "10-eksclt.al2.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x29, 0x57, 0xb8, 0xdc, 0xa7, 0x19, 0x92, 0x82, 0x9e, 0x41, 0x89, 0x8d, 0xf, 0xdb, 0x24, 0x2, 0x8, 0xa5, 0x90, 0x87, 0x12, 0xdf, 0x9c, 0x7b, 0x90, 0x29, 0x58, 0x9b, 0x84, 0x90, 0xa7, 0x88}}
	return a, nil
}

var _bootstrapAl2Sh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\x5d\x6b\xdb\x40\x10\x7c\xdf\x5f\xb1\x55\x44\x62\x53\x64\x35\xc1\x35\xcd\x87\x03\x26\x71\x89\x1f\xe2\x84\x26\x85\x96\xe0\x9a\xf3\x69\x5d\x1d\x39\xdd\x89\xbb\x55\xe2\x60\xd4\xdf\x5e\x64\x4b\x41\x2e\xe9\x4b\xe9\xd3\xdd\xee\xec\x0c\xab\x19\xdd\xde\xbb\x78\xa1\x4c\xbc\x10\x3e\x05\xf0\xc4\x18\x59\x24\xe7\x68\xa5\xb8\x29\x73\x95\xd3\x52\x28\xdd\xd4\xc6\x16\xc6\x13\x03\x2c\x0b\x23\x59\x59\x83\x3f\x89\xe7\x99\x58\xcd\x73\x9b\xf8\x4e\x17\xd7\x80\xf8\x9c\x2a\x4d\xe8\x48\x24\xa8\x8c\x67\x61\x24\xcd\xf9\x25\x27\xac\x66\x4e\x31\xb1\x80\x88\xa8\x96\x88\x0f\x0f\x18\x84\xeb\x9d\xa1\x32\xc0\xe1\xb0\xea\x1e\x96\x01\xce\x66\xb8\xbf\x5f\x4f\x55\xe4\x0a\xfc\x85\x3f\x1e\x3e\x44\xc7\xb3\xf7\x61\x05\x9f\x22\xa7\x64\x36\x82\x88\x24\x53\x8b\xf5\x64\xdd\x72\xc4\x85\xdb\xe2\x4b\x05\x88\x89\x35\x84\x67\x18\x13\xcb\x98\x1e\xbd\x64\x1d\x37\xdb\xf7\x32\x91\x43\x09\x30\xbd\xb9\x1c\xcf\x27\xb7\xc3\x20\xec\xc8\xc2\x69\x8c\x22\xaf\x34\x19\xc6\x94\x39\x3f\x89\xe3\xc3\xc1\x71\xef\xe8\x63\xbf\x57\x9f\xb1\x16\x4c\x9e\xe3\x8c\x58\x44\x89\x60\x11\x6b\x2b\x85\x8e\x54\xfe\xd4\xef\x06\x30\x99\xde\xdd\x8f\xa6\x17\xe3\xf9\xe4\xf2\xdf\x15\x1b\x87\x22\x95\xb4\x25\xef\xbf\xdf\x8e\xff\x83\x68\x65\x7b\x37\x80\xeb\xd1\xc5\xd5\x64\x3a\x1e\x86\x9d\xc2\x88\x8c\x30\xca\xba\x00\x6a\x89\x95\xfb\x35\xb6\xcd\x66\xf5\x69\x30\x1f\xf4\x03\x9c\xb5\xcc\x1f\x7d\xb9\xb8\x1a\x06\x22\x4b\x06\xfd\x00\x48\xbf\x45\x13\xc2\xc9\xf4\x2f\x3c\x97\x6d\x79\x9e\xe0\x35\xc8\xe0\xab\x79\x34\xf6\xd9\x60\x26\x64\xaa\x0c\x61\xc5\x57\x4c\x92\x0b\x47\x78\xd0\x88\x1f\x04\x78\xbe\x7f\xb4\xa5\xad\x14\xe3\x21\x2c\x15\x80\xb7\x85\x93\xb4\x93\xf3\x63\xb1\x20\x4d\xdc\x23\xf3\x84\x7b\xc8\xa9\xf2\x28\x85\x41\xfb\x44\xce\xa9\x84\xf0\x7a\xf4\x6d\x7e\x7b\x73\x79\x07\x20\x05\xe3\xf9\x9b\xdc\x4d\xb4\x1b\x85\xb3\xb3\xf1\xcd\xe7\xd7\x7f\x25\x5c\xd7\xb7\x72\x27\xf0\x70\xdd\xaa\xca\x3f\x82\x6b\x81\x55\x5d\x42\xb3\xc0\x30\x5c\x37\xd7\x93\x28\xec\xb4\x5f\x58\xf5\x10\x76\x59\x41\xb7\x84\x8d\x89\xe1\xba\x3a\x4a\xa8\xd6\x02\xff\xe2\x99\x32\xc9\x1a\x13\x41\x99\x35\x91\x23\x6d\x45\xd2\xea\x93\x11\x0b\x4d\x58\x7f\x58\x0b\xf0\x2c\x1c\xbf\xf6\x7f\x07\x00\x00\xff\xff\x0e\xf9\x0f\x30\x24\x04\x00\x00")

func bootstrapAl2ShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapAl2Sh,
		"bootstrap.al2.sh",
	)
}

func bootstrapAl2Sh() (*asset, error) {
	bytes, err := bootstrapAl2ShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.al2.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa2, 0x13, 0xc0, 0x4c, 0x92, 0x11, 0xf0, 0x97, 0xad, 0x55, 0xd0, 0x26, 0x8e, 0x68, 0xdc, 0xaf, 0xf1, 0x42, 0x14, 0xc4, 0xe7, 0x1d, 0xf4, 0xc9, 0xe7, 0x79, 0xc7, 0x69, 0xc9, 0x1f, 0x7b, 0x89}}
	return a, nil
}

var _bootstrapUbuntuSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x61\x6f\x22\x37\x10\xfd\xee\x5f\x31\x25\xe8\x0a\x6a\xbc\xdb\x5c\xd3\x93\x2e\xc9\x56\xa5\x09\x57\x45\x4d\x21\xba\x70\x6a\xab\x28\x45\xc6\x1e\x58\x0b\xaf\xbd\xb2\x67\x21\x29\xa2\xbf\xbd\x32\xbb\x4b\x48\x74\xbd\x0f\x55\x3f\xb1\xf6\x7b\xf3\x76\xf6\xf9\x79\x38\xfa\x2a\x9d\x69\x9b\xce\x44\xc8\x19\x0b\x48\xc0\x1d\xa0\xf7\xf8\xa8\xa9\x5d\x96\xba\xc4\xb9\xd0\xa6\x5d\x5b\x57\xd9\x80\xc4\xd8\xbc\xb2\x92\xb4\xb3\xb0\x40\x9a\x16\xe2\x71\x5a\x3a\x15\x7a\x7d\xd8\x30\x80\x75\xae\x0d\x82\x47\xa1\x40\xdb\x40\xc2\x4a\x9c\xd2\x53\x89\x10\x39\xe7\xa0\x1c\x03\x00\xd0\x73\x80\xfb\x7b\xe8\x74\x37\x2f\x48\xdb\x0e\x64\x59\xdc\x3d\xd9\x76\xe0\xe1\x01\xde\xbc\x69\x58\xb1\x38\x82\x7f\xc3\x9f\xf7\xdf\xf2\xf7\x0f\xdf\x74\x23\x7c\x0e\x94\xa3\xdd\x09\x02\xa0\xcc\x1d\x34\xcc\xf3\x66\xcf\x23\x55\xbe\x26\xcc\x35\x03\x50\xce\x22\x5c\x40\x8a\x24\x53\x5c\x06\x49\x26\x6d\xdb\x4f\x0a\x51\xb2\x2d\x63\xa3\xf1\xd5\x70\x7a\x7d\x9b\x75\xba\x3d\x59\x79\x03\x9c\x07\x6d\xd0\x12\xe4\x44\xe5\x59\x9a\x9e\xbc\x7b\x9f\xbc\xfd\xfe\x34\x69\x7e\x53\x23\x08\x03\xa5\x05\x92\xe0\x4a\x90\x48\x8d\x93\xc2\x70\x5d\xae\x4e\xfb\x1d\x76\x3d\xba\x9b\x0c\x46\x97\xc3\xe9\xf5\xd5\x7f\x57\x6c\x2d\xe2\x5a\x1d\x4a\x4e\xfe\xb8\x1d\xfe\x0f\xa2\xd1\xf7\x7e\x87\xb1\xe0\x2a\x2f\xf1\x85\x37\xcb\x6a\x86\x06\x29\x41\xbb\x82\x23\xa0\x5c\x07\x90\xc2\x82\x5b\xa1\xf7\x5a\x21\xfc\x3a\xf8\x7d\x7a\x3b\xbe\xba\x63\x4c\x0a\x82\x1f\x3e\x5b\xbb\xb3\x63\xa7\x70\x71\x31\x1c\x7f\xd8\xfb\xdb\xdd\x34\x4f\xdb\x17\x26\x75\x37\x07\xab\xed\xab\x8f\x3d\x00\xe3\x7a\xcb\xda\x06\xb2\xee\xa6\x7d\x3c\xe3\xdd\xde\x61\x2c\x63\x7a\x5e\x56\x75\xfa\x5b\x16\x3b\x61\xc1\x8a\x12\x84\xd1\x22\x40\xd3\x2d\xc7\x65\x48\x9a\xe7\x76\xef\x35\x4d\x92\xd9\xd3\x24\x99\x76\xaf\xa6\x05\x72\xe5\xa1\x18\x0b\x4f\x81\xb0\x88\x3c\x8f\x01\x89\xc7\xfb\x84\x8a\xb1\x1e\x03\x38\x82\xc9\xf8\x6a\x7c\x16\x43\x1c\x10\x42\xee\x2a\xa3\x60\x86\x60\x9c\x5b\xa2\x02\x41\x80\x2b\xf4\x4f\x40\xba\xc0\x56\x14\x02\x09\x4f\x01\xaa\xf2\x78\xa7\xb0\xce\xb5\xcc\x41\x07\x58\xe7\x82\x60\x8d\xa0\x1c\x68\x0b\x83\x9b\xb7\xd0\xdb\x63\x33\x11\x50\x81\xb3\x50\x1a\xa1\x2d\xd4\x3d\xa9\x5a\x40\x58\x05\x05\x0a\x4b\x40\x2e\xbe\xbc\x74\x9e\xc4\xcc\x60\x5c\x16\x2e\x50\xcb\x06\xa5\x03\x79\x17\xfa\xc7\x30\xab\x08\x34\x7d\x1d\x76\xf5\xd6\x11\x48\x83\xc2\x43\xee\xd6\xb1\xc8\x38\xa1\x9a\x4f\x9a\x7b\x57\x3c\x37\x1e\xfd\x59\x6b\xca\x5d\x45\x90\x8b\x95\xb6\x8b\x9d\x00\x39\x90\x55\x20\x57\xe8\x80\xb1\xae\x26\x6a\x0a\x68\xe6\x0c\xe0\x0b\xb1\xdc\x47\xeb\xcb\xb4\x7f\x25\xc4\xcb\x10\xef\xc2\x8e\xc1\x00\xe6\x46\x2c\x42\xd6\xdb\x8d\x8b\x8e\x75\x0a\xb9\x2e\x0f\x72\xda\xa9\x81\x42\x3c\xf2\x18\xac\x83\xcc\xb5\xd0\xae\xc6\x88\x19\x9a\xd0\xd6\xdd\x0c\x7e\x1a\xde\xdc\x6d\x8f\x85\x29\x73\x91\xd4\x2f\x4e\xb4\x3b\xbc\xd3\xaf\x32\xdf\x68\x09\x63\xdc\x9a\x97\x5e\xaf\xb4\xc1\x05\xaa\x8c\x7c\x85\x0d\x56\x3a\xc5\xb5\x9d\x7b\xc1\xa5\xb3\x24\xb4\x45\xcf\x75\x21\x16\x98\x75\x37\x83\xdf\xee\xa6\xc3\x5f\xee\xa6\xc3\xcb\x8f\xd3\xc1\xe5\xe5\xf8\xd3\x68\xb2\x4d\xd4\xd2\x27\x28\x7d\x52\xc3\x57\xc3\x0f\x83\x4f\x37\x93\xe9\xc7\xe1\xcf\xd7\xe3\xd1\x36\x11\x85\xf8\xcb\x59\xb1\x0e\x89\x74\x45\x34\x27\x2d\x45\x15\x90\x8b\x42\xbd\x3b\x3d\xfb\x2e\x39\x69\x5e\x2b\x8d\xab\x14\x2f\xbd\x5b\x69\x85\x3e\x13\xeb\xd0\x02\x56\xf3\x99\xb6\x5c\x69\x9f\xa5\xae\xa4\x54\x5a\x1d\xff\x5d\x0e\x60\xe9\xec\xbc\xc6\xe3\x01\x44\xdc\x22\x25\xaa\x65\xec\x3f\xc3\x57\x36\xc6\x3d\x53\x4e\x2e\xd1\xb7\xbe\x22\xad\x9d\x5f\xf2\xd2\x54\x0b\x6d\x33\x69\x75\x03\x78\x5c\xe8\x40\xe8\x79\x74\xfe\xd0\xa1\x3d\x10\x03\xc7\xa3\x36\xed\x8f\x64\x32\xb8\x1e\x4d\xf6\x67\xb6\xbb\xbe\xce\xce\xf5\x22\x7b\x1d\x9e\x7a\x3b\x79\x12\x85\x79\xee\xf3\x73\xc4\x98\xb2\x96\xd5\x8f\x49\xaa\x67\xc1\xf3\x0c\x89\xa3\x20\x0e\xa2\x5d\xc2\xee\x7f\x7c\xd8\x76\x58\x9f\xb5\x13\x43\xf8\x17\x3c\xf6\x4f\x00\x00\x00\xff\xff\x8c\x16\xcc\x40\x9a\x07\x00\x00")

func bootstrapUbuntuShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapUbuntuSh,
		"bootstrap.ubuntu.sh",
	)
}

func bootstrapUbuntuSh() (*asset, error) {
	bytes, err := bootstrapUbuntuShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.ubuntu.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x99, 0x66, 0x92, 0x12, 0x80, 0x3a, 0x7d, 0x6f, 0xf5, 0xf9, 0x2c, 0x3d, 0xe8, 0x7d, 0xb3, 0x6b, 0xa4, 0x87, 0xc5, 0x2d, 0xf0, 0xec, 0x6e, 0x84, 0x93, 0x59, 0x1f, 0xc, 0x6b, 0x7f, 0x5f, 0x4b}}
	return a, nil
}

var _kubeletYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x4f\x4f\xc3\x30\x0c\xc5\xef\xf9\x14\xfe\x04\x6d\x07\x9a\x04\xb9\x8d\x4d\x70\x60\x27\x36\xe0\xec\xa6\xee\x16\x35\x8d\x27\xc7\x19\x7f\x3e\x3d\x5a\x5a\x90\x26\xa1\x9c\x9e\xde\xb3\xdf\x4f\xce\xe0\x63\x67\xe1\x39\xb7\x14\x48\xd7\x1c\x7b\x7f\xc8\x82\xea\x39\x1a\x3c\xf9\x37\x92\xe4\x39\x5a\x18\xa6\x40\xe5\x4a\xa2\x1a\xee\x52\xe5\xb9\x3e\x2f\x5a\x52\x5c\x18\x83\x5d\x27\x94\x92\x85\xa6\x2a\xcf\xb8\x90\x93\x92\x6c\x78\x44\x1f\x2d\xcc\xb2\x0a\xec\x30\x18\x83\x59\x8f\x14\xd5\xbb\x52\x64\x0d\x00\x46\x8e\x5f\x23\xe7\x74\x11\x00\x14\xb1\x0d\xd4\x59\xe8\x31\x24\x32\x00\x1f\xd4\x1e\x99\x87\xc9\x75\xe8\x8e\xb4\xdf\x6f\x2d\xdc\x8c\x4d\xba\x1e\x50\xc9\x97\xfc\xe7\xb2\xb9\x9f\xc3\xc1\x53\xd4\xf5\xea\xd1\x07\xb2\x50\x93\xba\x9a\x86\xe4\x34\xd4\x0e\x2b\x27\x3a\xd1\xb0\xf8\xef\x3f\x98\x91\x3b\xb2\xf0\x3e\x55\xfe\x5b\xbe\x9a\x47\xa8\x2b\x18\xcb\x5f\x8c\x62\xbe\x46\xbc\xb6\x6f\x9b\x64\x4c\x22\x39\x93\xec\xb7\xbb\x07\x66\x4d\x2a\x78\x9a\x61\x8d\x3b\x08\xe7\xd3\x46\xfc\x99\xc4\xc2\xa4\xfa\x64\x4c\x4f\xa8\x59\xe8\x09\x95\xca\x59\x5e\x58\x51\x69\xfe\xaa\x5d\x59\xb7\x26\x51\xdf\x5f\xee\x48\xf3\xb6\x9f\x00\x00\x00\xff\xff\x1f\x2f\xa9\x0f\xd0\x01\x00\x00")

func kubeletYamlBytes() ([]byte, error) {
	return bindataRead(
		_kubeletYaml,
		"kubelet.yaml",
	)
}

func kubeletYaml() (*asset, error) {
	bytes, err := kubeletYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubelet.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe1, 0x70, 0xd5, 0xbb, 0x81, 0xa2, 0xa6, 0x76, 0x99, 0x80, 0xe7, 0xe2, 0x47, 0xc5, 0xa0, 0xe0, 0xb4, 0xe1, 0x42, 0x2c, 0xb0, 0x60, 0xa0, 0xb0, 0x97, 0x53, 0xa7, 0x1a, 0x9, 0xc3, 0x1, 0x6d}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"10-eksclt.al2.conf":  _10EkscltAl2Conf,
	"bootstrap.al2.sh":    bootstrapAl2Sh,
	"bootstrap.ubuntu.sh": bootstrapUbuntuSh,
	"kubelet.yaml":        kubeletYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"10-eksclt.al2.conf":  &bintree{_10EkscltAl2Conf, map[string]*bintree{}},
	"bootstrap.al2.sh":    &bintree{bootstrapAl2Sh, map[string]*bintree{}},
	"bootstrap.ubuntu.sh": &bintree{bootstrapUbuntuSh, map[string]*bintree{}},
	"kubelet.yaml":        &bintree{kubeletYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
