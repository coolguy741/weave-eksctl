// Code generated by go-bindata.
// sources:
// assets/vpc-admission-webhook-config.yaml
// assets/vpc-admission-webhook-dep.yaml
// assets/vpc-admission-webhook.yaml
// assets/vpc-resource-controller-dep.yaml
// assets/vpc-resource-controller.yaml
// DO NOT EDIT!

package addons

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _vpcAdmissionWebhookConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\x41\x6b\xc3\x30\x0c\x85\xef\xf9\x15\x22\xf7\xa4\xf4\x36\x7c\x1b\xa5\x8c\x1d\x06\x63\x8c\xed\x30\x76\x50\x1c\x35\x15\x89\x2d\x63\xd9\x29\xdd\xaf\x1f\x49\xda\xb0\x1e\xd6\x93\x6d\x7d\x4f\x4f\xe2\x19\x03\x7f\x50\x54\x16\x6f\x00\x5b\xc7\x3a\x5d\x23\x75\xac\x29\x62\x62\xf1\x75\xff\xa0\x35\xcb\x66\xdc\x36\x94\x70\x5b\xf4\xec\x5b\x03\x2f\x39\x61\x62\xdf\x7d\x52\x73\x14\xe9\x77\xe2\x0f\xdc\xe5\xa5\xa3\x70\x94\xb0\xc5\x84\xa6\x00\xf0\xe8\xc8\xc0\x18\x6c\xb5\xba\x57\xa7\xa5\xa9\xb2\x87\xae\x00\x18\xb0\xa1\x41\x27\x2d\x00\x86\xf0\x8f\xb8\xb8\x9c\xb3\xb0\xba\x67\x5b\xa3\xc3\x1f\xf1\x78\xd2\xda\x8a\x9b\x6d\xed\xc0\xe4\xd3\xb2\xe4\x32\x08\x40\x29\x8e\x6c\xe9\xfa\xbc\xbf\xa9\x8e\xf6\x46\xa7\x01\x2d\x19\xe8\x73\x43\x95\x9e\x35\x91\x5b\x71\xc0\x74\x34\x50\x6e\xdc\x94\x10\x95\x73\x3d\xe6\x81\xf4\x3a\xa9\x02\x09\xb4\x24\xa5\x06\xbe\xa0\xdc\xbd\xed\x1f\xdf\xf7\x25\x7c\xaf\x1e\x18\xf8\x29\x4a\x0e\x13\x2f\xcb\x9b\xfa\xe5\xb3\x66\x32\x6e\xff\xb0\x48\x2a\x39\x5a\x9a\x49\x90\x56\x2f\xec\x80\x3c\xe4\x48\xaf\x32\xb0\x3d\x1b\x78\xee\xbc\x44\x2a\x7e\x03\x00\x00\xff\xff\x01\x99\xcf\x0e\xf7\x01\x00\x00")

func vpcAdmissionWebhookConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_vpcAdmissionWebhookConfigYaml,
		"vpc-admission-webhook-config.yaml",
	)
}

func vpcAdmissionWebhookConfigYaml() (*asset, error) {
	bytes, err := vpcAdmissionWebhookConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vpc-admission-webhook-config.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vpcAdmissionWebhookDepYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x93\x4f\x8f\xd3\x30\x10\xc5\xef\xf9\x14\x73\x59\xf6\x94\x64\x77\x85\x38\x58\x2a\x12\x02\x71\x01\xb6\x95\x2a\x71\x9f\xda\xa3\xd6\x8a\xff\xc9\x33\x69\x08\x9f\x1e\xa5\x69\x21\xc9\xb6\x65\x0e\x3d\x8c\xdf\xef\xd5\xf3\x32\xc6\x64\x7f\x52\x66\x1b\x83\x02\x4c\x89\xeb\xe3\x73\xd1\xd8\x60\x14\x7c\xa1\xe4\x62\xef\x29\x48\xe1\x49\xd0\xa0\xa0\x2a\x00\x02\x7a\x52\x70\x4c\xba\x44\xe3\x2d\x0f\x64\xd9\xd1\xee\x10\x63\x53\x9a\x7f\xc8\x28\xe4\x84\x9a\x14\x34\xed\x8e\x4a\xee\x59\xc8\x17\x00\x0e\x77\xe4\x78\xf0\x82\xe1\x2f\x6f\x98\x15\x9c\x48\x0f\xa2\x4c\xc9\x59\x8d\xac\xe0\xb9\x00\x60\x72\xa4\x25\xe6\x11\xf7\x28\xfa\xf0\x7d\xe2\x77\xd7\x11\x40\xc8\x27\x87\x42\x67\x7a\x32\xd6\x50\x6e\x66\xf4\x1f\x2b\x80\xcb\x05\x87\xd2\x31\x08\xda\x40\x79\x82\x97\xf7\xb2\xfa\xab\x02\xc0\xbc\x9f\x50\x23\x59\x8a\xe3\xcf\x94\xe5\xab\x75\xb4\xaa\x49\x74\x7d\xe6\x6a\x4d\x59\xf8\xf4\x5b\xa5\x53\x9c\x4b\xec\x1b\xf5\xb7\xa8\x86\xfa\x6b\xd0\x7a\x7b\x8a\x70\x7b\x8e\x76\x7d\xa4\x9c\xad\xa1\x55\x67\x83\x89\x1d\x2f\xe5\xe8\x38\xba\xb8\x97\xc8\x62\x28\xe7\xe5\xf1\x71\xf5\x7e\xd1\x7a\xf9\xf8\xee\x79\xd2\xb2\x1e\xf7\xa4\xe0\xf1\x81\x2b\xd3\xe4\x8a\x74\xae\x1e\xb8\x42\x8f\xbf\x63\xc0\x8e\x2b\x1d\x7d\x4d\x0d\xd7\x57\x73\x53\x4f\xd5\x4b\xf5\xf4\xb8\xb4\xdb\xb4\xce\x6d\xa2\xb3\xba\x57\xf0\xc9\x75\xd8\x4f\x6f\x7d\x8c\xae\xf5\xf4\x23\xb6\x41\xde\x04\x3d\x7e\xa2\xcb\x02\x9f\x62\x9a\x29\x00\xfc\xc0\x6d\x50\x0e\x0a\xde\x46\xba\xd0\x66\x42\xb3\x0e\xae\x57\x20\xb9\xa5\xf3\xe1\x21\xb2\xbc\x92\x74\x31\x37\xb3\x7e\x88\x86\xb6\xb3\x75\x1e\x6a\x47\x82\xd5\xf0\x60\x72\x20\x21\xae\x6c\xac\x23\x2b\x70\x36\xb4\xbf\xee\x89\x30\xeb\x83\x02\xf4\xe6\xc3\x25\xfe\x71\xec\x2b\x0b\x79\x6b\x5a\x26\x9d\x49\xe6\x09\x8d\xbd\xd7\x3b\x8f\x7e\x74\xf9\x13\x00\x00\xff\xff\x2e\x06\x22\x02\x48\x04\x00\x00")

func vpcAdmissionWebhookDepYamlBytes() ([]byte, error) {
	return bindataRead(
		_vpcAdmissionWebhookDepYaml,
		"vpc-admission-webhook-dep.yaml",
	)
}

func vpcAdmissionWebhookDepYaml() (*asset, error) {
	bytes, err := vpcAdmissionWebhookDepYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vpc-admission-webhook-dep.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vpcAdmissionWebhookYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8c\x31\xaa\xc3\x30\x10\x44\x7b\x9d\x62\x2f\xb0\xc5\xe7\xbb\xd2\x29\x02\x81\xf4\x6b\x79\x48\x84\x2d\x6b\xd1\x6e\x14\x72\xfb\x60\x91\x22\x4d\x48\x37\x0c\xef\x3d\x66\x0e\xa2\xf9\x82\x66\xb9\xee\x91\xfa\x5f\x58\xf3\xbe\x44\x3a\xa3\xf5\x9c\x10\x0a\x5c\x16\x71\x89\x81\x68\x97\x82\x48\x5d\x13\xcb\x52\xb2\x1d\x06\x3f\x30\xdf\x6a\x5d\xd9\x7a\x7a\x13\xa6\x92\x10\x69\xbd\xcf\x60\x7b\x9a\xa3\x04\xa2\x4d\x66\x6c\x76\x44\x88\x44\xf5\x4b\x25\x98\x22\x1d\x90\xd6\xe6\x83\xe6\x31\x23\x4d\xd3\xff\x70\x5d\xda\x15\x7e\xfa\xf8\x0c\x1b\x92\xd7\xf6\xb3\xfd\x0a\x00\x00\xff\xff\x85\x93\x40\x3c\xeb\x00\x00\x00")

func vpcAdmissionWebhookYamlBytes() ([]byte, error) {
	return bindataRead(
		_vpcAdmissionWebhookYaml,
		"vpc-admission-webhook.yaml",
	)
}

func vpcAdmissionWebhookYaml() (*asset, error) {
	bytes, err := vpcAdmissionWebhookYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vpc-admission-webhook.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vpcResourceControllerDepYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\xcf\x6e\xdc\x3c\x0c\xc4\xef\x7e\x0a\x5e\x82\x9c\xec\xdd\xcd\xf7\x35\x41\x05\xf4\x10\x34\x40\x7b\x28\x8a\x05\x12\xf4\xce\x95\x27\xb1\x60\x59\x12\x48\x7a\x93\xcd\xd3\x17\x6e\xb3\x7f\x8c\xa6\x49\x79\x32\xe6\x27\x7a\x86\x82\x58\xd7\x75\xc5\x25\xfc\x80\x68\xc8\xc9\x11\x97\xa2\x8b\xed\xaa\xea\x43\x6a\x1d\xdd\xa0\xc4\xbc\x1b\x90\xac\x1a\x60\xdc\xb2\xb1\xab\x88\x12\x0f\x70\xb4\x2d\xbe\x16\x68\x1e\xc5\xa3\xf6\x39\x99\xe4\x18\x21\x2f\x5c\x0b\x7b\x38\xea\xc7\x0d\x6a\xdd\xa9\x61\xa8\xb4\xc0\x4f\xed\x82\x12\x83\x67\x75\xb4\xaa\x88\x14\x11\xde\xb2\x4c\x84\x68\x60\xf3\xdd\x37\xde\x20\xea\x6f\x81\xa6\x48\x6f\x99\x4d\x65\x01\xe2\x68\xc3\xbe\x47\x6a\xf7\x9a\xb0\xef\x1d\xa9\xf1\x26\xa2\x22\x32\x0c\x25\xb2\xe1\xc5\xe7\x64\x9c\xa9\xe2\xcc\xf2\x9f\x4c\x5f\xb7\xfd\xd3\x98\x68\x3f\xf8\xaf\x6f\xc8\x36\x78\x5c\x7b\x9f\xc7\x64\xef\x79\x4c\x02\x87\x04\x39\x44\xab\xc9\xe7\x61\xe0\xd4\x1e\xb3\xd6\xb4\x78\x2f\x29\xcb\x83\x9e\x36\xd4\x6a\x2d\x44\xac\x13\x68\x97\x63\xfb\x29\xa4\xfb\x7c\xe0\x61\xe0\x07\x38\x3a\x3f\xd3\xa6\xed\xa5\x81\x97\xe6\x4c\x1b\x1e\xf8\x39\x27\x7e\xd4\xc6\xe7\x61\x81\x5e\xff\xe6\xea\x96\xcd\x45\xb3\x3c\x9f\xff\x6e\x3d\xc6\xb8\xce\x31\xf8\x9d\xa3\xeb\xf8\xc8\x3b\x3d\xf0\x18\xb6\x48\x50\x5d\x4b\xde\xe0\x98\x92\xe8\x9e\x43\x1c\x05\x77\xfb\x94\x8e\x3e\x9c\xd0\xce\xac\x7c\x81\x9d\x36\x10\x75\x59\xcd\xd1\xea\xe2\xaa\x59\x36\xcb\x66\x35\x63\x85\xad\x73\xb4\xe8\xc0\xd1\xba\xe7\x39\xca\x62\x8e\x2e\x57\x57\x57\x1f\x67\xba\xfa\x0e\xd3\x5b\xff\x7a\x77\xb7\x3e\x01\x21\x05\x0b\x1c\x6f\x10\x79\x77\x0b\x9f\x53\xab\x8e\xfe\x5b\x9e\x9c\x28\x90\x90\xdb\xd7\x99\x85\x01\x79\xb4\x03\x3c\x0e\xf5\xde\x62\xed\x9f\x90\x1f\x25\xd8\xee\x73\x4e\x86\xa7\xd9\x05\x14\x09\xdb\x10\xf1\x80\xd6\x91\xc9\x88\xea\x78\x2b\xdf\x61\x8f\x59\xfa\x99\x9e\x72\x8b\xdb\xd9\xfe\x4d\xb5\x81\x71\x33\x2d\xae\x24\x18\xb4\x09\x79\x91\xd5\x51\x0c\x69\x7c\x7a\xeb\x10\x8b\xef\x1c\xf1\xd0\x5e\xfe\x5f\xfd\x0c\x00\x00\xff\xff\xf0\x2f\x7a\xb9\x58\x04\x00\x00")

func vpcResourceControllerDepYamlBytes() ([]byte, error) {
	return bindataRead(
		_vpcResourceControllerDepYaml,
		"vpc-resource-controller-dep.yaml",
	)
}

func vpcResourceControllerDepYaml() (*asset, error) {
	bytes, err := vpcResourceControllerDepYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vpc-resource-controller-dep.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vpcResourceControllerYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\xb1\x4e\x03\x31\x0c\x86\xf7\x3c\x45\xd4\x3d\xad\xd8\xd0\x6d\xc0\xc0\x5e\x24\x76\x5f\xce\x6d\x4d\x73\x71\x64\x3b\x87\xe0\xe9\xd1\x35\x6d\x91\xa8\xa0\x20\xa6\xfb\xce\xf1\xef\x5f\xfa\x42\x08\x0e\x0a\x3d\xa3\x28\x71\xee\xbc\xf4\x10\x97\x50\x6d\xc7\x42\xef\x60\xc4\x79\xb9\xbf\xd5\x25\xf1\x6a\xba\x71\x7b\xca\x43\xe7\x1f\x52\x55\x43\x59\x73\x42\x37\xa2\xc1\x00\x06\x9d\xf3\x3e\xc3\x88\x9d\x9f\x4a\x0c\x82\xca\x55\x22\x86\xc8\xd9\x84\x53\x42\x71\x52\x13\x6a\xe7\x82\x87\x42\x8f\xc2\xb5\xe8\x9c\x09\x7e\xb1\x70\xde\x9f\x02\xc7\x59\xe6\x01\xf5\x93\x56\x6a\x60\xb5\x0d\x0a\x0f\x0d\x22\xe7\x0d\x6d\x47\x28\xf3\xef\x84\xd2\x1f\xb3\xb5\x0c\x60\x78\xc0\x2d\xda\xe1\x9b\x48\x1b\xbc\x82\xc5\x5d\x3b\x73\xa6\x28\x38\xef\xff\xcf\xc3\x3d\xe5\x81\xf2\xf6\x2f\x3a\x38\xe1\x1a\x37\xf3\xe2\x49\xc8\x0f\xa5\xce\xfb\x4b\xf7\xd7\x2a\xb4\xf6\x2f\x18\xed\x20\xbd\xa5\x9f\x50\x26\x8a\x78\x17\x23\xd7\x6c\x57\x0f\xb4\x77\x2d\x10\xb1\xf3\xfb\xda\x63\xd0\x37\x35\x1c\x2f\x64\x9d\x95\x7c\x29\xf8\xbd\x8e\x6f\xab\xdc\x47\x00\x00\x00\xff\xff\x16\x48\x7e\xad\xa1\x02\x00\x00")

func vpcResourceControllerYamlBytes() ([]byte, error) {
	return bindataRead(
		_vpcResourceControllerYaml,
		"vpc-resource-controller.yaml",
	)
}

func vpcResourceControllerYaml() (*asset, error) {
	bytes, err := vpcResourceControllerYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vpc-resource-controller.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"vpc-admission-webhook-config.yaml": vpcAdmissionWebhookConfigYaml,
	"vpc-admission-webhook-dep.yaml": vpcAdmissionWebhookDepYaml,
	"vpc-admission-webhook.yaml": vpcAdmissionWebhookYaml,
	"vpc-resource-controller-dep.yaml": vpcResourceControllerDepYaml,
	"vpc-resource-controller.yaml": vpcResourceControllerYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"vpc-admission-webhook-config.yaml": &bintree{vpcAdmissionWebhookConfigYaml, map[string]*bintree{}},
	"vpc-admission-webhook-dep.yaml": &bintree{vpcAdmissionWebhookDepYaml, map[string]*bintree{}},
	"vpc-admission-webhook.yaml": &bintree{vpcAdmissionWebhookYaml, map[string]*bintree{}},
	"vpc-resource-controller-dep.yaml": &bintree{vpcResourceControllerDepYaml, map[string]*bintree{}},
	"vpc-resource-controller.yaml": &bintree{vpcResourceControllerYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

