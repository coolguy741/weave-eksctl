// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/efa-device-plugin.yaml (3.084kB)
// assets/neuron-device-plugin.yaml (3.623kB)
// assets/nvidia-device-plugin.yaml (2.369kB)
// assets/vpc-controller-metadata.yaml (924B)

package addons

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _efaDevicePluginYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\x4d\x8f\xdb\x36\x10\xbd\xfb\x57\x0c\x1c\xec\xad\x92\xba\xd9\x5d\x20\x50\x4f\xc6\xc6\x2d\x82\x6e\xb6\x41\x9d\xb4\x87\xa2\x87\x31\x39\xb2\x08\x53\x24\xcb\x19\xd9\xeb\xfe\xfa\x82\xb2\xac\x58\xce\x3a\xeb\x5e\x72\x8a\x2f\x16\xc8\xf7\xe6\xcd\x0c\x1f\x3f\xb2\x2c\x9b\x60\x30\x7f\x50\x64\xe3\x5d\x09\x18\x02\x17\x9b\xeb\xc9\xda\x38\x5d\xc2\x5b\xa4\xc6\xbb\x05\xc9\xa4\x21\x41\x8d\x82\xe5\x04\xc0\x61\x43\x25\xe0\x96\x33\xaa\x30\x5b\xbf\xe1\x4c\xd3\xc6\x28\xca\x82\x6d\x57\xc6\x65\xba\x63\x31\x49\x8f\xe5\x80\x8a\x4a\x58\xb7\x4b\xca\x78\xc7\x42\xcd\x84\x03\xa9\x14\x8a\xc9\x92\x12\x1f\xd3\x37\x40\x83\xa2\xea\x07\x5c\x92\xe5\xfd\xc0\x41\xeb\xbc\xd8\x04\xa0\x0d\x1a\x85\x16\x12\x51\x68\xb5\xdb\x13\x65\x17\xa8\x84\xdf\xbd\xb5\xc6\xad\x3e\x75\x80\x09\x80\x50\x13\x2c\x0a\xf5\x6a\x47\x25\xa5\xdf\x2b\xf8\x58\x1b\x06\x74\xce\x0b\x8a\xf1\x0e\x0c\x83\xa6\x10\x49\xa1\x90\xce\xe1\x57\x0a\x02\x35\x45\x82\xca\x47\x58\xa2\x5a\x6f\x31\x6a\x50\xbe\x09\x28\x66\x69\xac\x91\xdd\x10\x6b\x41\x04\xb5\x48\xe0\xb2\x28\x52\xe5\xd1\x91\x10\xe7\xc6\x17\xda\x2b\x2e\x04\x79\xcd\x05\xea\xc6\x38\xc3\x42\x31\x53\xb6\x4d\xff\xc5\xaa\xc5\x88\x4e\x88\x74\xc6\xaa\x26\xdd\xa6\x0a\x32\x15\x8d\x18\x85\x36\x43\xad\xbd\xcb\x82\xd7\x5c\xf4\x52\x9f\xf3\x1d\x9a\x06\xd0\x53\x29\xe6\x68\x43\x8d\xf9\x38\x83\x21\x5a\xf0\xba\x84\xe9\xb4\xa7\xd9\x51\xe7\x5f\x5c\xe7\x0e\x77\x58\xc8\xee\x9b\x62\x9a\x9e\x29\xe5\x5b\x27\x25\x68\xaa\xb0\xb5\xd2\xcf\x8a\xb7\x14\x4f\xf3\xcc\x60\x4d\xbb\x12\xee\xfb\x84\x66\xa9\x3a\xfe\xcd\xd9\xdd\x80\x00\xf0\x21\xf1\x7c\x2c\x61\xfe\x64\x58\xf8\x94\x8c\x5b\xce\xb1\xc1\x7f\xbd\xcb\x95\x6f\x0a\xaa\xf0\x12\x32\x00\x55\x15\x29\x29\xe1\xd1\x2f\xfa\x6e\x0d\x8b\xf7\x1e\xe3\x1a\x24\xb9\x21\x78\x0d\xc8\x80\x70\xe8\x19\xa0\xd6\x99\x77\x3f\xc1\xb6\x26\x07\xe4\x70\x69\x49\xff\x00\x52\xd3\x29\x64\x88\x36\x2c\x06\x44\x4a\x3d\x22\x4e\x1f\xbe\x8d\x8a\xb8\xb3\xd2\x09\x31\x89\x32\xb0\x07\xa9\x51\x52\xe4\x1d\x28\xfc\x1c\x6e\x49\x89\xde\xc7\xd4\x80\x95\x50\x04\x84\x0a\x8d\x6d\x23\xe5\xdf\xde\x81\x21\x1a\x1f\x8d\xec\xee\x2d\x32\x3f\x76\xa6\x99\xee\xf7\x79\xe6\xbc\xa6\x81\x7a\xf0\x19\x56\x95\x71\x46\x76\x47\x4e\xf3\x9a\x66\x5f\x8c\xa6\x22\xe6\x3f\xcf\x80\xdb\x10\x7c\x14\xd2\x60\x1c\x0b\x3a\x45\x5c\x0e\x95\xa5\x5a\xf2\x13\x0b\xcc\xfe\x5c\xcc\xef\x5f\x17\x69\xab\xb3\x14\x9f\x98\xe2\x2f\xad\xd1\x94\xac\x91\xd7\xd2\xd8\x57\xc9\xcf\x87\x58\x59\x3a\x2b\x8e\x7d\x11\xe9\x9f\xd6\x44\xd2\x6f\xdb\x68\xdc\x6a\x31\xb4\xe0\xdd\xca\xf9\x61\x78\xfe\x44\xaa\x4d\x66\x3e\x4e\x77\x5f\xc8\xa2\x3f\xd3\x3e\x52\x6c\x78\x3c\x9d\x3c\xdb\x1d\x72\xf3\xa7\x10\x89\x79\xbc\x19\x8e\x51\x9d\xb3\xa7\x4b\x92\xd3\xbd\x3b\x4a\x7b\xfa\x0c\xf7\xd8\xf3\xef\xdc\xb3\x80\x0d\xda\x96\x9e\x15\xde\x8b\xab\x3b\x97\x5f\xbf\x79\xb2\x18\x57\xf4\x55\x50\x3a\x42\xed\x59\xc4\xea\x56\xbf\x04\x31\x37\xe4\xf2\xd7\xb7\x2f\x48\x75\xa8\x17\x02\xb9\xea\xfa\xe5\x40\xcd\x9d\xbe\x40\xae\xb9\xbb\x00\x14\x6e\x2e\x09\x15\x2f\x12\x8c\x17\x09\xde\xea\x73\xa0\xff\x67\xaa\xe4\xd1\xef\xa6\xfa\x6e\xaa\x33\xa6\xaa\x3d\xcb\x23\xc9\xd6\xc7\x75\x09\x12\xdb\xc3\xb8\xf2\x4e\xd0\x38\x8a\xa3\xeb\xdb\x34\xb8\x4a\xe7\xfd\x15\xe7\x7a\x1d\x73\x52\x31\xbf\xe2\xfc\x8a\x0b\x4a\x97\xcb\xb9\xa7\x43\xb9\xf9\x31\xbf\xc9\x6f\x8e\x9d\x76\xc9\x63\x63\xff\x63\x52\x6d\x77\xdd\x78\x27\xf4\x24\x63\xc7\xa1\xb5\x7e\xfb\x21\x9a\x8d\xb1\xb4\xa2\x39\x2b\xb4\xdd\x9b\xa3\x84\x0a\x2d\x8f\x1b\xa1\x30\x60\xf7\x6a\x33\x5f\xfa\x56\x47\x1f\x4a\xf8\x6b\x3a\x7b\x78\x98\xfe\x7d\x34\xb7\xf1\xb6\x6d\xe8\x7d\x7a\xe0\x9c\x70\xb2\xbe\x84\x73\x69\xa7\x5f\x93\x78\x1f\x50\xea\x12\x8a\x0d\xc6\xc2\x9a\x65\x77\x35\x5b\x92\x62\xc4\x3b\xdc\x47\x7b\xb9\x51\xc7\xbf\xae\x92\x56\xaf\x13\x18\x29\x87\x8b\x24\xff\x0b\x00\x00\xff\xff\xf5\xa9\x92\x60\x0c\x0c\x00\x00")

func efaDevicePluginYamlBytes() ([]byte, error) {
	return bindataRead(
		_efaDevicePluginYaml,
		"efa-device-plugin.yaml",
	)
}

func efaDevicePluginYaml() (*asset, error) {
	bytes, err := efaDevicePluginYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "efa-device-plugin.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf, 0x88, 0xf3, 0x33, 0x57, 0xdb, 0x84, 0xb8, 0x9e, 0x87, 0x8d, 0x16, 0xec, 0x91, 0x23, 0x4, 0xcc, 0x1d, 0x9f, 0x58, 0x2a, 0xa8, 0xee, 0x6b, 0xa7, 0xe9, 0xd6, 0x14, 0xbf, 0x16, 0x57, 0xeb}}
	return a, nil
}

var _neuronDevicePluginYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x56\x4d\x73\xdb\x36\x10\xbd\xeb\x57\xec\x28\xd7\x92\xac\xfb\x35\x19\xf6\xe4\x38\x4a\x26\xd3\xc4\xf1\x44\x4d\x2f\x9d\x4e\x67\x05\x2c\x29\x54\x20\x80\x02\x0b\xd9\xca\xaf\xef\x80\xa4\x68\xd2\x66\x58\xa7\xd3\x9e\xca\x13\x29\xec\xbe\x5d\x3c\xbc\x7d\x50\x96\x65\xab\x83\x32\xb2\x84\x2b\x1d\x03\x93\xff\x60\x35\xad\xd0\xa9\x5f\xc8\x07\x65\x4d\x09\x7e\x87\x22\xc7\xc8\x7b\xeb\xd5\x27\x64\x65\x4d\x7e\x78\x1e\x72\x65\x8b\xe3\xc5\xaa\x21\x46\x89\x8c\xe5\x0a\xc0\x60\x43\x25\x18\x8a\xde\x9a\x4c\xd2\x51\x09\xca\x9c\x8e\xb5\x32\x2b\x1f\x35\x85\x14\x93\x01\x3a\xf5\xda\xdb\xe8\xda\xcf\xf4\x64\xb0\x5e\xb7\xaf\x9e\x82\x8d\x5e\xd0\x68\xc5\x58\x49\xa1\xfd\x3a\x92\xdf\x8d\x16\x6a\xe2\xe1\x5d\xab\x70\xff\x71\x8b\x2c\xf6\x5f\x5e\x88\x8e\x64\x78\xb6\x92\xf0\x84\x4c\xc3\xa7\xfb\x67\xf8\xce\xca\x59\xf4\xe8\xe4\x1c\xfa\x7f\xb3\xc9\x96\xcd\x22\x30\x72\x9c\x6d\x66\x5a\xbd\x6f\x2d\x09\x64\x2c\x87\xe3\x45\xaf\x97\x2d\xf9\x74\xc4\x97\x42\xd8\x68\xf8\xa9\x4a\xe8\x16\x83\x43\x41\x25\x1c\xe2\x8e\xb2\x70\x0a\x4c\xcd\x6a\x56\x88\x2f\x94\x91\xca\xd4\xff\xba\x1e\x3f\xdb\x85\xb7\x9a\x3e\x50\x95\xd2\xcf\xd4\x2e\x54\x5c\x01\x3c\x9e\x9d\xc5\xc2\x21\xee\xfe\x20\xc1\xfd\x2c\xcc\x12\x99\xd8\x5f\x6c\x7d\x91\xc2\x67\xb0\x67\x76\xa1\x2c\x8a\xb4\xe2\x0d\x31\xb5\xdc\x48\x2b\x42\x21\xac\x11\xe4\x38\x14\x74\xc7\x64\x64\x76\x1f\x52\x08\xdb\xb8\xc8\x94\x05\xb6\x1e\x6b\xca\x0c\x71\x31\x29\x1c\x8a\xc9\x29\xa0\x73\xa1\x18\xb4\xf0\x12\xa9\xb1\x66\x4b\x4f\x95\x41\x26\xdb\x84\xd0\x0a\xfc\x33\xbb\x09\x8e\x44\x42\x09\xa4\x49\xb0\xf5\x9d\x4e\x9b\xa4\xd1\xb7\xb8\x23\x3d\x08\x77\xa9\x4c\xd2\x79\x27\xe4\x2d\x7b\x64\xaa\x4f\x5d\x16\x9f\x1c\x95\xf0\xc1\x6a\xad\x4c\xfd\xf1\x3c\x84\x4c\x8d\xd3\xc8\xd4\x97\x1a\x6d\x25\x3d\x68\x8c\xe5\xf6\xf8\x87\xd2\x00\x41\xec\x49\x46\x4d\x3e\x47\xed\xf6\x98\x4f\x59\x17\x5e\xb1\x12\xa8\x33\x67\x65\x79\x9e\x4c\x00\x3d\xe9\xff\xef\x77\x00\x70\x26\xa3\x7d\x9f\xe8\x65\x41\x26\x00\x6c\x35\xf9\x87\x2d\x67\x70\xa0\x53\x09\x57\x7d\x6f\x97\x52\x5a\x13\xde\x1b\x7d\x1a\x22\x00\xac\x4b\x79\xd6\x97\xb0\xb9\x53\xa1\x77\xc6\x51\x32\xde\x86\x1c\x1b\xfc\x64\x4d\x2e\x6c\x53\x74\x2d\x3c\x25\x1f\x80\xaa\x8a\x04\x97\x70\x6d\xb7\x3d\x77\xfd\xe2\x33\x78\x87\xfe\x00\xbc\x57\x21\xf9\x25\x60\x00\x84\x33\x83\x80\x52\x66\xd6\xfc\x08\xb7\x7b\x32\x40\x06\x77\x9a\xe4\x57\xc0\x7b\x7a\x18\x32\xa0\x0d\x47\x93\xbc\x90\xfc\x91\xc2\xbd\x29\x42\x65\xfd\xc3\xc4\xd6\xa4\x21\x58\xe0\x3d\x72\x42\x3e\x81\xc0\x7b\xb8\x1d\xa5\xf4\x1e\x53\x02\x56\x4c\x1e\x10\x2a\x54\x3a\x7a\xca\x87\xb8\x2d\xd1\xd2\x0c\x32\x86\x43\x28\x50\x36\xca\xa8\xe4\x19\x99\xe8\xbc\xa3\xa8\x23\x7a\x34\x4c\x24\xb3\xbe\x8a\x32\x75\x36\x28\x08\xd3\x31\x25\x1d\x85\xa2\x2f\xe5\xbc\xb2\x5e\xf1\xe9\x4a\x63\x08\xd7\xad\x84\xd6\xdd\xec\x64\xc9\xe9\x87\xd4\xb3\xea\xb0\xaa\x94\x51\x7c\x1a\xe9\xce\x4a\xba\x7c\xf4\x6b\xba\x3b\xfe\x8c\xca\x93\x7c\x19\xbd\x32\xf5\x76\xe8\xe6\x4d\x6d\xec\xf0\xf3\xe6\x8e\x44\x4c\xd2\x1a\x67\x76\x98\xdb\x7e\x64\x7f\x26\xdf\x84\xe9\x72\x52\x50\x3b\xc3\x9b\x3b\xe7\x29\x84\xa9\x34\xc7\x51\xad\xce\xd6\x3b\xe2\x87\x43\xa5\x4c\x60\x34\x82\xb2\x34\xc4\xeb\x99\xdc\xb1\xfc\xde\x98\xd9\x80\x23\xea\x48\xb3\x85\xbb\xe2\xca\x54\x17\xf9\x9d\x46\x5f\xd3\x72\xcc\x37\x4f\x09\xfa\xe1\x49\x48\xdf\xcd\x46\x7d\x19\x5d\x89\xfd\xff\x25\x5d\xc2\x1a\x46\x65\xc8\x4f\x8c\x4e\x35\x58\xa7\xb1\x70\x71\xa7\x95\xc8\x49\xf8\x1c\x6f\x43\x6f\x57\xc5\x9c\x71\x96\x17\xf9\xf7\xf9\xb7\xf9\xd7\x63\xa2\x5a\x94\x9b\xa8\xf5\x8d\xd5\x4a\x9c\x4a\xb8\xd4\xb7\x78\x1a\x7b\x5a\x67\xe0\x87\xe7\x21\x9b\x35\x71\xc1\x7e\x6c\x80\xe6\x38\x65\x32\xeb\xf3\x7f\xfa\xf8\x62\x73\xf5\xfe\xfa\xd5\x9b\xd7\xab\x19\xfa\x4b\x28\x88\xc5\xc8\x52\xda\x57\x4d\x9c\x0b\x6b\xaa\x59\xc0\xeb\xf7\x2f\x37\xbf\x5f\x5f\xbe\xdb\xcc\xe1\xbd\xf2\xb6\x79\x7c\xa2\x95\x22\x2d\xfb\x7f\x40\xb3\x6b\x37\xc8\xfb\xb2\xbd\x8f\xf2\x24\xb6\xe4\x3b\xa3\xd0\x40\x22\xb6\x9e\x64\x0d\xd3\x1d\x4f\x51\x50\x6b\x7b\x7b\xe3\xd5\x51\x69\xaa\x69\x13\x04\xea\xf6\x6e\x2a\xa1\x42\x1d\xa6\xe7\x2d\xd0\xe1\x4e\x69\xc5\xea\xb1\xee\xa4\xb7\xae\x84\x5f\xd7\x97\x6f\xdf\xae\x7f\x1b\xad\x1d\xad\x8e\x0d\xbd\x4b\xb7\x62\x98\x67\x78\xee\x8e\x3c\x3f\x4d\xca\xeb\x76\x57\x1c\xd1\x17\x5a\xed\xce\x0c\x3f\xf8\x27\x34\x0b\xad\x4c\x85\x59\x83\x6e\x01\xd5\xc7\x73\xcd\xae\xd3\x89\x54\x97\x1b\xdc\xdb\xd0\xa1\x4c\xe0\xdd\x17\x75\xbb\xd0\xe9\x22\x7c\x6a\xfb\xaf\x00\x00\x00\xff\xff\xb8\x35\xe9\xa2\x27\x0e\x00\x00")

func neuronDevicePluginYamlBytes() ([]byte, error) {
	return bindataRead(
		_neuronDevicePluginYaml,
		"neuron-device-plugin.yaml",
	)
}

func neuronDevicePluginYaml() (*asset, error) {
	bytes, err := neuronDevicePluginYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "neuron-device-plugin.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfd, 0x74, 0x40, 0xab, 0xb9, 0x89, 0x7d, 0xb8, 0x93, 0xb5, 0xea, 0x8f, 0x3d, 0x97, 0x97, 0xa2, 0x7c, 0xd4, 0xde, 0xb3, 0x44, 0xa0, 0xd3, 0xf9, 0xa4, 0xde, 0x3b, 0x6, 0xdc, 0xc6, 0x8d, 0x8c}}
	return a, nil
}

var _nvidiaDevicePluginYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x55\x41\x8f\xdb\x36\x13\xbd\xeb\x57\x3c\xd8\x97\x04\x58\x49\x9b\x9c\xbe\x28\xf8\x0e\xee\xee\x16\x35\xb2\xb1\x83\xf5\x26\x41\x50\xf4\x30\x26\xc7\x12\x61\x8a\x64\x49\xca\x5e\xfd\xfb\x82\xb2\xd6\x6b\xa5\x40\x93\x53\x81\xea\x62\x43\x7a\x33\xf3\xe6\xbd\x19\x72\x8e\x1b\xeb\x7a\xaf\xea\x26\xe2\x95\x78\x8d\xb7\xd7\x6f\xde\x5d\x61\xf5\x65\x79\xbb\x5c\xe0\x66\xfd\xf0\x69\xfd\xb0\x78\x5c\xae\x57\x05\xb0\xd0\x1a\x03\x30\xc0\x73\x60\x7f\x60\x59\x64\xf3\x6c\x8e\x7b\x25\xd8\x04\x96\xe8\x8c\x64\x8f\xd8\x30\x16\x8e\x44\xc3\xcf\x5f\xae\xf0\x85\x7d\x50\xd6\xe0\x6d\x71\x8d\x57\x09\x30\x1b\x3f\xcd\x5e\xbf\xcf\xe6\xe8\x6d\x87\x96\x7a\x18\x1b\xd1\x05\x46\x6c\x54\xc0\x4e\x69\x06\x3f\x09\x76\x11\xca\x40\xd8\xd6\x69\x45\x46\x30\x8e\x2a\x36\x43\x99\x31\x49\x91\xcd\xf1\x6d\x4c\x61\xb7\x91\x94\x01\x41\x58\xd7\xc3\xee\x2e\x71\xa0\x38\x10\x4e\x4f\x13\xa3\xab\xca\xf2\x78\x3c\x16\x34\x90\x2d\xac\xaf\x4b\x7d\x02\x86\xf2\x7e\x79\x73\xb7\xda\xdc\xe5\x6f\x8b\xeb\x21\xe4\xb3\xd1\x1c\x52\xe3\x7f\x76\xca\xb3\xc4\xb6\x07\x39\xa7\x95\xa0\xad\x66\x68\x3a\xc2\x7a\x50\xed\x99\x25\xa2\x4d\x7c\x8f\x5e\x45\x65\xea\x2b\x04\xbb\x8b\x47\xf2\x9c\xcd\x21\x55\x88\x5e\x6d\xbb\x38\x11\xeb\x99\x9d\x0a\x13\x80\x35\x20\x83\xd9\x62\x83\xe5\x66\x86\x5f\x16\x9b\xe5\xe6\x2a\x9b\xe3\xeb\xf2\xf1\xb7\xf5\xe7\x47\x7c\x5d\x3c\x3c\x2c\x56\x8f\xcb\xbb\x0d\xd6\x0f\xb8\x59\xaf\x6e\x97\xc9\xa8\x0d\xd6\xbf\x62\xb1\xfa\x86\x0f\xcb\xd5\xed\x15\x58\xc5\x86\x3d\xf8\xc9\xf9\xc4\xdf\x7a\xa8\x24\xe3\x60\x1d\x36\xcc\x13\x02\x3b\x7b\x22\x14\x1c\x0b\xb5\x53\x02\x9a\x4c\xdd\x51\xcd\xa8\xed\x81\xbd\x51\xa6\x86\x63\xdf\xaa\x90\xcc\x0c\x20\x23\xb3\x39\xb4\x6a\x55\xa4\x38\xbc\xf9\x5b\x53\x45\x96\x91\x53\xa3\xfd\x55\xd2\x2c\x94\x87\x37\xd9\x5e\x19\x59\xe1\x96\xb8\xb5\x66\xc3\x31\x6b\x39\x92\xa4\x48\x55\x06\x18\x6a\xb9\x82\x39\x28\xa9\x28\x97\x7c\x50\x82\x73\xa7\xbb\x5a\x99\x5c\x0e\x01\x81\xe3\x08\x0b\x8e\x04\x57\xd8\x77\x5b\xce\x43\x1f\x22\xb7\x59\xe2\x9e\xb2\x04\xd6\x2c\xa2\xf5\xe9\x3f\xd0\x52\x14\xcd\x3d\x6d\x59\x87\xd3\x8b\x7f\x2e\x13\x32\xa0\x73\x92\x22\x6f\xa2\xa7\xc8\x75\x7f\x8a\x8a\xbd\xe3\x0a\x0f\x56\x6b\x65\xea\xcf\x03\x20\x03\x22\xb7\x4e\x53\xe4\xb1\xd4\x45\x2b\xe9\x99\xe3\x31\x4d\x33\x19\x63\x4f\x2a\x0d\x3e\xb3\xf3\x2c\x28\xb2\x2c\xf0\x21\x0d\x78\xc3\xfe\xa4\xff\x96\xc4\xfe\x48\x5e\x0e\xf3\x4e\x51\x6d\x95\x56\xb1\x3f\xe7\x4a\x96\xa5\xd1\x0d\x55\x59\xa6\xb6\xbd\xe1\xc8\xa1\x50\xb6\x94\x56\x84\x32\x52\xd8\x87\x92\x64\xab\x8c\x0a\x91\x7d\x2e\x74\x97\x7e\xcb\xba\x23\x4f\x26\x32\xcb\x3c\x88\x86\x65\x97\x3a\xc8\x45\x9a\x51\x41\x3a\x27\x29\xad\xc9\x9d\x95\xa1\x1c\x4b\xbd\xf0\x3d\x2b\x06\x8c\xa1\xec\x0b\xd2\xae\xa1\x62\xca\xe0\x9c\xcd\x59\x59\x61\x36\x1b\xc3\xf4\x44\xf6\x1f\x0b\x0f\x3c\x7b\x38\x48\x6e\x35\xfb\x29\x8f\x51\xd1\x97\x2f\xff\x0d\x45\x73\xec\xb9\xaf\x70\x33\x22\x16\x09\x10\xd6\x46\xf7\x67\x65\xac\x4b\x0d\x59\x5f\xe1\xee\x49\x85\x18\xa6\x81\x27\xc5\x0a\x61\xdb\xb2\x76\xdd\x8f\x82\x00\xde\xed\x58\xc4\x0a\x2b\xbb\x19\x6d\x3b\xf7\xfc\x91\xfc\xfe\x74\xc8\x3a\x2b\x41\x21\x1d\x97\x23\x2d\x90\x94\xb9\x35\xef\x71\x6c\xd8\x80\x4d\x3a\xdf\xe4\xd5\xb0\xd2\xdf\x41\xce\xd9\xce\x53\xf1\x7c\x2f\x0c\x17\x84\xed\xbc\xe0\x30\x38\xf0\x5d\x60\x2a\x1a\x10\x2c\x62\x43\x31\x65\xee\x21\xe8\x25\xdd\x96\x53\xf8\x98\x53\x82\x76\x91\x3d\x08\x3b\x52\xba\xf3\x5c\xfc\xfb\xc6\x39\xaf\xac\x57\xb1\xbf\xd1\x14\xc2\x6a\x98\xde\xd9\xe9\xb4\xc9\x8d\x95\x7c\x0e\x7d\x1e\x78\x61\x4d\xba\x83\xd8\x9f\x27\x36\x87\x6a\xa9\x1e\xa6\x5e\xf8\xc4\xf0\xe4\x65\xb9\xff\x5f\x98\x6e\x40\x75\xb8\x2e\xde\x15\xd7\x3f\xb3\x2b\x22\xfa\x33\x8c\x7c\x1d\x2a\xfc\x3e\xcb\xf3\xa4\x52\x6e\x4d\xae\x8c\x8a\x39\x7b\x6f\xfd\xff\x77\xa4\x03\xcf\xfe\x78\x59\x62\x16\xdd\xd0\x8e\x35\x91\x9f\xe2\xcb\x62\x02\xa4\xb5\x3d\x7e\xf2\xea\xa0\x34\xd7\x7c\x17\x04\xe9\x61\xc1\x2a\x0c\x49\x2e\x90\x82\x1c\x0d\x8b\xa4\x38\x5c\x66\x00\xa4\xb7\x2e\x71\x59\xdc\xdf\x5f\x14\x3d\x58\xdd\xb5\xfc\xd1\x76\x26\x4e\xf0\xf9\xd8\xe2\xa4\xb7\x49\xbe\x36\xc5\x7c\xa2\xd8\x54\x28\x0f\xe4\x4b\xad\xb6\x83\xdd\x9a\x63\x39\x89\x7a\x9e\xfc\x53\xa9\x8b\x2a\x3f\xaa\xd1\xd8\x70\x2a\x30\xa9\xeb\x7e\xaa\x64\xf6\x57\x00\x00\x00\xff\xff\xaf\x6c\xf5\xd9\x41\x09\x00\x00")

func nvidiaDevicePluginYamlBytes() ([]byte, error) {
	return bindataRead(
		_nvidiaDevicePluginYaml,
		"nvidia-device-plugin.yaml",
	)
}

func nvidiaDevicePluginYaml() (*asset, error) {
	bytes, err := nvidiaDevicePluginYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nvidia-device-plugin.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x49, 0x34, 0xa1, 0xba, 0x6, 0x98, 0xf5, 0x96, 0x4d, 0x79, 0xa1, 0x9a, 0x47, 0x9, 0x3e, 0x2d, 0x8e, 0x64, 0x45, 0xf5, 0x9d, 0xcf, 0x3f, 0xf6, 0x8d, 0x97, 0x94, 0xa3, 0x59, 0xec, 0x4a, 0x29}}
	return a, nil
}

var _vpcControllerMetadataYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x93\xc1\x6e\xc2\x40\x0c\x44\xef\xf9\x8a\xfc\xc0\x06\x71\xab\x72\x2c\xbd\xf6\x02\x52\x7b\x76\x36\x66\xb1\x92\xd8\xa9\xed\x4d\x45\xbf\xbe\x42\x14\x5a\x21\xa8\x82\x38\x27\xe3\x79\x9e\xf1\x86\x10\x0a\x18\xe9\x0d\xd5\x48\xb8\x2e\xa7\x65\xd1\x11\xb7\x75\xb9\x41\x9d\x28\x62\x31\xa0\x43\x0b\x0e\x75\x51\x96\x0c\x03\xd6\xe5\x34\xc6\x00\xed\x40\x76\x50\x84\x4f\x6c\x76\x22\xdd\xcf\x57\x1b\x21\x62\x5d\x76\xb9\xc1\x60\x7b\x73\x1c\x8a\xe2\xd2\xe2\xac\x55\x4c\x64\xae\xe0\x24\x5c\x75\x4f\x56\x91\x2c\xa6\x65\x83\x0e\x27\x88\xd7\xec\xe0\xc4\xe9\xfd\x68\xb2\x12\xde\x52\xca\x47\xc5\x5c\xb2\x10\xb7\xe9\x0e\xba\x88\xea\xb4\xa5\x08\x8e\x76\x1d\x6a\xf5\xfb\xc7\x86\x12\x13\xa7\x35\x7e\x64\x34\x9f\x4b\x54\xfd\x1f\xcf\x38\xda\xe2\x5c\xc3\x0b\x8e\xbd\xec\x07\xe4\xd9\xd3\xef\xd8\x55\x1b\x88\x15\x64\xdf\x89\xd2\xd7\x45\x0d\xa7\x65\xfb\x6c\x8e\xba\x96\xfe\xd6\x29\x28\x9a\x64\x8d\x18\xa2\xb0\xab\xf4\x3d\xea\xa3\x4e\xcf\xc4\x2d\x71\x7a\xc4\xf0\xce\x14\xaf\xcd\x9c\x9f\xe3\x9f\x47\x13\x15\x67\x37\x15\x0e\xb7\x66\xb7\x7d\xbe\x03\x00\x00\xff\xff\xad\xa6\xf6\xbd\x9c\x03\x00\x00")

func vpcControllerMetadataYamlBytes() ([]byte, error) {
	return bindataRead(
		_vpcControllerMetadataYaml,
		"vpc-controller-metadata.yaml",
	)
}

func vpcControllerMetadataYaml() (*asset, error) {
	bytes, err := vpcControllerMetadataYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vpc-controller-metadata.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa6, 0x89, 0x6b, 0xa9, 0x33, 0x90, 0x94, 0x63, 0xb2, 0xaf, 0x3a, 0x5c, 0x22, 0x5b, 0x19, 0xc7, 0xb9, 0x22, 0xd6, 0x5a, 0xbb, 0x68, 0xac, 0xf8, 0x24, 0x68, 0x4d, 0x2c, 0x54, 0x12, 0x18, 0x57}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"efa-device-plugin.yaml":       efaDevicePluginYaml,
	"neuron-device-plugin.yaml":    neuronDevicePluginYaml,
	"nvidia-device-plugin.yaml":    nvidiaDevicePluginYaml,
	"vpc-controller-metadata.yaml": vpcControllerMetadataYaml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"efa-device-plugin.yaml": {efaDevicePluginYaml, map[string]*bintree{}},
	"neuron-device-plugin.yaml": {neuronDevicePluginYaml, map[string]*bintree{}},
	"nvidia-device-plugin.yaml": {nvidiaDevicePluginYaml, map[string]*bintree{}},
	"vpc-controller-metadata.yaml": {vpcControllerMetadataYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
